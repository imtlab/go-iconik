---
swagger: "2.0"
info:
  version: "1.0"
  title: "iconik_files"
basePath: "/API/files"
paths:
  /v1/analysis/profiles/:
    get:
      summary: "Get analysis profiles"
      description: ""
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "per_page"
        in: "query"
        description: "The number of items for each page"
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "PerPage"
        x-optionalDataType: "Int32"
      - name: "last_id"
        in: "query"
        description: "ID of a last profile set on previous page"
        required: false
        type: "string"
        x-exportParamName: "LastId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Returns analysis profiles"
          schema:
            $ref: "#/definitions/AnalysisProfilesSchema"
        "401":
          description: "Token is invalid"
        "404":
          description: "Profiles don't exist"
    post:
      summary: "Create a new analysis profile"
      description: "\nRequired roles:\n - can_write_analysis_profiles"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/AnalysisProfileSchema"
        x-exportParamName: "Body"
      responses:
        "201":
          description: "Returns an analysis profile"
          schema:
            $ref: "#/definitions/AnalysisProfileSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
  /v1/analysis/profiles/{media_type}/default/:
    get:
      summary: "Get a default analysis profile"
      description: ""
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "media_type"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "MediaType"
      responses:
        "200":
          description: "The default analysis profile"
          schema:
            $ref: "#/definitions/AnalysisProfileSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "403":
          description: "Permission denied"
        "404":
          description: "Analysis profile does not exist"
  /v1/analysis/profiles/{profile_id}/:
    get:
      summary: "Get an analysis profile"
      description: ""
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "profile_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ProfileId"
      responses:
        "200":
          description: "Returns an analysis profile for provided media type"
          schema:
            $ref: "#/definitions/AnalysisProfileSchema"
        "401":
          description: "Token is invalid"
        "404":
          description: "Profile doesn't exist"
    put:
      summary: "Update an analysis profile information"
      description: "\nRequired roles:\n - can_write_analysis_profiles"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "profile_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ProfileId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/AnalysisProfileSchema"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Returns an analysis profile that was updated"
          schema:
            $ref: "#/definitions/AnalysisProfileSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Profile doesn't exist"
    delete:
      summary: "Delete an analysis profile"
      description: "\nRequired roles:\n - can_delete_analysis_profiles"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "profile_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ProfileId"
      responses:
        "204":
          description: "Without body"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Analysis profile doesn't exist"
    patch:
      summary: "Update an analysis profile information"
      description: "\nRequired roles:\n - can_write_analysis_profiles"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "profile_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ProfileId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/AnalysisProfileSchema"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Returns an analysis profile that was updated"
          schema:
            $ref: "#/definitions/AnalysisProfileSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Profile doesn't exist"
  /v1/analysis/profiles/{profile_id}/default/:
    post:
      summary: "Set a analysis profile to the default of its media type"
      description: "\nRequired roles:\n - can_write_analysis_profiles"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "profile_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ProfileId"
      responses:
        "201":
          description: "Success"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
    delete:
      summary: "Removes the default flag on a analysis profile"
      description: "\nRequired roles:\n - can_write_analysis_profiles"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "profile_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ProfileId"
      responses:
        "204":
          description: "Success"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
  /v1/analysis/service_accounts/:
    get:
      summary: "Get analysis service accounts"
      description: "\nRequired roles:\n - can_read_analysis_service_accounts"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "per_page"
        in: "query"
        description: "The number of items for each page"
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "PerPage"
        x-optionalDataType: "Int32"
      - name: "last_id"
        in: "query"
        description: "ID of a last service account set on previous page"
        required: false
        type: "string"
        x-exportParamName: "LastId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Returns analysis service accounts"
          schema:
            $ref: "#/definitions/AnalysisServiceAccountsSchema"
        "401":
          description: "Token is invalid"
        "404":
          description: "Service accounts don't exist"
    post:
      summary: "Create a new analysis service account"
      description: "\nRequired roles:\n - can_write_analysis_service_accounts"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/AnalysisServiceAccountSchema"
        x-exportParamName: "Body"
      responses:
        "201":
          description: "Returns an analysis service account"
          schema:
            $ref: "#/definitions/AnalysisServiceAccountReadSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
  /v1/analysis/service_accounts/{analysis_service_account_id}/:
    get:
      summary: "Get an analysis service account"
      description: "\nRequired roles:\n - can_read_analysis_service_accounts"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "analysis_service_account_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AnalysisServiceAccountId"
      responses:
        "200":
          description: "Returns an analysis service account"
          schema:
            $ref: "#/definitions/AnalysisServiceAccountReadSchema"
        "401":
          description: "Token is invalid"
        "404":
          description: "Service account doesn't exist"
    put:
      summary: "Update an analysis service account information"
      description: "\nRequired roles:\n - can_write_analysis_service_accounts"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "analysis_service_account_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AnalysisServiceAccountId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/AnalysisServiceAccountSchema"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Returns an analysis service account that was updated"
          schema:
            $ref: "#/definitions/AnalysisServiceAccountSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Service account doesn't exist"
    delete:
      summary: "Delete an analysis service account"
      description: "\nRequired roles:\n - can_delete_analysis_service_accounts"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "analysis_service_account_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AnalysisServiceAccountId"
      responses:
        "204":
          description: "Without body"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Analysis service account doesn't exist"
    patch:
      summary: "Update an analysis service account information"
      description: "\nRequired roles:\n - can_write_analysis_service_accounts"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "analysis_service_account_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AnalysisServiceAccountId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/AnalysisServiceAccountSchema"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Returns an analysis service account that was updated"
          schema:
            $ref: "#/definitions/AnalysisServiceAccountSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Service account doesn't exist"
  /v1/analysis/service_accounts/{analysis_service_account_id}/private_data/: {}
  /v1/assets/bulk/keyframes/:
    post:
      summary: "Create a transcode job for proxy and keyframes generation of multiple\
        \ assets"
      description: "\nRequired roles:\n - can_create_transcode_jobs"
      parameters:
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/BulkTranscodeSchema"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "OK"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
  /v1/assets/export_locations/{export_location_id}/:
    post:
      summary: "Export multiple assets to export location"
      description: "\nRequired roles:\n - can_write_exports"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "export_location_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ExportLocationId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/AssetBatchExportSchema"
        x-exportParamName: "Body"
      deprecated: true
      responses:
        "200":
          description: "Returns an export job id"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
  /v1/assets/{asset_id}/custom_keyframe/:
    post:
      summary: "Create keyframe of type poster for asset"
      description: "\nRequired roles:\n - can_write_keyframes"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      responses:
        "201":
          description: "Returns created keyframe"
          schema:
            $ref: "#/definitions/KeyframeSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
  /v1/assets/{asset_id}/custom_keyframe/{poster_id}/:
    post:
      summary: "Set keyframe of type poster as asset keyframe"
      description: "\nRequired roles:\n - can_write_keyframes"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "poster_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "PosterId"
      - name: "overwrite"
        in: "query"
        description: "set to false to keep current custom_poster and custom_keyframe\
          \ on asset"
        required: false
        type: "boolean"
        x-exportParamName: "Overwrite"
        x-optionalDataType: "Bool"
      responses:
        "201":
          description: "Returns custom keyframe"
          schema:
            $ref: "#/definitions/KeyframeSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
  /v1/assets/{asset_id}/export_locations/{export_location_id}/:
    post:
      summary: "Export asset to export location"
      description: "\nRequired roles:\n - can_write_exports"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "export_location_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ExportLocationId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/AssetExportSchema"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Returns an export job id"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
  /v1/assets/{asset_id}/file_sets/:
    get:
      summary: "Get all asset's file sets"
      description: "\nRequired roles:\n - can_read_files"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "per_page"
        in: "query"
        description: "The number of items for each page"
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "PerPage"
        x-optionalDataType: "Int32"
      - name: "last_id"
        in: "query"
        description: "ID of a last file set on previous page"
        required: false
        type: "string"
        x-exportParamName: "LastId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Returns all file sets associated with this asset"
          schema:
            $ref: "#/definitions/FileSetsSchema"
        "401":
          description: "Token is invalid"
        "404":
          description: "FileSets for this asset don't exist"
    post:
      summary: "Create file set and associate to asset"
      description: "\nRequired roles:\n - can_write_files"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/FileSetSchema"
        x-exportParamName: "Body"
      responses:
        "201":
          description: "Returns a file set that was created for this asset"
          schema:
            $ref: "#/definitions/FileSetSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
  /v1/assets/{asset_id}/file_sets/{file_set_id}/:
    get:
      summary: "Get asset's file set"
      description: "\nRequired roles:\n - can_read_files"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "file_set_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "FileSetId"
      responses:
        "200":
          description: "Returns a file set associated with this asset"
          schema:
            $ref: "#/definitions/FileSetSchema"
        "401":
          description: "Token is invalid"
        "404":
          description: "File set for this asset doesn't exist"
    put:
      summary: "Update file set information"
      description: "\nRequired roles:\n - can_write_files"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "file_set_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "FileSetId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/FileSetSchema"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Returns a file set that was updated"
          schema:
            $ref: "#/definitions/FileSetSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "File set for this asset doesn't exist"
    delete:
      summary: "Delete asset's file set, file entries, and actual files"
      description: "\nRequired roles:\n - can_delete_files"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "file_set_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "FileSetId"
      responses:
        "200":
          description: "File set that has been marked as deleted"
        "204":
          description: "Without body in case `immediately` option was provided"
        "401":
          description: "Token is invalid"
        "404":
          description: "File set for this asset doesn't exist"
    patch:
      summary: "Update file set information"
      description: "\nRequired roles:\n - can_write_files"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "file_set_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "FileSetId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/FileSetSchema"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Returns a file set that was updated"
          schema:
            $ref: "#/definitions/FileSetSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "File set for this asset doesn't exist"
  /v1/assets/{asset_id}/file_sets/{file_set_id}/files/:
    get:
      summary: "Get files from a file set"
      description: "\nRequired roles:\n - can_read_files"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "file_set_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "FileSetId"
      - name: "per_page"
        in: "query"
        description: "The number of items for each page"
        required: false
        type: "integer"
        x-exportParamName: "PerPage"
        x-optionalDataType: "Int32"
      - name: "last_id"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "LastId"
        x-optionalDataType: "String"
      - name: "generate_signed_url"
        in: "query"
        description: "Set to false if you don't need a URL, will speed things up"
        required: false
        type: "boolean"
        default: true
        x-exportParamName: "GenerateSignedUrl"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "Returns files from a file set"
          schema:
            $ref: "#/definitions/FilesSchema"
  /v1/assets/{asset_id}/file_sets/{file_set_id}/purge/:
    delete:
      summary: "Purge deleted asset's file set, file entries, and actual files."
      description: "\nRequired roles:\n - can_delete_files"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "file_set_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "FileSetId"
      responses:
        "204":
          description: "Without body"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "File set for this asset doesn't exist"
  /v1/assets/{asset_id}/file_sets/{file_set_id}/reindex/: {}
  /v1/assets/{asset_id}/file_sets/{file_set_id}/restore/:
    put:
      summary: "Restore delete asset's file set"
      description: "\nRequired roles:\n - can_write_files"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "file_set_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "FileSetId"
      responses:
        "200":
          description: "File set that has been restored"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "File set for this asset doesn't exist"
  /v1/assets/{asset_id}/files/:
    get:
      summary: "Get all asset's files"
      description: "\nRequired roles:\n - can_read_files"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "per_page"
        in: "query"
        description: "The number of items for each page"
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "PerPage"
        x-optionalDataType: "Int32"
      - name: "generate_signed_url"
        in: "query"
        description: "Set to True if you do need a URL, this makes the request slower."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "GenerateSignedUrl"
        x-optionalDataType: "Bool"
      - name: "content_disposition"
        in: "query"
        description: "Set to attachment if you want a download link. Note that this\
          \ will not create a download in asset history"
        required: false
        type: "string"
        default: "inline"
        x-exportParamName: "ContentDisposition"
        x-optionalDataType: "String"
      - name: "last_id"
        in: "query"
        description: "ID of a last file on previous page"
        required: false
        type: "string"
        x-exportParamName: "LastId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Returns all files associated with this asset"
          schema:
            $ref: "#/definitions/FilesSchema"
        "401":
          description: "Token is invalid"
        "404":
          description: "Files for this asset don't exist"
    post:
      summary: "Create file and associate to asset"
      description: "\nRequired roles:\n - can_write_files"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/FileCreateSchema"
        x-exportParamName: "Body"
      responses:
        "201":
          description: "Returns a file that was created for this asset"
          schema:
            $ref: "#/definitions/FileCreateSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
  /v1/assets/{asset_id}/files/{file_id}/:
    get:
      summary: "Get asset's file"
      description: "\nRequired roles:\n - can_read_files"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "file_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "FileId"
      - name: "generate_signed_post_url"
        in: "query"
        description: "Set to true to get a new upload url for the file"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "GenerateSignedPostUrl"
        x-optionalDataType: "Bool"
      - name: "content_disposition"
        in: "query"
        description: "Set to attachment if you want a download link. Note that this\
          \ will not create a asset history entry for the download"
        required: false
        type: "string"
        default: "inline"
        x-exportParamName: "ContentDisposition"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Returns a file associated with this asset"
          schema:
            $ref: "#/definitions/FileSchema"
        "401":
          description: "Token is invalid"
        "404":
          description: "File for this asset doesn't exist"
    put:
      summary: "Update file information"
      description: "\nRequired roles:\n - can_write_files"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "file_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "FileId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/FileSchema"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Returns a file that was updated"
          schema:
            $ref: "#/definitions/FileSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "File for this asset doesn't exist"
    delete:
      summary: "Delete asset's file entry (Not the actual file, use DELETE file_set\
        \ for that)"
      description: "\nRequired roles:\n - can_delete_files"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "file_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "FileId"
      responses:
        "204":
          description: "Without body"
        "401":
          description: "Token is invalid"
        "404":
          description: "File for this asset doesn't exist"
    patch:
      summary: "Update file information"
      description: "\nRequired roles:\n - can_write_files"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "file_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "FileId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/FileSchema"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Returns a file that was updated"
          schema:
            $ref: "#/definitions/FileSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "File for this asset doesn't exist"
  /v1/assets/{asset_id}/files/{file_id}/capture/{milliseconds}/:
    post:
      summary: "Create a transcode job for creating still keyframe"
      description: "\nRequired roles:\n - can_create_poster"
      parameters:
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "file_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "FileId"
      - name: "milliseconds"
        in: "path"
        required: true
        type: "integer"
        x-exportParamName: "Milliseconds"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/TranscodeRequestSchema"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/TranscodeResponseSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "File or asset not found"
  /v1/assets/{asset_id}/files/{file_id}/download_url/:
    get:
      summary: "Get asset's file download URL"
      description: "\nRequired roles:\n - can_read_files"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "file_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "FileId"
      responses:
        "200":
          description: "Returns a file download url"
          schema:
            $ref: "#/definitions/FileDownloadURLSchema"
        "401":
          description: "Token is invalid"
        "404":
          description: "File for this asset doesn't exist"
  /v1/assets/{asset_id}/files/{file_id}/edit_proxies/:
    post:
      summary: "Create format, file_set, and file for edit proxy if storage has edit\
        \ proxy transcoder configured"
      description: "\nRequired roles:\n - can_create_transcode_jobs"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "file_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "FileId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/EditProxySchema"
        x-exportParamName: "Body"
      responses:
        "201":
          description: "ID and status of the job"
        "204":
          description: "No edit proxy created"
        "401":
          description: "Token is invalid"
  /v1/assets/{asset_id}/files/{file_id}/isg_handler_url/:
    get:
      summary: "Get asset's file handler URL for ISG"
      description: "\nRequired roles:\n - can_read_files"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "file_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "FileId"
      responses:
        "200":
          description: "Returns a file handler URL for ISG"
          schema:
            $ref: "#/definitions/ISGHandlerURLSchema"
        "401":
          description: "Token is invalid"
        "404":
          description: "File for this asset doesn't exist"
  /v1/assets/{asset_id}/files/{file_id}/keyframes/:
    post:
      summary: "Create a transcode job for proxy and keyframes"
      description: "\nRequired roles:\n - can_create_transcode_jobs"
      parameters:
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "file_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "FileId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/TranscodeRequestSchema"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/TranscodeResponseSchema"
        "204":
          description: "Transcode was ignored by Storage ignore pattern"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "File or asset not found"
  /v1/assets/{asset_id}/files/{file_id}/mediainfo/:
    post:
      summary: "Create a job for extracting mediainfo"
      description: "\nRequired roles:\n - can_create_transcode_jobs"
      parameters:
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "file_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "FileId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/TranscodeRequestSchema"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/TranscodeResponseSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "File or asset not found"
  /v1/assets/{asset_id}/files/{file_id}/multipart/:
    post:
      summary: "Complete multipart upload (GCS)."
      description: "\nRequired roles:\n - can_write_files"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "file_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "FileId"
      - name: "temporary"
        in: "query"
        description: "Use temporary file record"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "Temporary"
        x-optionalDataType: "Bool"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/MultipartUploadSchema"
        x-exportParamName: "Body"
      deprecated: true
      responses:
        "200":
          description: "Without body"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
  /v1/assets/{asset_id}/files/{file_id}/multipart/b2/cancel/:
    post:
      summary: "Cancel Backblaze B2 multipart upload."
      description: "\nRequired roles:\n - can_write_files"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "file_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "FileId"
      - name: "temporary"
        in: "query"
        description: "Use temporary file record"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "Temporary"
        x-optionalDataType: "Bool"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/MultipartB2CancelUpload"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Upload canceled"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
  /v1/assets/{asset_id}/files/{file_id}/multipart/b2/finish/:
    post:
      summary: "Complete Backblaze B2 multipart upload."
      description: "\nRequired roles:\n - can_write_files"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "file_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "FileId"
      - name: "temporary"
        in: "query"
        description: "Use temporary file record"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "Temporary"
        x-optionalDataType: "Bool"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/MultipartB2FinishUpload"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Successful upload"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
  /v1/assets/{asset_id}/files/{file_id}/multipart/b2/start/:
    post:
      summary: "Start Backblaze B2 multipart upload."
      description: "\nRequired roles:\n - can_write_files"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "file_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "FileId"
      - name: "temporary"
        in: "query"
        description: "Use temporary file record"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "Temporary"
        x-optionalDataType: "Bool"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/MultipartB2StartUpload"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Returns part upload url"
          schema:
            $ref: "#/definitions/MultipartB2StartUpload"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
  /v1/assets/{asset_id}/files/{file_id}/multipart/cleanup/:
    post:
      summary: "Cleanup multipart upload (GCS)."
      description: "\nRequired roles:\n - can_write_files"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "file_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "FileId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/MultipartUploadCleanupSchema"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Without body"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
  /v1/assets/{asset_id}/files/{file_id}/multipart/gcs/compose_url/:
    post:
      summary: "Get object compose url for GCS parallel upload."
      description: "\nRequired roles:\n - can_write_files"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "file_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "FileId"
      - name: "temporary"
        in: "query"
        description: "Use temporary file record"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "Temporary"
        x-optionalDataType: "Bool"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/MultipartUploadComposeSchema"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Return pre-signed compose url"
          schema:
            $ref: "#/definitions/MultiPartUploadComposeURLSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
  /v1/assets/{asset_id}/files/{file_id}/multipart_url/:
    get:
      summary: "Get presigned urls for multipart upload (S3)."
      description: "\nRequired roles:\n - can_write_files"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "file_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "FileId"
      - name: "upload_id"
        in: "query"
        description: "Multipart UploadId"
        required: true
        type: "string"
        x-exportParamName: "UploadId"
      - name: "type"
        in: "query"
        description: "List of multipart upload urls of required type"
        required: false
        type: "string"
        x-exportParamName: "Type_"
        x-optionalDataType: "String"
      - name: "max_part_number"
        in: "query"
        description: "Maximum PartNumber that multipart upload has"
        required: false
        type: "integer"
        x-exportParamName: "MaxPartNumber"
        x-optionalDataType: "Int32"
      - name: "temporary"
        in: "query"
        description: "Use temporary file record"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "Temporary"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "Returns presigned urls for multipart upload"
          schema:
            $ref: "#/definitions/MultiPartURLsSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
  /v1/assets/{asset_id}/files/{file_id}/multipart_url/part/:
    get:
      summary: "Get presigned urls for multipart part upload (S3 & GCS)."
      description: "\nRequired roles:\n - can_write_files"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "file_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "FileId"
      - name: "upload_id"
        in: "query"
        description: "Multipart UploadId"
        required: false
        type: "string"
        x-exportParamName: "UploadId"
        x-optionalDataType: "String"
      - name: "parts_num"
        in: "query"
        description: "Number of parts to upload"
        required: true
        type: "integer"
        x-exportParamName: "PartsNum"
      - name: "per_page"
        in: "query"
        description: "The number of items for each page"
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "PerPage"
        x-optionalDataType: "Int32"
      - name: "page"
        in: "query"
        description: "Which page number to fetch"
        required: false
        type: "integer"
        default: 1
        minimum: 1
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "temporary"
        in: "query"
        description: "Use temporary file record"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "Temporary"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "Returns presigned urls for multipart part upload"
          schema:
            $ref: "#/definitions/MultiPartUploadURLsSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
  /v1/assets/{asset_id}/files/{file_id}/reindex/:
    post:
      summary: "Trigger reindexing of a file"
      description: "\nRequired roles:\n - can_reindex_storages"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "file_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "FileId"
      responses:
        "201":
          description: "ID and status of the job"
        "401":
          description: "Token is invalid"
  /v1/assets/{asset_id}/files/{file_id}/subtitles/:
    post:
      summary: "Create a transcode job for subtitle files"
      description: "\nRequired roles:\n - can_create_transcode_jobs"
      parameters:
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "file_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "FileId"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/SubtitleRequestSchema"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "OK"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "File or asset not found"
  /v1/assets/{asset_id}/files/{file_id}/upload_url/: {}
  /v1/assets/{asset_id}/formats/:
    get:
      summary: "Get all asset's formats"
      description: "\nRequired roles:\n - can_read_formats"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "per_page"
        in: "query"
        description: "The number of items for each page"
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "PerPage"
        x-optionalDataType: "Int32"
      - name: "last_id"
        in: "query"
        description: "ID of a last format on previous page"
        required: false
        type: "string"
        x-exportParamName: "LastId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Returns all formats associated with this asset"
          schema:
            $ref: "#/definitions/FormatsSchema"
        "401":
          description: "Token is invalid"
        "404":
          description: "Formats for this asset don't exist"
    post:
      summary: "Create format and associate to asset"
      description: "\nRequired roles:\n - can_write_formats"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/FormatSchema"
        x-exportParamName: "Body"
      responses:
        "201":
          description: "Returns a format that was created for this asset"
          schema:
            $ref: "#/definitions/FormatSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
  /v1/assets/{asset_id}/formats/{format_id}/:
    get:
      summary: "Get asset's format"
      description: "\nRequired roles:\n - can_read_formats"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "format_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "FormatId"
      responses:
        "200":
          description: "Returns a format associated with this asset"
          schema:
            $ref: "#/definitions/FormatSchema"
        "401":
          description: "Token is invalid"
        "404":
          description: "Format for this asset doesn't exist"
    put:
      summary: "Update format information"
      description: "\nRequired roles:\n - can_write_formats"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "format_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "FormatId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/FormatSchema"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Returns a format that was updated"
          schema:
            $ref: "#/definitions/FormatUpdateSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Format for this asset doesn't exist"
    delete:
      summary: "Delete asset's format"
      description: "\nRequired roles:\n - can_delete_formats"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "format_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "FormatId"
      - name: "delete_immediately"
        in: "query"
        description: "Permanently delete format without sending it to the Recycle\
          \ Bin"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "DeleteImmediately"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "Format that marked as deleted"
        "204":
          description: "Without body in case `immediately` option was provided"
        "401":
          description: "Token is invalid"
        "404":
          description: "Format for this asset doesn't exist"
    patch:
      summary: "Update format information"
      description: "\nRequired roles:\n - can_write_formats"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "format_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "FormatId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/FormatSchema"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Returns a format that was updated"
          schema:
            $ref: "#/definitions/FormatUpdateSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Format for this asset doesn't exist"
  /v1/assets/{asset_id}/formats/{format_id}/archive/:
    post:
      summary: "Archive format"
      description: "\nRequired roles:\n - can_archive_formats"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "format_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "FormatId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/FormatArchiveSchema"
        x-exportParamName: "Body"
      responses:
        "202":
          description: "No body"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Format for this asset doesn't exist"
    delete:
      summary: "Delete archived format"
      description: "\nRequired roles:\n - can_delete_archived_formats"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "format_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "FormatId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/FormatDeleteArchiveSchema"
        x-exportParamName: "Body"
      responses:
        "202":
          description: "No body"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Format for this asset doesn't exist"
  /v1/assets/{asset_id}/formats/{format_id}/components/:
    get:
      summary: "Get all components for a format in an asset"
      description: "\nRequired roles:\n - can_read_formats"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "format_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "FormatId"
      responses:
        "200":
          description: "Returns all formats associated with this asset"
          schema:
            $ref: "#/definitions/ComponentsSchema"
        "400":
          description: "Invalid input (Wrong type of UUID or JSON)"
        "401":
          description: "Token is invalid"
        "404":
          description: "Asset/Format/Component don't exist"
    post:
      summary: "Add a new format component"
      description: "\nRequired roles:\n - can_create_formats"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "format_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "FormatId"
      responses:
        "200":
          description: "Returns all formats associated with this asset"
          schema:
            $ref: "#/definitions/ComponentsSchema"
        "400":
          description: "Invalid input (Wrong type of UUID or JSON)"
        "401":
          description: "Token is invalid"
        "404":
          description: "Formats for this asset don't exist"
  /v1/assets/{asset_id}/formats/{format_id}/components/{component_id}/:
    get:
      summary: "Get a component for a format in an asset"
      description: "\nRequired roles:\n - can_read_formats"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "format_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "FormatId"
      - name: "component_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ComponentId"
      responses:
        "200":
          description: "Returns all formats associated with this asset"
          schema:
            $ref: "#/definitions/ComponentsSchema"
        "400":
          description: "Invalid input (Wrong type of UUID or JSON)"
        "401":
          description: "Token is invalid"
        "404":
          description: "Asset/Format/Component don't exist"
    put:
      summary: "Update a component in a format"
      description: "\nRequired roles:\n - can_create_formats"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "format_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "FormatId"
      - name: "component_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ComponentId"
      responses:
        "200":
          description: "Returns all formats associated with this asset"
          schema:
            $ref: "#/definitions/ComponentsSchema"
        "400":
          description: "Invalid input (Wrong type of UUID or JSON)"
        "401":
          description: "Token is invalid"
        "404":
          description: "Formats for this asset don't exist"
    delete:
      summary: "Delete a component in a format"
      description: "\nRequired roles:\n - can_delete_formats"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "format_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "FormatId"
      - name: "component_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ComponentId"
      responses:
        "200":
          description: "Returns all formats associated with this asset"
          schema:
            $ref: "#/definitions/ComponentsSchema"
        "400":
          description: "Invalid input (Wrong type of UUID or JSON)"
        "401":
          description: "Token is invalid"
        "404":
          description: "Formats for this asset don't exist"
  /v1/assets/{asset_id}/formats/{format_id}/file_sets/:
    get:
      summary: "Get all asset's file sets in a specific format"
      description: "\nRequired roles:\n - can_read_files"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "format_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "FormatId"
      - name: "per_page"
        in: "query"
        description: "The number of items for each page"
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "PerPage"
        x-optionalDataType: "Int32"
      - name: "last_id"
        in: "query"
        description: "ID of a last file set on previous page"
        required: false
        type: "string"
        x-exportParamName: "LastId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Returns all file sets associated with this asset"
          schema:
            $ref: "#/definitions/FileSetsSchema"
        "401":
          description: "Token is invalid"
        "404":
          description: "FileSets for this asset don't exist"
  /v1/assets/{asset_id}/formats/{format_id}/file_sets/sources/:
    get:
      summary: "Get all file sets with matching format and storage method"
      description: "\nRequired roles:\n - can_read_files"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "format_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "FormatId"
      responses:
        "200":
          description: "Returns a files"
          schema:
            $ref: "#/definitions/FileSetSourcesSchema"
        "400":
          description: "Invalid input (Wrong type of UUID or JSON)"
  /v1/assets/{asset_id}/formats/{format_id}/file_sets/sources/{storage_method}/:
    get:
      summary: "Get all file sets with matching format and storage method"
      description: "\nRequired roles:\n - can_read_files"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "format_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "FormatId"
      - name: "storage_method"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "StorageMethod"
      responses:
        "200":
          description: "Returns a files"
          schema:
            $ref: "#/definitions/FileSetsSchema"
        "400":
          description: "Invalid input (Wrong type of UUID or JSON)"
  /v1/assets/{asset_id}/formats/{format_id}/purge/:
    delete:
      summary: "Purge deleted asset's format"
      description: "\nRequired roles:\n - can_delete_formats"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "format_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "FormatId"
      responses:
        "204":
          description: "Without body"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Format for this asset doesn't exist"
  /v1/assets/{asset_id}/formats/{format_id}/reindex/: {}
  /v1/assets/{asset_id}/formats/{format_id}/restore/:
    post:
      summary: "Restore archived format"
      description: "\nRequired roles:\n - can_restore_archived_formats"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "format_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "FormatId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/FormatRestoreSchema"
        x-exportParamName: "Body"
      responses:
        "202":
          description: "No body"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Format for this asset doesn't exist"
    put:
      summary: "Restore deleted asset's format"
      description: "\nRequired roles:\n - can_write_formats"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "format_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "FormatId"
      responses:
        "200":
          description: "Format that has been restored"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Format for this asset doesn't exist"
  /v1/assets/{asset_id}/formats/{format_id}/storages/{storage_id}/file_sets/:
    get:
      summary: "Get all asset's file sets in a specific format on a specific storage"
      description: "\nRequired roles:\n - can_read_files"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "format_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "FormatId"
      - name: "storage_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "StorageId"
      - name: "per_page"
        in: "query"
        description: "The number of items for each page"
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "PerPage"
        x-optionalDataType: "Int32"
      - name: "last_id"
        in: "query"
        description: "ID of a last file set on previous page"
        required: false
        type: "string"
        x-exportParamName: "LastId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Returns all file sets associated with this asset"
          schema:
            $ref: "#/definitions/FileSetsSchema"
        "401":
          description: "Token is invalid"
        "404":
          description: "FileSets for this asset don't exist"
  /v1/assets/{asset_id}/formats/{name}/:
    get:
      summary: "Get asset's format"
      description: "\nRequired roles:\n - can_read_formats"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "name"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Name"
      responses:
        "200":
          description: "Returns a format associated with this asset"
          schema:
            $ref: "#/definitions/FormatSchema"
        "401":
          description: "Token is invalid"
        "404":
          description: "Format for this asset doesn't exist"
  /v1/assets/{asset_id}/keyframes/:
    get:
      summary: "Get all asset's keyframes"
      description: "\nRequired roles:\n - can_read_assets"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "per_page"
        in: "query"
        description: "The number of items for each page"
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "PerPage"
        x-optionalDataType: "Int32"
      - name: "generate_signed_url"
        in: "query"
        description: "Set to false if you don't need a URL, will speed things up"
        required: false
        type: "boolean"
        default: true
        x-exportParamName: "GenerateSignedUrl"
        x-optionalDataType: "Bool"
      - name: "content_disposition"
        in: "query"
        description: "Set to attachment if you do not want a download link"
        required: false
        type: "string"
        default: "inline"
        x-exportParamName: "ContentDisposition"
        x-optionalDataType: "String"
      - name: "last_id"
        in: "query"
        description: "ID of a last keyframe on previous page"
        required: false
        type: "string"
        x-exportParamName: "LastId"
        x-optionalDataType: "String"
      - name: "include_all_versions"
        in: "query"
        description: "If true return asset's keyframes for all versions"
        required: false
        type: "boolean"
        x-exportParamName: "IncludeAllVersions"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "Returns all keyframes associated with this asset"
          schema:
            $ref: "#/definitions/KeyframesSchema"
        "401":
          description: "Token is invalid"
        "404":
          description: "Keyframes for this asset don't exist"
    post:
      summary: "Create keyframe and associate to asset"
      description: "\nRequired roles:\n - can_write_keyframes"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "use_google_resumable_upload"
        in: "query"
        description: "Set to True to get a google resumable upload link"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "UseGoogleResumableUpload"
        x-optionalDataType: "Bool"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/KeyframeSchema"
        x-exportParamName: "Body"
      responses:
        "201":
          description: "Returns a keyframe that was created for this asset"
          schema:
            $ref: "#/definitions/KeyframeCreateSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
  /v1/assets/{asset_id}/keyframes/{keyframe_id}/:
    get:
      summary: "Get asset's proxy"
      description: "\nRequired roles:\n - can_read_assets"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "keyframe_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "KeyframeId"
      - name: "content_disposition"
        in: "query"
        description: "Set to attachment if you do not want a download link"
        required: false
        type: "string"
        default: "inline"
        x-exportParamName: "ContentDisposition"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Returns all files associated with this asset"
          schema:
            $ref: "#/definitions/FileSchema"
        "401":
          description: "Token is invalid"
        "404":
          description: "Keyframe for this asset don't exist"
    put:
      summary: "Update keyframe information"
      description: "\nRequired roles:\n - can_write_keyframes"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "keyframe_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "KeyframeId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/KeyframeSchema"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Returns a keyframe that was updated"
          schema:
            $ref: "#/definitions/KeyframeSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Keyframe for this asset don't exist"
    delete:
      summary: "Delete asset's keyframe"
      description: "\nRequired roles:\n - can_write_keyframes"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "keyframe_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "KeyframeId"
      - name: "keep_poster"
        in: "query"
        required: false
        type: "boolean"
        x-exportParamName: "KeepPoster"
        x-optionalDataType: "Bool"
      responses:
        "204":
          description: "Without body"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Keyframe for this asset don't exist"
    patch:
      summary: "Update keyframe information"
      description: "\nRequired roles:\n - can_write_keyframes"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "keyframe_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "KeyframeId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/KeyframeSchema"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Returns a keyframe that was updated"
          schema:
            $ref: "#/definitions/KeyframeSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Keyframe for this asset don't exist"
  /v1/assets/{asset_id}/keyframes/{keyframe_id}/public/:
    post:
      summary: "Make the keyframe link public"
      description: "\nRequired roles:\n - can_write_keyframes"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "keyframe_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "KeyframeId"
      responses:
        "201":
          description: "Returns a keyframe that was updated"
          schema:
            $ref: "#/definitions/KeyframeSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
    delete:
      summary: "Make the keyframe link private"
      description: "\nRequired roles:\n - can_write_keyframes"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "keyframe_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "KeyframeId"
      responses:
        "201":
          description: "Returns a keyframe that was updated"
          schema:
            $ref: "#/definitions/KeyframeSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
  /v1/assets/{asset_id}/method/{storage_method}/keyframes/:
    post:
      summary: "Create keyframe and associate to asset"
      description: "\nRequired roles:\n - can_write_keyframes"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "storage_method"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "StorageMethod"
      - name: "use_google_resumable_upload"
        in: "query"
        description: "Set to True to get a google resumable upload link"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "UseGoogleResumableUpload"
        x-optionalDataType: "Bool"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/KeyframeSchema"
        x-exportParamName: "Body"
      responses:
        "201":
          description: "Returns a keyframe that was created for this asset"
          schema:
            $ref: "#/definitions/KeyframeCreateSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
  /v1/assets/{asset_id}/method/{storage_method}/proxies/:
    post:
      summary: "Create proxy and associate to asset"
      description: "\nRequired roles:\n - can_write_proxies"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "storage_method"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "StorageMethod"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/ProxySchema"
        x-exportParamName: "Body"
      responses:
        "201":
          description: "Returns a proxy that was created for this asset"
          schema:
            $ref: "#/definitions/ProxyCreateSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
  /v1/assets/{asset_id}/proxies/:
    get:
      summary: "Get all asset's proxies"
      description: "\nRequired roles:\n - can_read_proxies"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "per_page"
        in: "query"
        description: "The number of items for each page"
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "PerPage"
        x-optionalDataType: "Int32"
      - name: "generate_signed_url"
        in: "query"
        description: "Set to false if you don't need a URL, will speed things up"
        required: false
        type: "boolean"
        default: true
        x-exportParamName: "GenerateSignedUrl"
        x-optionalDataType: "Bool"
      - name: "content_disposition"
        in: "query"
        description: "Set to attachment if you want a download link"
        required: false
        type: "string"
        default: "inline"
        x-exportParamName: "ContentDisposition"
        x-optionalDataType: "String"
      - name: "last_id"
        in: "query"
        description: "ID of a last proxy on previous page"
        required: false
        type: "string"
        x-exportParamName: "LastId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Returns all proxies associated with this asset"
          schema:
            $ref: "#/definitions/ProxiesSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Proxies for this asset doesn't exist"
    post:
      summary: "Create proxy and associate to asset"
      description: "\nRequired roles:\n - can_write_proxies"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/ProxySchema"
        x-exportParamName: "Body"
      responses:
        "201":
          description: "Returns a proxy that was created for this asset"
          schema:
            $ref: "#/definitions/ProxyCreateSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
  /v1/assets/{asset_id}/proxies/{proxy_id}/:
    get:
      summary: "Get asset's proxy"
      description: "\nRequired roles:\n - can_read_proxies"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "proxy_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ProxyId"
      - name: "content_disposition"
        in: "query"
        description: "Set to attachment if you want a download link"
        required: false
        type: "string"
        default: "inline"
        x-exportParamName: "ContentDisposition"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Returns proxy associated with this asset"
          schema:
            $ref: "#/definitions/ProxySchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Proxy for this asset doesn't exist"
    put:
      summary: "Update proxy information"
      description: "\nRequired roles:\n - can_write_proxies"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "proxy_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ProxyId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/ProxySchema"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Returns a proxy that was updated"
          schema:
            $ref: "#/definitions/ProxySchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Proxy for this asset doesn't exist"
    delete:
      summary: "Delete asset's proxy"
      description: "\nRequired roles:\n - can_delete_proxies"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "proxy_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ProxyId"
      responses:
        "204":
          description: "Without body"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Proxy for this asset doesn't exist"
    patch:
      summary: "Update proxy information"
      description: "\nRequired roles:\n - can_write_proxies"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "proxy_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ProxyId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/ProxySchema"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Returns a proxy that was updated"
          schema:
            $ref: "#/definitions/ProxySchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Proxy for this asset doesn't exist"
  /v1/assets/{asset_id}/proxies/{proxy_id}/download_url/:
    get:
      summary: "Get asset's proxy download url"
      description: "\nRequired roles:\n - can_read_proxies"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "proxy_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ProxyId"
      responses:
        "200":
          description: "Returns proxy associated with this asset"
          schema:
            $ref: "#/definitions/ProxyDownloadURLSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Proxy for this asset doesn't exist"
  /v1/assets/{asset_id}/proxies/{proxy_id}/keyframes/:
    post:
      summary: "Create a transcode job for keyframes from a proxy"
      description: "\nRequired roles:\n - can_create_transcode_jobs"
      parameters:
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "proxy_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ProxyId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/TranscodeRequestSchema"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/TranscodeResponseSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "File or asset not found"
  /v1/assets/{asset_id}/proxies/{proxy_id}/multipart_url/:
    get:
      summary: "Get presigned urls for S3 multipart upload."
      description: "\nRequired roles:\n - can_write_proxies"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "proxy_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ProxyId"
      - name: "upload_id"
        in: "query"
        description: "Multipart UploadId"
        required: true
        type: "string"
        x-exportParamName: "UploadId"
      - name: "type"
        in: "query"
        description: "List of multipart upload urls of required type"
        required: false
        type: "string"
        x-exportParamName: "Type_"
        x-optionalDataType: "String"
      - name: "max_part_number"
        in: "query"
        description: "Maximum PartNumber that multipart upload has"
        required: false
        type: "integer"
        x-exportParamName: "MaxPartNumber"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "Returns presigned urls for multipart upload"
          schema:
            $ref: "#/definitions/MultiPartURLsSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
  /v1/assets/{asset_id}/proxies/{proxy_id}/multipart_url/part/:
    get:
      summary: "Get presigned urls for S3 multipart part upload."
      description: "\nRequired roles:\n - can_write_proxies"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "proxy_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ProxyId"
      - name: "upload_id"
        in: "query"
        description: "Multipart UploadId"
        required: false
        type: "string"
        x-exportParamName: "UploadId"
        x-optionalDataType: "String"
      - name: "parts_num"
        in: "query"
        description: "Number of parts to upload"
        required: true
        type: "integer"
        x-exportParamName: "PartsNum"
      - name: "per_page"
        in: "query"
        description: "The number of items for each page"
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "PerPage"
        x-optionalDataType: "Int32"
      - name: "page"
        in: "query"
        description: "Which page number to fetch"
        required: false
        type: "integer"
        default: 1
        minimum: 1
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "Returns presigned urls for multipart part upload"
          schema:
            $ref: "#/definitions/MultiPartUploadURLsSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
  /v1/assets/{asset_id}/proxies/{proxy_id}/public/:
    post:
      summary: "Make the proxy link public"
      description: "\nRequired roles:\n - can_write_proxies"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "proxy_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ProxyId"
      responses:
        "201":
          description: "Returns a proxy that was updated"
          schema:
            $ref: "#/definitions/ProxySchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
    delete:
      summary: "Make the proxy link private"
      description: "\nRequired roles:\n - can_write_proxies"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "proxy_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ProxyId"
      responses:
        "201":
          description: "Returns a proxy that was updated"
          schema:
            $ref: "#/definitions/ProxySchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
  /v1/assets/{asset_id}/proxies/{proxy_id}/upload_url/: {}
  /v1/assets/{asset_id}/subtitles/:
    get:
      summary: "Get all asset's subtitles"
      description: "\nRequired roles:\n - can_read_asset_subtitles"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "per_page"
        in: "query"
        description: "The number of items for each page"
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "PerPage"
        x-optionalDataType: "Int32"
      - name: "last_id"
        in: "query"
        description: "ID of a last subtitle on previous page"
        required: false
        type: "string"
        x-exportParamName: "LastId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Returns all subtitles associated with this asset"
          schema:
            $ref: "#/definitions/SubtitlesSchema"
        "401":
          description: "Token is invalid"
        "404":
          description: "Subtitles for this asset don't exist"
    post:
      summary: "Create subtitle proxy and associate to asset"
      description: "\nRequired roles:\n - can_write_asset_subtitles"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/SubtitleSchema"
        x-exportParamName: "Body"
      responses:
        "201":
          description: "Returns a format that was created for this asset"
          schema:
            $ref: "#/definitions/SubtitleSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
  /v1/assets/{asset_id}/subtitles/{language}/:
    get:
      summary: "Get asset's subtitle for a language"
      description: "\nRequired roles:\n - can_read_asset_subtitles"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "language"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Language"
      responses:
        "200":
          description: "Returns a format associated with this asset"
          schema:
            $ref: "#/definitions/SubtitleSchema"
        "401":
          description: "Token is invalid"
        "404":
          description: "Subtitle for this asset doesn't exist"
  /v1/assets/{asset_id}/subtitles/{language}/cc/:
    get:
      summary: "Get asset's subtitle for a language"
      description: "\nRequired roles:\n - can_read_asset_subtitles"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "language"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Language"
      responses:
        "200":
          description: "Returns a subtitle associated with this asset"
          schema:
            $ref: "#/definitions/SubtitleSchema"
        "401":
          description: "Token is invalid"
        "404":
          description: "Subtitle for this asset doesn't exist"
  /v1/assets/{asset_id}/subtitles/{language}/cc/webvtt/:
    get:
      summary: "Get asset's subtitle for a language"
      description: "\nRequired roles:\n - can_read_asset_subtitles"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "language"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Language"
      responses:
        "200":
          description: "Returns a format associated with this asset"
          schema:
            $ref: "#/definitions/SubtitleSchema"
        "401":
          description: "Token is invalid"
        "404":
          description: "Subtitle for this asset doesn't exist"
  /v1/assets/{asset_id}/subtitles/{language}/webvtt/:
    get:
      summary: "Get asset's subtitle for a language"
      description: "\nRequired roles:\n - can_read_asset_subtitles"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "language"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Language"
      responses:
        "200":
          description: "Returns a format associated with this asset"
          schema:
            $ref: "#/definitions/SubtitleSchema"
        "401":
          description: "Token is invalid"
        "404":
          description: "Subtitle for this asset doesn't exist"
  /v1/assets/{asset_id}/subtitles/{subtitle_id}/:
    get:
      summary: "Get asset's subtitle for a language"
      description: "\nRequired roles:\n - can_read_asset_subtitles"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "subtitle_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "SubtitleId"
      responses:
        "200":
          description: "Returns a subtitle associated with this asset"
          schema:
            $ref: "#/definitions/SubtitleSchema"
        "401":
          description: "Token is invalid"
        "404":
          description: "Subtitle for this asset doesn't exist"
    put:
      summary: "Update subtitle information"
      description: "\nRequired roles:\n - can_write_asset_subtitles"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "subtitle_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "SubtitleId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/SubtitleSchema"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Returns a subtitle that was updated"
          schema:
            $ref: "#/definitions/SubtitleSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Subtitle for this asset doesn't exist"
    delete:
      summary: "Delete asset's subtitle"
      description: "\nRequired roles:\n - can_delete_assets"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "subtitle_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "SubtitleId"
      responses:
        "204":
          description: "Without body"
        "401":
          description: "Token is invalid"
        "404":
          description: "Subtitle for this asset doesn't exist"
    patch:
      summary: "Update subtitle information"
      description: "\nRequired roles:\n - can_write_asset_subtitles"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "subtitle_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "SubtitleId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/SubtitleSchema"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Returns a subtitle that was updated"
          schema:
            $ref: "#/definitions/SubtitleSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Subtitle for this asset doesn't exist"
  /v1/assets/{asset_id}/subtitles/{subtitle_id}/cc/:
    delete:
      summary: "Delete asset's subtitle"
      description: "\nRequired roles:\n - can_delete_assets"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "subtitle_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "SubtitleId"
      responses:
        "204":
          description: "Without body"
        "401":
          description: "Token is invalid"
        "404":
          description: "Subtitle for this asset doesn't exist"
  /v1/assets/{asset_id}/temporary_file_sets/:
    post:
      summary: "Create temporary file set and associate to asset"
      description: "\nRequired roles:\n - can_write_files"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/TemporaryFileSetSchema"
        x-exportParamName: "Body"
      responses:
        "201":
          description: "Returns a file set that was created for this asset"
          schema:
            $ref: "#/definitions/TemporaryFileSetSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
  /v1/assets/{asset_id}/temporary_file_sets/{file_set_id}/:
    delete:
      summary: "Delete temporary file set with files"
      description: "\nRequired roles:\n - can_delete_files"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "file_set_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "FileSetId"
      - name: "delete_cloud_objects"
        in: "query"
        required: false
        type: "boolean"
        default: true
        x-exportParamName: "DeleteCloudObjects"
        x-optionalDataType: "Bool"
      responses:
        "204":
          description: "Without body"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "File set for this asset doesn't exist"
  /v1/assets/{asset_id}/temporary_file_sets/{file_set_id}/files/:
    get:
      summary: "Get files from a temporary file set"
      description: "\nRequired roles:\n - can_read_files"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "file_set_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "FileSetId"
      - name: "generate_signed_url"
        in: "query"
        description: "Set to false if you don't need a URL, will speed things up"
        required: false
        type: "boolean"
        default: true
        x-exportParamName: "GenerateSignedUrl"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "Returns files from a file set"
          schema:
            $ref: "#/definitions/FilesSchema"
  /v1/assets/{asset_id}/temporary_files/:
    post:
      summary: "Create temporary transfer file for FILE storage transfers"
      description: "\nRequired roles:\n - can_write_files"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "store"
        in: "query"
        required: false
        type: "boolean"
        x-exportParamName: "Store"
        x-optionalDataType: "Bool"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/FileCreateSchema"
        x-exportParamName: "Body"
      responses:
        "201":
          description: "Returns a file that was created for this asset"
          schema:
            $ref: "#/definitions/TemporaryFileCreateSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
  /v1/assets/{asset_id}/temporary_files/{file_id}/:
    put:
      summary: "Update temporary file's info"
      description: "\nRequired roles:\n - can_write_files"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "file_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "FileId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/FileSchema"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Returns updated file"
          schema:
            $ref: "#/definitions/FileSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "403":
          description: "Asset access denied"
        "404":
          description: "No file found"
    patch:
      summary: "Update temporary file's info"
      description: "\nRequired roles:\n - can_write_files"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "file_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "FileId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/FileSchema"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Returns updated file"
          schema:
            $ref: "#/definitions/FileSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "403":
          description: "Asset access denied"
        "404":
          description: "No file found"
  /v1/assets/{asset_id}/versions/all/file_sets/:
    delete:
      summary: "Delete asset's file sets"
      description: "\nRequired roles:\n - can_delete_files"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "per_page"
        in: "query"
        description: "The number of items for each page"
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "PerPage"
        x-optionalDataType: "Int32"
      - name: "last_id"
        in: "query"
        description: "ID of a last file set on previous page"
        required: false
        type: "string"
        x-exportParamName: "LastId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "File sets were scheduled for deletion"
        "401":
          description: "Token is invalid"
        "404":
          description: "FileSets for this asset don't exist"
  /v1/assets/{asset_id}/versions/all/files/:
    delete:
      summary: "Delete asset's files entries by version (Not the actual file, use\
        \ DELETE file_set for that)"
      description: "\nRequired roles:\n - can_delete_files"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      responses:
        "204":
          description: "Without body"
        "401":
          description: "Token is invalid"
        "404":
          description: "File for this asset doesn't exist"
  /v1/assets/{asset_id}/versions/all/formats/:
    delete:
      summary: "Delete asset's formats all versions"
      description: "\nRequired roles:\n - can_delete_formats"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "format_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "FormatId"
      responses:
        "200":
          description: "Formats were scheduled for deletion"
        "204":
          description: "Without body in case `immediately` option was provided"
        "401":
          description: "Token is invalid"
        "404":
          description: "Format for this asset doesn't exist"
  /v1/assets/{asset_id}/versions/all/keyframes/:
    delete:
      summary: "Delete asset's keyframes all versions"
      description: "\nRequired roles:\n - can_write_keyframes"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      responses:
        "204":
          description: "Without body"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Keyframe for this asset don't exist"
  /v1/assets/{asset_id}/versions/all/proxies/:
    delete:
      summary: "Delete asset's proxies all versions"
      description: "\nRequired roles:\n - can_delete_proxies"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      responses:
        "204":
          description: "Without body"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Proxy for this asset doesn't exist"
  /v1/assets/{asset_id}/versions/all/subtitles/:
    delete:
      summary: "Delete asset's subtitles all versions"
      description: "\nRequired roles:\n - can_delete_assets"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      responses:
        "204":
          description: "Without body"
        "401":
          description: "Token is invalid"
        "404":
          description: "Subtitle for this asset doesn't exist"
  /v1/assets/{asset_id}/versions/{version_id}/file_sets/:
    get:
      summary: "Get all asset's file sets by version"
      description: "\nRequired roles:\n - can_read_files"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "version_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "VersionId"
      - name: "per_page"
        in: "query"
        description: "The number of items for each page"
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "PerPage"
        x-optionalDataType: "Int32"
      - name: "last_id"
        in: "query"
        description: "ID of a last file set on previous page"
        required: false
        type: "string"
        x-exportParamName: "LastId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Returns all file sets associated with this asset"
          schema:
            $ref: "#/definitions/FileSetsSchema"
        "401":
          description: "Token is invalid"
        "404":
          description: "FileSets for this asset don't exist"
    delete:
      summary: "Delete asset's file sets by version"
      description: "\nRequired roles:\n - can_delete_files"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "version_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "VersionId"
      - name: "per_page"
        in: "query"
        description: "The number of items for each page"
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "PerPage"
        x-optionalDataType: "Int32"
      - name: "last_id"
        in: "query"
        description: "ID of a last file set on previous page"
        required: false
        type: "string"
        x-exportParamName: "LastId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "File sets were scheduled for deletion"
        "401":
          description: "Token is invalid"
        "404":
          description: "FileSets for this asset don't exist"
  /v1/assets/{asset_id}/versions/{version_id}/files/:
    get:
      summary: "Get all asset's files by version"
      description: "\nRequired roles:\n - can_read_files"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "version_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "VersionId"
      - name: "per_page"
        in: "query"
        description: "The number of items for each page"
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "PerPage"
        x-optionalDataType: "Int32"
      - name: "generate_signed_url"
        in: "query"
        description: "Set to False if you do not need a URL, will slow things down\
          \ otherwise"
        required: false
        type: "boolean"
        default: true
        x-exportParamName: "GenerateSignedUrl"
        x-optionalDataType: "Bool"
      - name: "content_disposition"
        in: "query"
        description: "Set to attachment if you want a download link. Note that this\
          \ will not create a download in asset history"
        required: false
        type: "string"
        default: "inline"
        x-exportParamName: "ContentDisposition"
        x-optionalDataType: "String"
      - name: "last_id"
        in: "query"
        description: "ID of a last file on previous page"
        required: false
        type: "string"
        x-exportParamName: "LastId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Returns all files associated with this asset"
          schema:
            $ref: "#/definitions/FilesSchema"
        "401":
          description: "Token is invalid"
        "404":
          description: "Files for this asset don't exist"
    delete:
      summary: "Delete asset's files entries by version (Not the actual file, use\
        \ DELETE file_set for that)"
      description: "\nRequired roles:\n - can_delete_files"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "version_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "VersionId"
      responses:
        "204":
          description: "Without body"
        "401":
          description: "Token is invalid"
        "404":
          description: "File for this asset doesn't exist"
  /v1/assets/{asset_id}/versions/{version_id}/formats/:
    get:
      summary: "Get all asset's formats by version"
      description: "\nRequired roles:\n - can_read_formats"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "version_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "VersionId"
      - name: "per_page"
        in: "query"
        description: "The number of items for each page"
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "PerPage"
        x-optionalDataType: "Int32"
      - name: "last_id"
        in: "query"
        description: "ID of a last format on previous page"
        required: false
        type: "string"
        x-exportParamName: "LastId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Returns all formats associated with this asset"
          schema:
            $ref: "#/definitions/FormatsSchema"
        "401":
          description: "Token is invalid"
        "404":
          description: "Formats for this asset don't exist"
    delete:
      summary: "Delete asset's formats by version"
      description: "\nRequired roles:\n - can_delete_formats"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "version_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "VersionId"
      responses:
        "200":
          description: "Formats were scheduled for deletion"
        "204":
          description: "Without body in case `immediately` option was provided"
        "401":
          description: "Token is invalid"
        "404":
          description: "Format for this asset doesn't exist"
  /v1/assets/{asset_id}/versions/{version_id}/keyframes/:
    get:
      summary: "Get all asset's keyframes by version"
      description: "\nRequired roles:\n - can_read_assets"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "version_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "VersionId"
      - name: "per_page"
        in: "query"
        description: "The number of items for each page"
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "PerPage"
        x-optionalDataType: "Int32"
      - name: "generate_signed_url"
        in: "query"
        description: "Set to false if you don't need a URL, will speed things up"
        required: false
        type: "boolean"
        default: true
        x-exportParamName: "GenerateSignedUrl"
        x-optionalDataType: "Bool"
      - name: "content_disposition"
        in: "query"
        description: "Set to attachment if you do not want a download link"
        required: false
        type: "string"
        default: "inline"
        x-exportParamName: "ContentDisposition"
        x-optionalDataType: "String"
      - name: "last_id"
        in: "query"
        description: "ID of a last keyframe on previous page"
        required: false
        type: "string"
        x-exportParamName: "LastId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Returns all keyframes associated with this asset"
          schema:
            $ref: "#/definitions/KeyframesSchema"
        "401":
          description: "Token is invalid"
        "404":
          description: "Keyframes for this asset don't exist"
    delete:
      summary: "Delete asset's keyframes by version"
      description: "\nRequired roles:\n - can_write_keyframes"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "version_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "VersionId"
      - name: "keep_poster"
        in: "query"
        required: false
        type: "boolean"
        x-exportParamName: "KeepPoster"
        x-optionalDataType: "Bool"
      responses:
        "204":
          description: "Without body"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Keyframe for this asset don't exist"
  /v1/assets/{asset_id}/versions/{version_id}/proxies/:
    get:
      summary: "Get all asset's proxies by version"
      description: "\nRequired roles:\n - can_read_proxies"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "version_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "VersionId"
      - name: "per_page"
        in: "query"
        description: "The number of items for each page"
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "PerPage"
        x-optionalDataType: "Int32"
      - name: "generate_signed_url"
        in: "query"
        description: "Set to false if you don't need a URL, will speed things up"
        required: false
        type: "boolean"
        default: true
        x-exportParamName: "GenerateSignedUrl"
        x-optionalDataType: "Bool"
      - name: "content_disposition"
        in: "query"
        description: "Set to attachment if you want a download link"
        required: false
        type: "string"
        default: "inline"
        x-exportParamName: "ContentDisposition"
        x-optionalDataType: "String"
      - name: "last_id"
        in: "query"
        description: "ID of a last proxy on previous page"
        required: false
        type: "string"
        x-exportParamName: "LastId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Returns all proxies associated with this asset"
          schema:
            $ref: "#/definitions/ProxiesSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Proxies for this asset doesn't exist"
    delete:
      summary: "Delete asset's proxies by version"
      description: "\nRequired roles:\n - can_delete_proxies"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "version_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "VersionId"
      responses:
        "204":
          description: "Without body"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Proxy for this asset doesn't exist"
  /v1/assets/{asset_id}/versions/{version_id}/subtitles/:
    get:
      summary: "Get all asset's subtitles by version"
      description: "\nRequired roles:\n - can_read_asset_subtitles"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "version_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "VersionId"
      - name: "per_page"
        in: "query"
        description: "The number of items for each page"
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "PerPage"
        x-optionalDataType: "Int32"
      - name: "last_id"
        in: "query"
        description: "ID of a last subtitle on previous page"
        required: false
        type: "string"
        x-exportParamName: "LastId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Returns all subtitles associated with this asset"
          schema:
            $ref: "#/definitions/SubtitlesSchema"
        "401":
          description: "Token is invalid"
        "404":
          description: "Subtitles for this asset don't exist"
    delete:
      summary: "Delete asset's subtitles by version"
      description: "\nRequired roles:\n - can_delete_assets"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "version_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "VersionId"
      responses:
        "204":
          description: "Without body"
        "401":
          description: "Token is invalid"
        "404":
          description: "Subtitle for this asset doesn't exist"
  /v1/assets/{asset_id}/versions/{version_id}/subtitles/{language}/cc/webvtt/:
    get:
      summary: "Get asset's subtitle for a language"
      description: "\nRequired roles:\n - can_read_asset_subtitles"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "version_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "VersionId"
      - name: "language"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Language"
      responses:
        "200":
          description: "Returns a format associated with this asset"
          schema:
            $ref: "#/definitions/SubtitleSchema"
        "401":
          description: "Token is invalid"
        "404":
          description: "Subtitle for this asset doesn't exist"
  /v1/assets/{asset_id}/versions/{version_id}/subtitles/{language}/webvtt/:
    get:
      summary: "Get asset's subtitle for a language"
      description: "\nRequired roles:\n - can_read_asset_subtitles"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "version_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "VersionId"
      - name: "language"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Language"
      responses:
        "200":
          description: "Returns a format associated with this asset"
          schema:
            $ref: "#/definitions/SubtitleSchema"
        "401":
          description: "Token is invalid"
        "404":
          description: "Subtitle for this asset doesn't exist"
  /v1/assets/{asset_id}/{resource}/move/: {}
  /v1/collections/{collection_id}/custom_keyframe/{poster_id}/:
    post:
      summary: "Set keyframe of type poster as collection keyframe"
      description: "\nRequired roles:\n - can_write_keyframes"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "collection_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "CollectionId"
      - name: "poster_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "PosterId"
      - name: "overwrite"
        in: "query"
        description: "set to false to keep current custom_poster and custom_keyframe\
          \ on asset"
        required: false
        type: "boolean"
        x-exportParamName: "Overwrite"
        x-optionalDataType: "Bool"
      responses:
        "201":
          description: "Returns custom keyframe"
          schema:
            $ref: "#/definitions/CollectionKeyframeSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
  /v1/collections/{collection_id}/export_locations/{export_location_id}/:
    post:
      summary: "Export collection assets to export location"
      description: "\nRequired roles:\n - can_write_exports"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "collection_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "CollectionId"
      - name: "export_location_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ExportLocationId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/CollectionExportSchema"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Returns an export job id"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
  /v1/collections/{collection_id}/keyframes/:
    get:
      summary: "Get all collection's keyframes"
      description: "\nRequired roles:\n - can_read_collections"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "collection_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "CollectionId"
      - name: "per_page"
        in: "query"
        description: "The number of items for each page"
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "PerPage"
        x-optionalDataType: "Int32"
      - name: "generate_signed_url"
        in: "query"
        description: "Set to false if you don't need a URL, will speed things up"
        required: false
        type: "boolean"
        default: true
        x-exportParamName: "GenerateSignedUrl"
        x-optionalDataType: "Bool"
      - name: "last_id"
        in: "query"
        description: "ID of a last collection keyframe on previous page"
        required: false
        type: "string"
        x-exportParamName: "LastId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Returns all keyframes associated with this collection"
          schema:
            $ref: "#/definitions/CollectionKeyframesSchema"
        "401":
          description: "Token is invalid"
        "404":
          description: "Keyframes for this collection don't exist"
    post:
      summary: "Create keyframe and associate to collection"
      description: "\nRequired roles:\n - can_write_keyframes"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "collection_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "CollectionId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/CollectionKeyframeSchema"
        x-exportParamName: "Body"
      responses:
        "201":
          description: "Returns a keyframe that was created for this collection"
          schema:
            $ref: "#/definitions/CollectionKeyframeCreateSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
  /v1/collections/{collection_id}/keyframes/{keyframe_id}/:
    get:
      summary: "Get collection's proxy"
      description: "\nRequired roles:\n - can_read_collections"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "collection_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "CollectionId"
      - name: "keyframe_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "KeyframeId"
      responses:
        "200":
          description: "Returns a keyframe associated with this collection"
          schema:
            $ref: "#/definitions/CollectionKeyframeSchema"
        "401":
          description: "Token is invalid"
        "404":
          description: "Keyframe for this collection don't exist"
    put:
      summary: "Update keyframe information"
      description: "\nRequired roles:\n - can_write_keyframes"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "collection_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "CollectionId"
      - name: "keyframe_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "KeyframeId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/CollectionKeyframeSchema"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Returns a keyframe that was updated"
          schema:
            $ref: "#/definitions/CollectionKeyframeSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Keyframe for this collection don't exist"
    delete:
      summary: "Delete collection's keyframe"
      description: "\nRequired roles:\n - can_write_keyframes"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "collection_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "CollectionId"
      - name: "keyframe_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "KeyframeId"
      responses:
        "204":
          description: "Without body"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Keyframe for this collection don't exist"
    patch:
      summary: "Update keyframe information"
      description: "\nRequired roles:\n - can_write_keyframes"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "collection_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "CollectionId"
      - name: "keyframe_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "KeyframeId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/CollectionKeyframeSchema"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Returns a keyframe that was updated"
          schema:
            $ref: "#/definitions/CollectionKeyframeSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Keyframe for this collection don't exist"
  /v1/delete_queue/file_sets/:
    get:
      summary: "Get deleted file sets"
      description: "\nRequired roles:\n - can_read_files"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "per_page"
        in: "query"
        description: "The number of items for each page"
        required: false
        type: "integer"
        x-exportParamName: "PerPage"
        x-optionalDataType: "Int32"
      - name: "page"
        in: "query"
        description: "Which page number to fetch"
        required: false
        type: "integer"
        default: 1
        minimum: 1
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "sort"
        in: "query"
        description: "A comma separated list of fieldnames with order. For example\
          \ - first_name,asc;last_name,desc"
        required: false
        type: "string"
        x-exportParamName: "Sort"
        x-optionalDataType: "String"
      - name: "query"
        in: "query"
        description: "Search using query"
        required: false
        type: "string"
        x-exportParamName: "Query"
        x-optionalDataType: "String"
      - name: "field_name"
        in: "query"
        description: "filter by field_name"
        required: false
        type: "string"
        x-exportParamName: "FieldName"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Returns a list of file sets"
          schema:
            $ref: "#/definitions/FileSetsElasticSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Requested page does not exist"
    delete:
      summary: "Restore file sets from delete queue"
      description: "\nRequired roles:\n - can_write_files"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/DeleteQueueSchema"
        x-exportParamName: "Body"
      responses:
        "204":
          description: "Without body"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
  /v1/delete_queue/file_sets/purge/:
    post:
      summary: "Purge file sets from delete queue (Permanently delete)"
      description: "\nRequired roles:\n - can_purge_files"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/DeleteQueueSchema"
        x-exportParamName: "Body"
      responses:
        "204":
          description: "Without body"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
  /v1/delete_queue/file_sets/purge/all/:
    post:
      summary: "Purge all file sets from delete queue (Permanently delete)"
      description: "\nRequired roles:\n - can_purge_files"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      responses:
        "204":
          description: "Without body"
        "401":
          description: "Token is invalid"
        "403":
          description: "User does not have permission"
  /v1/delete_queue/formats/:
    get:
      summary: "Get deleted formats"
      description: "\nRequired roles:\n - can_read_formats"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "per_page"
        in: "query"
        description: "The number of items for each page"
        required: false
        type: "integer"
        x-exportParamName: "PerPage"
        x-optionalDataType: "Int32"
      - name: "page"
        in: "query"
        description: "Which page number to fetch"
        required: false
        type: "integer"
        default: 1
        minimum: 1
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "sort"
        in: "query"
        description: "A comma separated list of fieldnames with order. For example\
          \ - first_name,asc;last_name,desc"
        required: false
        type: "string"
        x-exportParamName: "Sort"
        x-optionalDataType: "String"
      - name: "query"
        in: "query"
        description: "Search using query"
        required: false
        type: "string"
        x-exportParamName: "Query"
        x-optionalDataType: "String"
      - name: "field_name"
        in: "query"
        description: "filter by field_name"
        required: false
        type: "string"
        x-exportParamName: "FieldName"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Returns a list of formats"
          schema:
            $ref: "#/definitions/FormatsElasticSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Requested page does not exist"
    delete:
      summary: "Restore formats from delete queue"
      description: "\nRequired roles:\n - can_write_formats"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/DeleteQueueSchema"
        x-exportParamName: "Body"
      responses:
        "204":
          description: "Without body"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
  /v1/delete_queue/formats/purge/:
    post:
      summary: "Purge formats from delete queue (Permanently delete)"
      description: "\nRequired roles:\n - can_purge_formats"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/DeleteQueueSchema"
        x-exportParamName: "Body"
      responses:
        "204":
          description: "Without body"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
  /v1/delete_queue/formats/purge/all/:
    post:
      summary: "Purge all formats from delete queue (Permanently delete)"
      description: "\nRequired roles:\n - can_purge_formats"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      responses:
        "204":
          description: "Without body"
        "401":
          description: "Token is invalid"
        "403":
          description: "User does not have permission"
  /v1/export_locations/:
    get:
      summary: "Get all export_locations"
      description: "\nRequired roles:\n - can_read_export_locations"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "query"
        in: "query"
        description: "Search query"
        required: false
        type: "string"
        x-exportParamName: "Query"
        x-optionalDataType: "String"
      - name: "ids"
        in: "query"
        description: "Filter list of id:s (comma separated)"
        required: false
        type: "string"
        x-exportParamName: "Ids"
        x-optionalDataType: "String"
      - name: "per_page"
        in: "query"
        description: "The number of items for each page"
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "PerPage"
        x-optionalDataType: "Int32"
      - name: "last_id"
        in: "query"
        description: "ID of a last export_location on previous page"
        required: false
        type: "string"
        x-exportParamName: "LastId"
        x-optionalDataType: "String"
      - name: "sort"
        in: "query"
        description: "A comma separated list of fieldnames with order. For example\
          \ - name,asc;id,desc"
        required: false
        type: "string"
        x-exportParamName: "Sort"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Returns a list of export_locations"
          schema:
            $ref: "#/definitions/ExportLocationsSchema"
        "401":
          description: "Token is invalid"
    post:
      summary: "Create a new export_location"
      description: "\nRequired roles:\n - can_write_export_locations"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/ExportLocationSchema"
        x-exportParamName: "Body"
      responses:
        "201":
          description: "Returns a created export_location entry"
          schema:
            $ref: "#/definitions/ExportLocationSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
  /v1/export_locations/jobs/priority/: {}
  /v1/export_locations/jobs/state/: {}
  /v1/export_locations/{export_location_id}/:
    get:
      summary: "Returns a particular export_location by id"
      description: "\nRequired roles:\n - can_read_export_locations"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "export_location_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ExportLocationId"
      responses:
        "200":
          description: "Returns a export_location"
          schema:
            $ref: "#/definitions/ExportLocationSchema"
        "401":
          description: "Token is invalid"
        "404":
          description: "ExportLocation doesn't exist"
    put:
      summary: "Update export_location"
      description: "\nRequired roles:\n - can_write_export_locations"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "export_location_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ExportLocationId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/ExportLocationSchema"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Returns an updated export_location"
          schema:
            $ref: "#/definitions/ExportLocationSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
    delete:
      summary: "Delete a particular export_location by id"
      description: "\nRequired roles:\n - can_delete_export_locations"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "export_location_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ExportLocationId"
      responses:
        "204":
          description: "Without body"
        "401":
          description: "Token is invalid"
        "404":
          description: "ExportLocation doesn't exist"
    patch:
      summary: "Update export_location"
      description: "\nRequired roles:\n - can_write_export_locations"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "export_location_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ExportLocationId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/ExportLocationSchema"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Returns an updated export_location"
          schema:
            $ref: "#/definitions/ExportLocationSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
  /v1/export_locations/{export_location_id}/bulk_export/:
    post:
      summary: "Export multiple objects to export location"
      description: "\nRequired roles:\n - can_write_exports"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "export_location_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ExportLocationId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/BulkFilesetExportSchema"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Returns an export job id"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
  /v1/export_locations/{export_location_id}/reindex/:
    post:
      summary: "Trigger reindexing of a export location"
      description: "\nRequired roles:\n - can_reindex_export_locations"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "export_location_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ExportLocationId"
      responses:
        "201":
          description: "ID and status of the job"
        "401":
          description: "Token is invalid"
  /v1/exports/queue_records/{queue_record_id}/reindex/: {}
  /v1/exports/temporary_file_sets/{file_set_id}/storages/{storage_id}/:
    post:
      summary: "Queue export job completion between local storages"
      description: "\nRequired roles:\n - can_read_files\n- can_write_transfers"
      parameters:
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "file_set_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "FileSetId"
      - name: "storage_id"
        in: "path"
        description: "Destination storage_id"
        required: true
        type: "string"
        x-exportParamName: "StorageId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/CompleteExportToLocalStorageSchema"
        x-exportParamName: "Body"
      responses:
        "202":
          description: "Export queued"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "403":
          description: "Permission on storage denied"
        "404":
          description: "File set or storage not found"
  /v1/file_sets/{file_set_id}/files/:
    get:
      summary: "Get files from a file set"
      description: "\nRequired roles:\n - can_read_files"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "file_set_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "FileSetId"
      - name: "generate_signed_url"
        in: "query"
        description: "Set to false if you don't need a URL, will speed things up"
        required: false
        type: "boolean"
        default: true
        x-exportParamName: "GenerateSignedUrl"
        x-optionalDataType: "Bool"
      deprecated: true
      responses:
        "200":
          description: "Returns files from a file set"
          schema:
            $ref: "#/definitions/FilesSchema"
  /v1/file_sets/{file_set_id}/storages/{storage_id}/:
    post:
      summary: "Queue copying of a file set with files from one storage to another"
      description: "\nRequired roles:\n - can_read_files\n- can_write_transfers"
      parameters:
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "file_set_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "FileSetId"
      - name: "storage_id"
        in: "path"
        description: "Destination storage_id"
        required: true
        type: "string"
        x-exportParamName: "StorageId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/TransferFromStorageSchema"
        x-exportParamName: "Body"
      responses:
        "202":
          description: "Copy job created"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "403":
          description: "Permission on storage denied"
        "404":
          description: "File set or storage not found"
        "409":
          description: "File set with same components already exists on storage."
  /v1/file_sets/{file_set_id}/transfers_from/{storage_id}/:
    delete:
      summary: "Delete file set transfer after handling it"
      description: "\nRequired roles:\n - can_write_transfers"
      parameters:
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "file_set_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "FileSetId"
      - name: "storage_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "StorageId"
      - name: "failed"
        in: "query"
        required: false
        type: "boolean"
        x-exportParamName: "Failed"
        x-optionalDataType: "Bool"
      deprecated: true
      responses:
        "204":
          description: "Transfer job was deleted"
        "404":
          description: "Transfer job does not exist"
  /v1/file_sets/{file_set_id}/transfers_to/{storage_id}/:
    delete:
      summary: "Delete file set transfer after handling it"
      description: "\nRequired roles:\n - can_write_transfers"
      parameters:
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "file_set_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "FileSetId"
      - name: "storage_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "StorageId"
      - name: "failed"
        in: "query"
        required: false
        type: "boolean"
        x-exportParamName: "Failed"
        x-optionalDataType: "Bool"
      deprecated: true
      responses:
        "204":
          description: "Transfer job was deleted"
        "404":
          description: "Transfer job does not exist"
  /v1/files/checksum/{checksum}/:
    get:
      summary: "Get files by checksum"
      description: "\nRequired roles:\n - can_read_files"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "checksum"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Checksum"
      - name: "per_page"
        in: "query"
        description: "The number of items for each page"
        required: false
        type: "integer"
        x-exportParamName: "PerPage"
        x-optionalDataType: "Int32"
      - name: "last_id"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "LastId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Returns all files that has specified checksum"
          schema:
            $ref: "#/definitions/FilesSchema"
        "401":
          description: "Token is invalid"
        "404":
          description: "Files with this checksum don't exist"
  /v1/files/missing/storages/{storage_id}/:
    delete:
      summary: "Delete all missing files from storage"
      description: "\nRequired roles:\n - can_delete_files"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "storage_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "StorageId"
      - name: "remove_assets"
        in: "query"
        required: false
        type: "boolean"
        x-exportParamName: "RemoveAssets"
        x-optionalDataType: "Bool"
      responses:
        "202":
          description: "Files cleanup scheduled"
        "401":
          description: "Token is invalid"
        "403":
          description: "Permission denied"
  /v1/files/storages/{storage_id}/:
    post:
      summary: "Check file is on storage"
      description: "\nRequired roles:\n - can_read_files"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "storage_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "StorageId"
      - name: "get_file_size"
        in: "query"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "GetFileSize"
        x-optionalDataType: "Bool"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/FileExistenceCheckSchema"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "File exists"
        "401":
          description: "Token is invalid"
        "404":
          description: "File doesn't exist"
  /v1/files/{file_id}/deletions_from/{storage_id}/:
    delete:
      summary: "Delete file deletion job after handling it"
      description: "\nRequired roles:\n - is_storage_worker"
      parameters:
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "file_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "FileId"
      - name: "storage_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "StorageId"
      deprecated: true
      responses:
        "204":
          description: "Deletion job was deleted"
        "404":
          description: "Deletion job does not exist"
  /v1/formats/{format_id}/storages/{storage_id}/:
    post:
      summary: "Queue copying of a formats file sets with files from one storage to\
        \ another"
      description: "\nRequired roles:\n - can_read_formats\n- can_write_transfers"
      parameters:
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "format_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "FormatId"
      - name: "storage_id"
        in: "path"
        description: "Destination storage_id"
        required: true
        type: "string"
        x-exportParamName: "StorageId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/TransferFromStorageSchema"
        x-exportParamName: "Body"
      responses:
        "202":
          description: "Copy job created"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "403":
          description: "Permission on storage denied"
        "404":
          description: "File set or storage not found"
        "409":
          description: "File set with same components already exists on storage."
  /v1/formats/{format_name}/archive/bulk/:
    post:
      summary: "Queue bulk archiving of assets, collections and saved_searches"
      description: "\nRequired roles:\n - can_archive_formats"
      parameters:
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "format_name"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "FormatName"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/BulkFilesetArchiveSchema"
        x-exportParamName: "Body"
      responses:
        "202":
          description: "Archive job created"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Storage not found"
  /v1/formats/{format_name}/restore/bulk/:
    post:
      summary: "Queue bulk restore of previously archived assets, collections or saved_searches"
      description: "\nRequired roles:\n - can_restore_archived_formats"
      parameters:
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "format_name"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "FormatName"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/BulkFilesetRestoreSchema"
        x-exportParamName: "Body"
      responses:
        "202":
          description: "Restore job created"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Storage not found"
  /v1/shares/storages/{storage_id}/files/:
    get:
      summary: "Check if a specific file is already on the storage for shares"
      description: "\nRequired roles:\n - can_write_files"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "storage_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "StorageId"
      - name: "directory_path"
        in: "query"
        required: true
        type: "string"
        x-exportParamName: "DirectoryPath"
      - name: "name"
        in: "query"
        description: "Filter by name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      responses:
        "204":
          description: "File exists"
        "401":
          description: "Token is invalid"
        "404":
          description: "No files found"
  /v1/storages/:
    get:
      summary: "Get all storages"
      description: "\nRequired roles:\n - can_read_storages"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "page"
        in: "query"
        description: "Which page number to fetch"
        required: false
        type: "integer"
        default: 1
        minimum: 1
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "per_page"
        in: "query"
        description: "The number of items for each page"
        required: false
        type: "integer"
        default: 10
        maximum: 100
        minimum: 1
        x-exportParamName: "PerPage"
        x-optionalDataType: "Int32"
      - name: "sort"
        in: "query"
        description: "A comma separated list of fieldnames with order. For example\
          \ - status,asc;last_scanned,desc"
        required: false
        type: "string"
        x-exportParamName: "Sort"
        x-optionalDataType: "String"
      - name: "id"
        in: "query"
        description: "Filter by id"
        required: false
        type: "string"
        x-exportParamName: "Id"
        x-optionalDataType: "String"
      - name: "name"
        in: "query"
        description: "Filter by name"
        required: false
        type: "string"
        x-exportParamName: "Name"
        x-optionalDataType: "String"
      - name: "method"
        in: "query"
        description: "Filter by method"
        required: false
        type: "string"
        x-exportParamName: "Method"
        x-optionalDataType: "String"
      - name: "status"
        in: "query"
        description: "Filter by status"
        required: false
        type: "string"
        x-exportParamName: "Status"
        x-optionalDataType: "String"
      - name: "purpose"
        in: "query"
        description: "Filter by purpose"
        required: false
        type: "string"
        x-exportParamName: "Purpose"
        x-optionalDataType: "String"
      - name: "last_scanned"
        in: "query"
        description: "Filter by last_scanned"
        required: false
        type: "string"
        x-exportParamName: "LastScanned"
        x-optionalDataType: "String"
      - name: "scanner_status"
        in: "query"
        description: "Filter by scanner_status"
        required: false
        type: "string"
        x-exportParamName: "ScannerStatus"
        x-optionalDataType: "String"
      - name: "query"
        in: "query"
        description: "Filter by any of the above with wildcard support"
        required: false
        type: "string"
        x-exportParamName: "Query"
        x-optionalDataType: "String"
      - name: "ids"
        in: "query"
        description: "Filter list of id:s (comma separated)"
        required: false
        type: "string"
        x-exportParamName: "Ids"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Returns a list of storages"
          schema:
            $ref: "#/definitions/StoragesReadSchema"
        "401":
          description: "Token is invalid"
    post:
      summary: "Create a new storage"
      description: "\nRequired roles:\n - can_write_storages"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/StorageSchema"
        x-exportParamName: "Body"
      responses:
        "201":
          description: "Returns a created storage entry"
          schema:
            $ref: "#/definitions/StorageSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
  /v1/storages/files/reindex/:
    post:
      summary: "Trigger reindexing of all files"
      description: "\nRequired roles:\n - can_reindex_storages"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      responses:
        "201":
          description: "ID and status of the job"
        "401":
          description: "Token is invalid"
  /v1/storages/isg/latest_version/:
    get:
      summary: "Get latest ISG version"
      description: "\nRequired roles:\n - can_read_storages"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      responses:
        "200":
          description: "Returns version"
          schema:
            properties:
              version:
                type: "string"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Storage does not exist"
  /v1/storages/matching/{purpose}/:
    get:
      summary: "Returns a remote storage matching type"
      description: "\nRequired roles:\n - can_read_storages"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "purpose"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Purpose"
      - name: "storage_id"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "StorageId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Returns a storage"
          schema:
            $ref: "#/definitions/StorageSchema"
        "401":
          description: "Token is invalid"
        "404":
          description: "No matching storage exists"
  /v1/storages/matching/{purpose}/method/{method}/:
    get:
      summary: "Returns a remote storage matching type and method"
      description: "\nRequired roles:\n - can_read_storages"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "purpose"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Purpose"
      - name: "method"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Method"
      responses:
        "200":
          description: "Returns a storage"
          schema:
            $ref: "#/definitions/StorageSchema"
        "401":
          description: "Token is invalid"
        "404":
          description: "No matching storage exists"
  /v1/storages/reindex/:
    post:
      summary: "Trigger reindexing of all storages"
      description: "\nRequired roles:\n - can_reindex_storages"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      responses:
        "201":
          description: "ID and status of the job"
        "401":
          description: "Token is invalid"
  /v1/storages/{purpose}/default/:
    get:
      summary: "Get a purpose default storage"
      description: "\nRequired roles:\n - can_read_storages"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "purpose"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Purpose"
      responses:
        "200":
          description: "The default storage"
          schema:
            $ref: "#/definitions/StorageSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "403":
          description: "Permission denied"
        "404":
          description: "Storage does not exist"
  /v1/storages/{storage_id}/:
    get:
      summary: "Returns a particular storage by id"
      description: "\nRequired roles:\n - can_read_storages"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "storage_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "StorageId"
      responses:
        "200":
          description: "Returns a storage"
          schema:
            $ref: "#/definitions/StorageSchema"
        "401":
          description: "Token is invalid"
        "404":
          description: "Storage doesn't exist"
    put:
      summary: "Update storage"
      description: "\nRequired roles:\n - can_write_storages"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "storage_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "StorageId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/StorageSchema"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Returns an updated storage"
          schema:
            $ref: "#/definitions/StorageSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
    delete:
      summary: "Delete a particular storage by id"
      description: "\nRequired roles:\n - can_delete_storages"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "storage_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "StorageId"
      responses:
        "204":
          description: "Without body"
        "401":
          description: "Token is invalid"
        "404":
          description: "Storage doesn't exist"
    patch:
      summary: "Update storage"
      description: "\nRequired roles:\n - can_write_storages"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "storage_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "StorageId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/StorageSchema"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Returns an updated storage"
          schema:
            $ref: "#/definitions/StorageSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
  /v1/storages/{storage_id}/auto_scan/:
    get:
      summary: "Get cloud storage auto scan settings"
      description: "\nRequired roles:\n - can_scan_bucket"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "storage_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "StorageId"
      responses:
        "200":
          description: "Storage auto scan settings"
          schema:
            $ref: "#/definitions/StorageAutoScanSchema"
        "401":
          description: "Token is invalid"
        "404":
          description: "Storage auto scan is disabled"
    post:
      summary: "Enable cloud storage auto scan"
      description: "\nRequired roles:\n - can_scan_bucket"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "storage_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "StorageId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/StorageAutoScanSchema"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Storage auto scan enabled"
          schema:
            $ref: "#/definitions/StorageAutoScanSchema"
        "401":
          description: "Token is invalid"
        "404":
          description: "No matching storage exists"
    delete:
      summary: "Disable cloud storage auto scan"
      description: "\nRequired roles:\n - can_scan_bucket"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "storage_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "StorageId"
      responses:
        "204":
          description: "Storage auto scan disabled"
        "401":
          description: "Token is invalid"
        "404":
          description: "Storage auto scan already disabled"
  /v1/storages/{storage_id}/bulk/:
    post:
      summary: "Queue copying of files from current storage to specified one"
      description: "\nRequired roles:\n - can_read_files\n- can_write_transfers"
      parameters:
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "storage_id"
        in: "path"
        description: "Destination storage_id"
        required: true
        type: "string"
        x-exportParamName: "StorageId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/BulkTransferToStorageSchema"
        x-exportParamName: "Body"
      responses:
        "202":
          description: "Copy job created"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Storage not found"
  /v1/storages/{storage_id}/default/:
    post:
      summary: "Set a storage to the default of its purpose"
      description: "\nRequired roles:\n - can_write_storages"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "storage_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "StorageId"
      responses:
        "201":
          description: "Success"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
    delete:
      summary: "Removes the default flag on a storage"
      description: "\nRequired roles:\n - can_write_storages"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "storage_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "StorageId"
      responses:
        "204":
          description: "Success"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
  /v1/storages/{storage_id}/deletions/:
    get:
      summary: "Get pending deletions of files from a local storage"
      description: "\nRequired roles:\n - is_storage_worker"
      parameters:
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "storage_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "StorageId"
      - name: "per_page"
        in: "query"
        description: "The number of items for each page"
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "PerPage"
        x-optionalDataType: "Int32"
      - name: "last_id"
        in: "query"
        description: "ID of a last file deletion entity on previous page"
        required: false
        type: "string"
        x-exportParamName: "LastId"
        x-optionalDataType: "String"
      deprecated: true
      responses:
        "200":
          description: "Returns pending deletions to be handled"
          schema:
            $ref: "#/definitions/FileDeletionsSchema"
  /v1/storages/{storage_id}/deletions/{deletion_id}/:
    delete:
      summary: "Delete file deletion job after handling it"
      description: "\nRequired roles:\n - is_storage_worker"
      parameters:
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "storage_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "StorageId"
      - name: "deletion_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "DeletionId"
      deprecated: true
      responses:
        "204":
          description: "Deletion job was deleted"
        "404":
          description: "Deletion job does not exist"
  /v1/storages/{storage_id}/deletions_from/:
    get:
      summary: "Get pending deletions of files from a local storage"
      description: "\nRequired roles:\n - is_storage_worker"
      parameters:
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "storage_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "StorageId"
      - name: "per_page"
        in: "query"
        description: "The number of items for each page"
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "PerPage"
        x-optionalDataType: "Int32"
      - name: "last_id"
        in: "query"
        description: "ID of a last file deletion entity on previous page"
        required: false
        type: "string"
        x-exportParamName: "LastId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Returns pending deletions to be handled"
          schema:
            $ref: "#/definitions/FileDeletionsSchema"
  /v1/storages/{storage_id}/files/:
    get:
      summary: "Get files in a storage folder, or all files on a storage"
      description: "\nRequired roles:\n - can_read_storages"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "storage_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "StorageId"
      - name: "path"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Path"
        x-optionalDataType: "String"
      - name: "path_separator"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "PathSeparator"
        x-optionalDataType: "String"
      - name: "directory_path"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "DirectoryPath"
        x-optionalDataType: "String"
      - name: "checksum"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Checksum"
        x-optionalDataType: "String"
      - name: "per_page"
        in: "query"
        description: "The number of items for each page"
        required: false
        type: "integer"
        default: 10
        maximum: 100
        minimum: 1
        x-exportParamName: "PerPage"
        x-optionalDataType: "Int32"
      - name: "page"
        in: "query"
        description: "Which page number to fetch"
        required: false
        type: "integer"
        default: 1
        minimum: 1
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "sort"
        in: "query"
        description: "A comma separated list of fieldnames with order. For example\
          \ - first_name,asc;last_name,desc"
        required: false
        type: "string"
        x-exportParamName: "Sort"
        x-optionalDataType: "String"
      - name: "id"
        in: "query"
        description: "Filter by id"
        required: false
        type: "string"
        x-exportParamName: "Id"
        x-optionalDataType: "String"
      - name: "name"
        in: "query"
        description: "Filter by name"
        required: false
        type: "string"
        x-exportParamName: "Name"
        x-optionalDataType: "String"
      - name: "type"
        in: "query"
        description: "Filter by type"
        required: false
        type: "string"
        x-exportParamName: "Type_"
        x-optionalDataType: "String"
      - name: "status"
        in: "query"
        description: "Filter by status"
        required: false
        type: "string"
        x-exportParamName: "Status"
        x-optionalDataType: "String"
      - name: "date_created"
        in: "query"
        description: "Filter by date_created"
        required: false
        type: "string"
        x-exportParamName: "DateCreated"
        x-optionalDataType: "String"
      - name: "date_modified"
        in: "query"
        description: "Filter by date_modified"
        required: false
        type: "string"
        x-exportParamName: "DateModified"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Returns files"
          schema:
            $ref: "#/definitions/FilesElasticSchema"
        "401":
          description: "Token is invalid"
        "404":
          description: "No files found"
    post:
      summary: "Create file without associating it to an asset"
      description: ""
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "storage_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "StorageId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/FileBaseSchema"
        x-exportParamName: "Body"
      responses:
        "201":
          description: "Returns a file that was created"
          schema:
            $ref: "#/definitions/FileBaseSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
    put:
      summary: "Update file by storage ID and path"
      description: "\nRequired roles:\n - can_write_files"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "storage_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "StorageId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/FileBaseSchema"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Returns updated file"
          schema:
            $ref: "#/definitions/FileBaseSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "403":
          description: "Asset access denied"
        "404":
          description: "No file found"
    patch:
      summary: "Update file by storage ID and path"
      description: "\nRequired roles:\n - can_write_files"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "storage_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "StorageId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/FileBaseSchema"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Returns updated file"
          schema:
            $ref: "#/definitions/FileBaseSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "403":
          description: "Asset access denied"
        "404":
          description: "No file found"
  /v1/storages/{storage_id}/files/reindex/:
    post:
      summary: "Trigger reindexing of all files"
      description: "\nRequired roles:\n - can_reindex_storages"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "storage_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "StorageId"
      responses:
        "201":
          description: "ID and status of the job"
        "401":
          description: "Token is invalid"
  /v1/storages/{storage_id}/files/{file_id}/reindex/:
    post:
      summary: "Trigger reindexing for a file on a storage"
      description: "\nRequired roles:\n - can_reindex_storages"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "storage_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "StorageId"
      - name: "file_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "FileId"
      responses:
        "201":
          description: "ID and status of the job"
        "401":
          description: "Token is invalid"
  /v1/storages/{storage_id}/gateway/events/:
    get:
      summary: "Get pending storage gateway events"
      description: ""
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "storage_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "StorageId"
      - name: "last_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "LastId"
      responses:
        "201":
          description: "Returns a gateway storage events"
          schema:
            $ref: "#/definitions/IconikStorageGatewayEventsSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "No matching storage exists"
    post:
      summary: "Create new storage gateway event"
      description: ""
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "storage_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "StorageId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/IconikStorageGatewayEventSchema"
        x-exportParamName: "Body"
      responses:
        "201":
          description: "Returns a created gateway storage event"
          schema:
            $ref: "#/definitions/IconikStorageGatewayEventSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "No matching storage exists"
  /v1/storages/{storage_id}/gateway/events/purge/:
    post:
      summary: "Delete storage gateway events in bulk"
      description: ""
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "storage_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "StorageId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/IconikStorageGatewayEventsPurgeSchema"
        x-exportParamName: "Body"
      responses:
        "204":
          description: "Success"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
  /v1/storages/{storage_id}/gateway/events/{event_id}/:
    delete:
      summary: "Delete storage gateway event"
      description: ""
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "storage_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "StorageId"
      - name: "event_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "EventId"
      responses:
        "204":
          description: "Success"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
  /v1/storages/{storage_id}/gateway/report/:
    get:
      summary: "Get storage gateway report"
      description: ""
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "storage_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "StorageId"
      responses:
        "200":
          description: "Returns storage gateway report"
          schema:
            $ref: "#/definitions/GatewayReportSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "No matching storage exists"
    put:
      summary: "Create storage gateway report"
      description: "\nRequired roles:\n - is_storage_worker"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "storage_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "StorageId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/GatewayReportSchema"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Returns empty dict"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "No matching storage exists"
  /v1/storages/{storage_id}/gateway/status/:
    put:
      summary: "Update storage gateway status"
      description: "\nRequired roles:\n - is_storage_worker"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "storage_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "StorageId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/GatewayStatusSchema"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Returns empty dict"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "No matching storage exists"
  /v1/storages/{storage_id}/logs/:
    post:
      summary: "Upload storage logs"
      description: "\nRequired roles:\n - is_storage_worker"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "storage_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "StorageId"
      - name: "filename"
        in: "query"
        required: true
        type: "string"
        x-exportParamName: "Filename"
      responses:
        "200":
          description: "Returns upload_url and path for storage logs"
          schema:
            properties:
              path:
                type: "string"
              upload_url:
                type: "string"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Storage does not exist"
  /v1/storages/{storage_id}/reindex/:
    post:
      summary: "Trigger reindexing of a storage"
      description: "\nRequired roles:\n - can_reindex_storages"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "storage_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "StorageId"
      responses:
        "201":
          description: "ID and status of the job"
        "401":
          description: "Token is invalid"
  /v1/storages/{storage_id}/scan/:
    post:
      summary: "Requests to scan a storage"
      description: "\nRequired roles:\n - can_scan_bucket"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "storage_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "StorageId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/StorageScanSchema"
        x-exportParamName: "Body"
      responses:
        "201":
          description: "Scan started"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
  /v1/storages/{storage_id}/search_document/:
    put:
      summary: "Update search document for storage"
      description: "\nRequired roles:\n - can_reindex_storages"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "storage_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "StorageId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/StorageSchema"
        x-exportParamName: "Body"
      responses:
        "204":
          description: "Storage document updated"
        "400":
          description: "No document supplied"
        "401":
          description: "Token is invalid"
        "404":
          description: "Storage does not exist in search index"
  /v1/storages/{storage_id}/temporary_files/:
    get:
      summary: "Get storage's exported files"
      description: "\nRequired roles:\n - can_read_storages"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "storage_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "StorageId"
      - name: "per_page"
        in: "query"
        description: "The number of items for each page"
        required: false
        type: "integer"
        default: 100
        x-exportParamName: "PerPage"
        x-optionalDataType: "Int32"
      - name: "last_id"
        in: "query"
        description: "ID of a last file on previous page"
        required: false
        type: "string"
        x-exportParamName: "LastId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Returns exported files"
          schema:
            $ref: "#/definitions/FilesSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Requested page does not exist"
  /v1/storages/{storage_id}/transcoders/:
    get:
      summary: "Get all transcoders for a particular storage"
      description: "\nRequired roles:\n - can_read_storages\n- can_read_transcoders"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "storage_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "StorageId"
      - name: "per_page"
        in: "query"
        description: "The number of items for each page"
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "PerPage"
        x-optionalDataType: "Int32"
      - name: "last_id"
        in: "query"
        description: "ID of a last transcoder on previous page"
        required: false
        type: "string"
        x-exportParamName: "LastId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Returns a list of transcoders"
          schema:
            $ref: "#/definitions/TranscodersByStorageSchema"
        "401":
          description: "Token is invalid"
  /v1/storages/{storage_id}/transcoders/{transcoder_id}/:
    put:
      summary: "Create a new transcoder for storage"
      description: "\nRequired roles:\n - can_write_transcoders"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "storage_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "StorageId"
      - name: "transcoder_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "TranscoderId"
      responses:
        "201":
          description: "Returns a created transcoder entry"
          schema:
            $ref: "#/definitions/TranscoderByStorageReadSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Storage or transcoder does not exists"
    delete:
      summary: "Delete a transcoder from storage"
      description: "\nRequired roles:\n - can_write_transcoders"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "storage_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "StorageId"
      - name: "transcoder_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "TranscoderId"
      responses:
        "204":
          description: "Returns a created transcoder entry"
        "401":
          description: "Token is invalid"
        "404":
          description: "Storage or transcoder does not exists"
  /v1/storages/{storage_id}/transfers_from/:
    get:
      summary: "Get pending transfers of file sets from a local storage"
      description: "\nRequired roles:\n - can_read_transfers"
      parameters:
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "storage_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "StorageId"
      - name: "per_page"
        in: "query"
        description: "The number of items for each page"
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "PerPage"
        x-optionalDataType: "Int32"
      - name: "last_id"
        in: "query"
        description: "ID of a last transfer on previous page"
        required: false
        type: "string"
        x-exportParamName: "LastId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Returns pending transfers to be handled"
          schema:
            $ref: "#/definitions/TransfersFromStorageSchema"
  /v1/storages/{storage_id}/transfers_from/{transfer_id}/:
    get:
      summary: "Get file set transfer record"
      description: "\nRequired roles:\n - can_read_transfers"
      parameters:
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "file_set_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "FileSetId"
      - name: "storage_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "StorageId"
      - name: "transfer_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "TransferId"
      responses:
        "200":
          description: "Returns a file set transfer from local storage"
          schema:
            $ref: "#/definitions/TransferFromStorageReadSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Transfer does not exist"
    delete:
      summary: "Delete file set transfer after handling it"
      description: "\nRequired roles:\n - can_write_transfers"
      parameters:
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "file_set_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "FileSetId"
      - name: "storage_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "StorageId"
      - name: "transfer_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "TransferId"
      - name: "failed"
        in: "query"
        required: false
        type: "boolean"
        x-exportParamName: "Failed"
        x-optionalDataType: "Bool"
      - name: "completed"
        in: "query"
        required: false
        type: "boolean"
        x-exportParamName: "Completed"
        x-optionalDataType: "Bool"
      responses:
        "204":
          description: "Transfer job was deleted"
        "404":
          description: "Transfer job does not exist"
  /v1/storages/{storage_id}/transfers_to/:
    get:
      summary: "Get pending transfers of file sets to a local storage"
      description: "\nRequired roles:\n - can_read_transfers"
      parameters:
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "storage_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "StorageId"
      - name: "per_page"
        in: "query"
        description: "The number of items for each page"
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "PerPage"
        x-optionalDataType: "Int32"
      - name: "last_id"
        in: "query"
        description: "ID of a last transfer on previous page"
        required: false
        type: "string"
        x-exportParamName: "LastId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Returns pending transfers to be handled"
          schema:
            $ref: "#/definitions/TransfersToStorageSchema"
  /v1/storages/{storage_id}/transfers_to/{transfer_id}/:
    get:
      summary: "Get file set transfer record"
      description: "\nRequired roles:\n - can_read_transfers"
      parameters:
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "file_set_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "FileSetId"
      - name: "storage_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "StorageId"
      - name: "transfer_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "TransferId"
      responses:
        "200":
          description: "Returns a file set transfer to local storage"
          schema:
            $ref: "#/definitions/TransferToStorageReadSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Transfer does not exist"
    delete:
      summary: "Delete file set transfer after handling it"
      description: "\nRequired roles:\n - can_write_transfers"
      parameters:
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "file_set_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "FileSetId"
      - name: "storage_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "StorageId"
      - name: "transfer_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "TransferId"
      - name: "failed"
        in: "query"
        required: false
        type: "boolean"
        x-exportParamName: "Failed"
        x-optionalDataType: "Bool"
      - name: "completed"
        in: "query"
        required: false
        type: "boolean"
        x-exportParamName: "Completed"
        x-optionalDataType: "Bool"
      responses:
        "204":
          description: "Transfer job was deleted"
        "404":
          description: "Transfer job does not exist"
  /v1/storages/{storage_id}/verifications/access/:
    get:
      summary: "Verify storage access"
      description: "\nRequired roles:\n - can_read_storages"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "storage_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "StorageId"
      responses:
        "200":
          description: "Returns a document describing storage access"
          schema:
            $ref: "#/definitions/inline_response_200"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Storage does not exist"
  /v1/storages/{storage_id}/verifications/permissions/:
    get:
      summary: "Verify storage permissions"
      description: "\nRequired roles:\n - can_read_storages"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "storage_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "StorageId"
      responses:
        "200":
          description: "Returns a document describing storage permissions"
          schema:
            properties:
              cors:
                type: "boolean"
              cors_error:
                type: "string"
              delete_access:
                type: "boolean"
              delete_access_error:
                type: "string"
              error_message:
                type: "string"
              read_access:
                type: "boolean"
              read_access_error:
                type: "string"
              write_access:
                type: "boolean"
              write_access_error:
                type: "string"
            example:
              cors: true
              delete_access: true
              read_access: true
              write_access: false
              write_access_error: "ERROR: no access"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Storage does not exist"
  /v1/transcode/jobs/state/: {}
  /v1/transcoders/:
    get:
      summary: "Get all transcoders"
      description: "\nRequired roles:\n - can_read_transcoders"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "per_page"
        in: "query"
        description: "The number of items for each page"
        required: false
        type: "integer"
        x-exportParamName: "PerPage"
        x-optionalDataType: "Int32"
      - name: "page"
        in: "query"
        description: "Which page number to fetch"
        required: false
        type: "integer"
        default: 1
        minimum: 1
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "query"
        in: "query"
        description: "Search query"
        required: false
        type: "string"
        x-exportParamName: "Query"
        x-optionalDataType: "String"
      - name: "ids"
        in: "query"
        description: "Filter list of id:s (comma separated)"
        required: false
        type: "string"
        x-exportParamName: "Ids"
        x-optionalDataType: "String"
      - name: "sort"
        in: "query"
        description: "A comma separated list of fieldnames with order. For example\
          \ - first_name,asc;last_name,desc"
        required: false
        type: "string"
        x-exportParamName: "Sort"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Returns a list of transcoders"
          schema:
            $ref: "#/definitions/TranscodersSchema"
        "401":
          description: "Token is invalid"
    post:
      summary: "Create a new transcoder"
      description: "\nRequired roles:\n - can_write_transcoders"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/TranscoderSchema"
        x-exportParamName: "Body"
      responses:
        "201":
          description: "Returns a created transcoder entry"
          schema:
            $ref: "#/definitions/TranscoderSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
  /v1/transcoders/{transcoder_id}/:
    get:
      summary: "Returns a particular transcoder by id"
      description: "\nRequired roles:\n - can_read_transcoders"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "transcoder_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "TranscoderId"
      responses:
        "200":
          description: "Returns a transcoder"
          schema:
            $ref: "#/definitions/TranscoderSchema"
        "401":
          description: "Token is invalid"
        "404":
          description: "Transcoder doesn't exist"
    put:
      summary: "Update transcoder"
      description: "\nRequired roles:\n - can_write_transcoders"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "transcoder_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "TranscoderId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/TranscoderSchema"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Returns an updated transcoder"
          schema:
            $ref: "#/definitions/TranscoderSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
    delete:
      summary: "Delete a particular transcoder by id"
      description: "\nRequired roles:\n - can_delete_transcoders"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "transcoder_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "TranscoderId"
      responses:
        "204":
          description: "Without body"
        "401":
          description: "Token is invalid"
        "404":
          description: "Transcoder doesn't exist"
    patch:
      summary: "Update transcoder"
      description: "\nRequired roles:\n - can_write_transcoders"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "transcoder_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "TranscoderId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/TranscoderSchema"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Returns an updated transcoder"
          schema:
            $ref: "#/definitions/TranscoderSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
  /v1/transcoders/{transcoder_id}/logs/:
    post:
      summary: "Upload transcoder logs"
      description: "\nRequired roles:\n - is_storage_worker"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "transcoder_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "TranscoderId"
      - name: "filename"
        in: "query"
        required: true
        type: "string"
        x-exportParamName: "Filename"
      responses:
        "200":
          description: "Returns upload_url and path for transcoder logs"
          schema:
            properties:
              path:
                type: "string"
              upload_url:
                type: "string"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Storage does not exist"
  /v1/transcoders/{transcoder_id}/reindex/:
    post:
      summary: "Trigger reindexing of a transcoder"
      description: "\nRequired roles:\n - can_reindex_transcoders"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "transcoder_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "TranscoderId"
      responses:
        "201":
          description: "ID and status of the job"
        "401":
          description: "Token is invalid"
  /v1/transcoders/{transcoder_id}/storages/:
    get:
      summary: "Get storages linked to a transcoder"
      description: "\nRequired roles:\n - can_read_transcoders"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "transcoder_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "TranscoderId"
      - name: "per_page"
        in: "query"
        description: "The number of items for each page"
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "PerPage"
        x-optionalDataType: "Int32"
      - name: "last_id"
        in: "query"
        description: "ID of a last storage on previous page"
        required: false
        type: "string"
        x-exportParamName: "LastId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Returns a list of storages"
          schema:
            $ref: "#/definitions/StoragesReadSchema"
        "401":
          description: "Token is invalid"
  /v1/transfers/jobs/priority/: {}
  /v1/transfers/jobs/state/: {}
  /v1/transfers/queue_records/{queue_record_id}/reindex/: {}
  /v1/transfers/{transfer_id}/urls/:
    post:
      summary: "Generates a url for direct file downloads (for IGSs)"
      description: ""
      parameters:
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "transfer_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "TransferId"
      responses:
        "200":
          description: "Generated signed url"
          schema:
            $ref: "#/definitions/TransferSignedURLSchema"
        "400":
          description: "Failed to generate url"
        "403":
          description: "User not authorized to get url for job"
        "404":
          description: "Transfer job does not exist"
  /v1/transfers/{transfer_id}/urls/verify/:
    get:
      summary: "Verifies the signature of a url"
      description: ""
      parameters:
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "transfer_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "TransferId"
      - name: "user_id"
        in: "query"
        required: true
        type: "string"
        x-exportParamName: "UserId"
      - name: "signature"
        in: "query"
        required: true
        type: "string"
        x-exportParamName: "Signature"
      responses:
        "200":
          description: "Verified signed url"
        "400":
          description: "Not a valid signed url"
definitions:
  AnalysisAmazonRekognitionSettingsSchema:
    type: "object"
    required:
    - "access_key"
    - "bucket"
    - "endpoint"
    - "path"
    - "region"
    - "secret_key"
    properties:
      access_key:
        type: "string"
      bucket:
        type: "string"
      endpoint:
        type: "string"
      is_system:
        type: "boolean"
        default: false
      path:
        type: "string"
      region:
        type: "string"
      secret_key:
        type: "string"
  AnalysisGoogleAISettingsSchema:
    type: "object"
    required:
    - "bucket_name"
    - "json_key"
    properties:
      bucket_name:
        type: "string"
      is_system:
        type: "boolean"
        default: false
      json_key:
        type: "string"
  AnalysisIconikSettingsSchema:
    type: "object"
    properties:
      is_system:
        type: "boolean"
        default: false
  AnalysisProfileAmazonRekognitionSettingsSchema:
    type: "object"
    properties:
      is_system:
        type: "boolean"
        default: false
      min_confidence:
        type: "integer"
        format: "int32"
        minimum: 0
        maximum: 100
  AnalysisProfileBaseSchema:
    type: "object"
  AnalysisProfileSchema:
    type: "object"
    required:
    - "analysis_service_account_id"
    - "media_type"
    - "name"
    properties:
      analysis_service_account_id:
        type: "string"
      enabled:
        type: "boolean"
        default: true
      id:
        type: "string"
        readOnly: true
      is_default:
        type: "boolean"
        readOnly: true
        default: false
      media_type:
        type: "string"
        enum:
        - "image"
        - "video"
        - "transcription"
      name:
        type: "string"
      service_type:
        type: "string"
        enum:
        - "GOOGLE_VISION"
        - "GOOGLE_VIDEO_INTELLIGENCE"
        - "AMAZON_REKOGNITION"
        - "REV_AI"
        - "ICONIK"
      settings:
        type: "string"
    example:
      settings: "settings"
      service_type: "GOOGLE_VISION"
      media_type: "image"
      name: "name"
      id: "id"
      is_default: false
      analysis_service_account_id: "analysis_service_account_id"
      enabled: true
  AnalysisProfileServiceIdSchema:
    type: "object"
    required:
    - "analysis_service_account_id"
    properties:
      analysis_service_account_id:
        type: "string"
  AnalysisProfileSettingsSchema:
    type: "object"
    properties:
      is_system:
        type: "boolean"
        default: false
  AnalysisProfilesSchema:
    type: "object"
    properties:
      objects:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/AnalysisProfileSchema"
    example:
      objects:
      - settings: "settings"
        service_type: "GOOGLE_VISION"
        media_type: "image"
        name: "name"
        id: "id"
        is_default: false
        analysis_service_account_id: "analysis_service_account_id"
        enabled: true
      - settings: "settings"
        service_type: "GOOGLE_VISION"
        media_type: "image"
        name: "name"
        id: "id"
        is_default: false
        analysis_service_account_id: "analysis_service_account_id"
        enabled: true
  AnalysisRevAISettingsSchema:
    type: "object"
    required:
    - "access_token"
    properties:
      access_token:
        type: "string"
      is_system:
        type: "boolean"
        default: false
  AnalysisServiceAccountBaseSchema:
    type: "object"
  AnalysisServiceAccountReadSchema:
    type: "object"
    required:
    - "method"
    - "name"
    - "settings"
    properties:
      id:
        type: "string"
        readOnly: true
      method:
        type: "string"
        enum:
        - "GOOGLE_AI"
        - "AMAZON"
        - "REV_AI"
        - "ICONIK"
      name:
        type: "string"
      settings:
        type: "string"
    example:
      settings: "settings"
      method: "GOOGLE_AI"
      name: "name"
      id: "id"
  AnalysisServiceAccountSchema:
    type: "object"
    required:
    - "method"
    - "name"
    - "settings"
    properties:
      id:
        type: "string"
        readOnly: true
      method:
        type: "string"
        enum:
        - "GOOGLE_AI"
        - "AMAZON"
        - "REV_AI"
        - "ICONIK"
      name:
        type: "string"
      settings:
        type: "string"
    example:
      settings: "settings"
      method: "GOOGLE_AI"
      name: "name"
      id: "id"
  AnalysisServiceAccountsSchema:
    type: "object"
    properties:
      objects:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/AnalysisServiceAccountReadSchema"
    example:
      objects:
      - settings: "settings"
        method: "GOOGLE_AI"
        name: "name"
        id: "id"
      - settings: "settings"
        method: "GOOGLE_AI"
        name: "name"
        id: "id"
  AssetBatchExportItemSchema:
    type: "object"
    required:
    - "asset_id"
    properties:
      asset_id:
        type: "string"
      file_name:
        type: "string"
        x-nullable: true
      format_id:
        type: "string"
        x-nullable: true
  AssetBatchExportSchema:
    type: "object"
    required:
    - "assets"
    properties:
      assets:
        type: "array"
        items:
          $ref: "#/definitions/AssetBatchExportItemSchema"
      export_metadata:
        type: "boolean"
        x-nullable: true
      export_to_asset_folder:
        type: "boolean"
        x-nullable: true
      metadata_format:
        type: "string"
        enum:
        - "CSV"
        - "JSON"
        - "XML"
        x-nullable: true
      metadata_view:
        type: "string"
        x-nullable: true
      overwrite:
        type: "boolean"
        default: false
        x-nullable: true
      transcode_profile_ids:
        type: "array"
        items:
          type: "string"
        x-nullable: true
  AssetExportSchema:
    type: "object"
    properties:
      export_metadata:
        type: "boolean"
        x-nullable: true
      export_to_asset_folder:
        type: "boolean"
        x-nullable: true
      file_name:
        type: "string"
        x-nullable: true
      format_id:
        type: "string"
        x-nullable: true
      metadata_format:
        type: "string"
        enum:
        - "CSV"
        - "JSON"
        - "XML"
        x-nullable: true
      metadata_view:
        type: "string"
        x-nullable: true
      overwrite:
        type: "boolean"
        default: false
        x-nullable: true
      transcode_profile_ids:
        type: "array"
        items:
          type: "string"
        x-nullable: true
  AzureSettingsSchema:
    type: "object"
    required:
    - "connection_string"
    - "container"
    - "path"
    properties:
      access_group_id:
        type: "string"
        x-nullable: true
      acl_template_id:
        type: "string"
        x-nullable: true
      add_uuid_to_filenames:
        type: "boolean"
        default: true
      aggregate_identical_files:
        type: "boolean"
        default: true
      aggregate_ignore:
        type: "string"
      aggregate_only_on_same_storage:
        type: "boolean"
        default: false
      connection_string:
        type: "string"
      container:
        type: "string"
      delete:
        type: "boolean"
      enable_collection_directory_mapping:
        type: "boolean"
        default: false
      filename_is_external_id:
        type: "boolean"
        default: false
      folder_name_tags_metadata_field_name:
        type: "string"
      folder_name_tags_metadata_view_id:
        type: "string"
        x-nullable: true
      is_system:
        type: "boolean"
        default: false
      metadata_view_id:
        type: "string"
        x-nullable: true
      path:
        type: "string"
      preload_edge_jobs:
        type: "integer"
        format: "int32"
        minimum: -2147483648
        maximum: 2147483647
        x-nullable: true
      read:
        type: "boolean"
      root_collection_id:
        type: "string"
      scan:
        type: "boolean"
      scan_directories:
        type: "string"
      scan_ignore:
        type: "string"
      sidecar_metadata_required:
        type: "boolean"
      title_includes_extension:
        type: "boolean"
        default: false
      transcode_ignore:
        type: "string"
      write:
        type: "boolean"
  B2SettingsSchema:
    type: "object"
    required:
    - "account_id"
    - "authorization_token"
    - "bucket_id"
    - "bucket_name"
    - "path"
    properties:
      access_group_id:
        type: "string"
        x-nullable: true
      account_id:
        type: "string"
      acl_template_id:
        type: "string"
        x-nullable: true
      add_uuid_to_filenames:
        type: "boolean"
        default: true
      aggregate_identical_files:
        type: "boolean"
        default: true
      aggregate_ignore:
        type: "string"
      aggregate_only_on_same_storage:
        type: "boolean"
        default: false
      authorization_token:
        type: "string"
      bucket_id:
        type: "string"
      bucket_name:
        type: "string"
      delete:
        type: "boolean"
      enable_collection_directory_mapping:
        type: "boolean"
        default: false
      filename_is_external_id:
        type: "boolean"
        default: false
      folder_name_tags_metadata_field_name:
        type: "string"
      folder_name_tags_metadata_view_id:
        type: "string"
        x-nullable: true
      is_system:
        type: "boolean"
        default: false
      metadata_view_id:
        type: "string"
        x-nullable: true
      path:
        type: "string"
      preload_edge_jobs:
        type: "integer"
        format: "int32"
        minimum: -2147483648
        maximum: 2147483647
        x-nullable: true
      read:
        type: "boolean"
      root_collection_id:
        type: "string"
      scan:
        type: "boolean"
      scan_directories:
        type: "string"
      scan_ignore:
        type: "string"
      sidecar_metadata_required:
        type: "boolean"
      title_includes_extension:
        type: "boolean"
        default: false
      transcode_ignore:
        type: "string"
      write:
        type: "boolean"
  BaseExportSchema:
    type: "object"
    properties:
      export_metadata:
        type: "boolean"
        x-nullable: true
      export_to_asset_folder:
        type: "boolean"
        x-nullable: true
      metadata_format:
        type: "string"
        enum:
        - "CSV"
        - "JSON"
        - "XML"
        x-nullable: true
      metadata_view:
        type: "string"
        x-nullable: true
      overwrite:
        type: "boolean"
        default: false
        x-nullable: true
  BulkActionSchema:
    type: "object"
    required:
    - "object_ids"
    - "object_type"
    properties:
      object_ids:
        type: "array"
        items:
          type: "string"
        maxItems: 500
        minItems: 1
      object_type:
        type: "string"
        enum:
        - "assets"
        - "collections"
        - "saved_searches"
  BulkFilesetArchiveSchema:
    type: "object"
    required:
    - "object_ids"
    - "object_type"
    properties:
      allow_duplicate_transfers:
        type: "boolean"
      delete_original:
        type: "boolean"
      destination_storage_id:
        type: "string"
        x-nullable: true
      keep_collection_structure:
        type: "boolean"
      object_ids:
        type: "array"
        items:
          type: "string"
        maxItems: 500
        minItems: 1
      object_type:
        type: "string"
        enum:
        - "assets"
        - "collections"
        - "saved_searches"
  BulkFilesetExportSchema:
    type: "object"
    required:
    - "object_ids"
    - "object_type"
    properties:
      allow_duplicate_transfers:
        type: "boolean"
      delete_original:
        type: "boolean"
      export_metadata:
        type: "boolean"
        x-nullable: true
      export_to_asset_folder:
        type: "boolean"
        x-nullable: true
      keep_collection_structure:
        type: "boolean"
        default: false
      metadata_format:
        type: "string"
        enum:
        - "CSV"
        - "JSON"
        - "XML"
        x-nullable: true
      metadata_view:
        type: "string"
        x-nullable: true
      object_ids:
        type: "array"
        items:
          type: "string"
        maxItems: 500
        minItems: 1
      object_type:
        type: "string"
        enum:
        - "assets"
        - "collections"
      overwrite:
        type: "boolean"
        default: false
        x-nullable: true
  BulkFilesetRestoreSchema:
    type: "object"
    required:
    - "object_ids"
    - "object_type"
    properties:
      allow_duplicate_transfers:
        type: "boolean"
      delete_original:
        type: "boolean"
      destination_directory_path:
        type: "string"
        x-nullable: true
      destination_storage_id:
        type: "string"
        x-nullable: true
      keep_collection_structure:
        type: "boolean"
      object_ids:
        type: "array"
        items:
          type: "string"
        maxItems: 500
        minItems: 1
      object_type:
        type: "string"
        enum:
        - "assets"
        - "collections"
        - "saved_searches"
  BulkTranscodeSchema:
    type: "object"
    required:
    - "object_ids"
    - "object_type"
    properties:
      format_name:
        type: "string"
      object_ids:
        type: "array"
        items:
          type: "string"
        maxItems: 500
        minItems: 1
      object_type:
        type: "string"
        enum:
        - "assets"
        - "collections"
        - "saved_searches"
      prefer_any_cloud:
        type: "boolean"
      preferred_storage_id:
        type: "string"
      preferred_storage_method:
        type: "string"
        enum:
        - "FILE"
        - "HTTP"
        - "FTP"
        - "SFTP"
        - "S3"
        - "B2"
        - "GCS"
        - "PORTAL"
        - "CUSTOM"
        - "AZURE"
      priority:
        type: "integer"
        format: "int32"
        minimum: -2147483648
        maximum: 2147483647
  BulkTransferSchema:
    type: "object"
    required:
    - "object_ids"
    - "object_type"
    properties:
      allow_duplicate_transfers:
        type: "boolean"
      delete_original:
        type: "boolean"
      keep_collection_structure:
        type: "boolean"
      object_ids:
        type: "array"
        items:
          type: "string"
        maxItems: 500
        minItems: 1
      object_type:
        type: "string"
        enum:
        - "assets"
        - "collections"
        - "saved_searches"
  BulkTransferToStorageSchema:
    type: "object"
    required:
    - "object_ids"
    - "object_type"
    properties:
      allow_duplicate_transfers:
        type: "boolean"
      delete_original:
        type: "boolean"
      file_path:
        type: "string"
        x-nullable: true
      format_name:
        type: "string"
      keep_collection_structure:
        type: "boolean"
      object_ids:
        type: "array"
        items:
          type: "string"
        maxItems: 500
        minItems: 1
      object_type:
        type: "string"
        enum:
        - "assets"
        - "collections"
        - "saved_searches"
      overwrite:
        type: "boolean"
  CollectionExportSchema:
    type: "object"
    properties:
      delete_original:
        type: "boolean"
        default: false
        x-nullable: true
      export_metadata:
        type: "boolean"
        x-nullable: true
      export_to_asset_folder:
        type: "boolean"
        x-nullable: true
      keep_collection_structure:
        type: "boolean"
        default: true
        x-nullable: true
      metadata_format:
        type: "string"
        enum:
        - "CSV"
        - "JSON"
        - "XML"
        x-nullable: true
      metadata_view:
        type: "string"
        x-nullable: true
      overwrite:
        type: "boolean"
        default: false
        x-nullable: true
  CollectionKeyframeCreateSchema:
    type: "object"
    required:
    - "storage_id"
    - "type"
    properties:
      collection_id:
        type: "string"
      filename:
        type: "string"
      format:
        type: "string"
      id:
        type: "string"
        readOnly: true
      is_custom_keyframe:
        type: "boolean"
      is_public:
        type: "boolean"
        readOnly: true
      name:
        type: "string"
      resolution:
        $ref: "#/definitions/ResolutionTypeSchema"
      rotation:
        type: "integer"
        format: "int32"
        minimum: -2147483648
        maximum: 2147483647
        x-nullable: true
      size:
        type: "integer"
        format: "int64"
        minimum: -9223372036854775808
        maximum: 9223372036854775807
        x-nullable: true
      status:
        type: "string"
        enum:
        - "OPEN"
        - "GROWING"
        - "AWAITED"
        - "CLOSED"
        - "FAILED"
        - "ARCHIVED"
        - "MISSING"
        - "REDISCOVERED"
        - "DELETED"
      storage_id:
        type: "string"
      time_code:
        $ref: "#/definitions/TimeCodeTypeSchema"
      type:
        type: "string"
        enum:
        - "KEYFRAME_MAP"
        - "KEYFRAME"
        - "POSTER"
      upload_credentials:
        type: "object"
        readOnly: true
        properties: {}
      upload_method:
        type: "string"
        readOnly: true
      upload_url:
        type: "string"
        readOnly: true
      url:
        type: "string"
        readOnly: true
    example:
      rotation: -1803530559
      format: "format"
      is_custom_keyframe: true
      type: "KEYFRAME_MAP"
      resolution:
        width: 441289069
        height: -1803530559
      url: "url"
      collection_id: "collection_id"
      filename: "filename"
      size: 1895322125605019648
      storage_id: "storage_id"
      is_public: true
      name: "name"
      time_code:
        time_base:
          denominator: -1158723813
          numerator: 885365090
        is_drop_frame: true
        frames_number: 1175752406347165696
      upload_method: "upload_method"
      upload_credentials: "{}"
      upload_url: "upload_url"
      id: "id"
      status: "OPEN"
  CollectionKeyframeSchema:
    type: "object"
    required:
    - "storage_id"
    - "type"
    properties:
      collection_id:
        type: "string"
      filename:
        type: "string"
      format:
        type: "string"
      id:
        type: "string"
        readOnly: true
      is_custom_keyframe:
        type: "boolean"
      is_public:
        type: "boolean"
        readOnly: true
      name:
        type: "string"
      resolution:
        $ref: "#/definitions/ResolutionTypeSchema"
      rotation:
        type: "integer"
        format: "int32"
        minimum: -2147483648
        maximum: 2147483647
        x-nullable: true
      size:
        type: "integer"
        format: "int64"
        minimum: -9223372036854775808
        maximum: 9223372036854775807
        x-nullable: true
      status:
        type: "string"
        enum:
        - "OPEN"
        - "GROWING"
        - "AWAITED"
        - "CLOSED"
        - "FAILED"
        - "ARCHIVED"
        - "MISSING"
        - "REDISCOVERED"
        - "DELETED"
      storage_id:
        type: "string"
      time_code:
        $ref: "#/definitions/TimeCodeTypeSchema"
      type:
        type: "string"
        enum:
        - "KEYFRAME_MAP"
        - "KEYFRAME"
        - "POSTER"
      url:
        type: "string"
        readOnly: true
    example:
      rotation: -1803530559
      format: "format"
      is_custom_keyframe: true
      type: "KEYFRAME_MAP"
      resolution:
        width: 441289069
        height: -1803530559
      url: "url"
      collection_id: "collection_id"
      filename: "filename"
      size: 1895322125605019648
      storage_id: "storage_id"
      is_public: true
      name: "name"
      time_code:
        time_base:
          denominator: -1158723813
          numerator: 885365090
        is_drop_frame: true
        frames_number: 1175752406347165696
      id: "id"
      status: "OPEN"
  CollectionKeyframeUpdateSchema:
    type: "object"
    required:
    - "type"
    properties:
      filename:
        type: "string"
      format:
        type: "string"
      is_custom_keyframe:
        type: "boolean"
      is_public:
        type: "boolean"
        readOnly: true
      name:
        type: "string"
      resolution:
        $ref: "#/definitions/ResolutionTypeSchema"
      rotation:
        type: "integer"
        format: "int32"
        minimum: -2147483648
        maximum: 2147483647
        x-nullable: true
      size:
        type: "integer"
        format: "int64"
        minimum: -9223372036854775808
        maximum: 9223372036854775807
        x-nullable: true
      status:
        type: "string"
        enum:
        - "OPEN"
        - "GROWING"
        - "AWAITED"
        - "CLOSED"
        - "FAILED"
        - "ARCHIVED"
        - "MISSING"
        - "REDISCOVERED"
        - "DELETED"
      time_code:
        $ref: "#/definitions/TimeCodeTypeSchema"
      type:
        type: "string"
        enum:
        - "KEYFRAME_MAP"
        - "KEYFRAME"
        - "POSTER"
      url:
        type: "string"
        readOnly: true
  CollectionKeyframesSchema:
    type: "object"
    properties:
      first_url:
        type: "string"
        readOnly: true
      last_url:
        type: "string"
        readOnly: true
      next_url:
        type: "string"
        readOnly: true
      objects:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/CollectionKeyframeSchema"
      page:
        type: "integer"
        format: "int32"
        readOnly: true
        minimum: -2147483648
        maximum: 2147483647
      pages:
        type: "integer"
        format: "int32"
        readOnly: true
        minimum: -2147483648
        maximum: 2147483647
      per_page:
        type: "integer"
        format: "int32"
        readOnly: true
        minimum: -2147483648
        maximum: 2147483647
      prev_url:
        type: "string"
        readOnly: true
      total:
        type: "integer"
        format: "int64"
        readOnly: true
        minimum: -9223372036854775808
        maximum: 9223372036854775807
    example:
      per_page: -1517921766
      first_url: "first_url"
      total: 1774823812569044992
      pages: 441289069
      objects:
      - rotation: -1803530559
        format: "format"
        is_custom_keyframe: true
        type: "KEYFRAME_MAP"
        resolution:
          width: 441289069
          height: -1803530559
        url: "url"
        collection_id: "collection_id"
        filename: "filename"
        size: 1895322125605019648
        storage_id: "storage_id"
        is_public: true
        name: "name"
        time_code:
          time_base:
            denominator: -1158723813
            numerator: 885365090
          is_drop_frame: true
          frames_number: 1175752406347165696
        id: "id"
        status: "OPEN"
      - rotation: -1803530559
        format: "format"
        is_custom_keyframe: true
        type: "KEYFRAME_MAP"
        resolution:
          width: 441289069
          height: -1803530559
        url: "url"
        collection_id: "collection_id"
        filename: "filename"
        size: 1895322125605019648
        storage_id: "storage_id"
        is_public: true
        name: "name"
        time_code:
          time_base:
            denominator: -1158723813
            numerator: 885365090
          is_drop_frame: true
          frames_number: 1175752406347165696
        id: "id"
        status: "OPEN"
      next_url: "next_url"
      page: -1803530559
      prev_url: "prev_url"
      last_url: "last_url"
  CompleteExportToLocalStorageSchema:
    type: "object"
    required:
    - "destination_directory_path"
    - "destination_file_set_name"
    properties:
      add_file_set:
        type: "boolean"
      asset_id:
        type: "string"
      component_ids:
        type: "array"
        items:
          type: "string"
      delete_remote_file_set_after_download:
        type: "boolean"
      delete_source_file_set_after_download:
        type: "boolean"
      destination_directory_path:
        type: "string"
      destination_file_set_name:
        type: "string"
      destination_filename:
        type: "string"
      export_metadata_format:
        type: "string"
      export_metadata_view:
        type: "string"
      export_posters:
        type: "boolean"
      export_transcription_format:
        type: "string"
      file_set_id:
        type: "string"
      format_id:
        type: "string"
      id:
        type: "string"
        readOnly: true
      job_id:
        type: "string"
      job_steps:
        type: "object"
        properties: {}
      local_storage_id:
        type: "string"
      original_storage_id:
        type: "string"
      original_url:
        type: "string"
        format: "url"
      overwrite:
        type: "boolean"
      parent_job_id:
        type: "string"
      temporary_file_set_source:
        type: "boolean"
      transfer_type:
        type: "string"
        readOnly: true
  ComponentSchema:
    type: "object"
    required:
    - "name"
    - "type"
    properties:
      id:
        type: "string"
        readOnly: true
      metadata:
        type: "object"
        properties: {}
      name:
        type: "string"
      type:
        type: "string"
        enum:
        - "VIDEO"
        - "AUDIO"
        - "IMAGE"
        - "TEXT"
        - "OTHER"
        - "NON_MEDIA"
        - "EXIF"
        - "IPTC"
        - "XMP"
    example:
      metadata: "{}"
      name: "name"
      id: "id"
      type: "VIDEO"
  ComponentsSchema:
    type: "object"
    properties:
      first_url:
        type: "string"
        readOnly: true
      last_url:
        type: "string"
        readOnly: true
      next_url:
        type: "string"
        readOnly: true
      objects:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/ComponentSchema"
      page:
        type: "integer"
        format: "int32"
        readOnly: true
        minimum: -2147483648
        maximum: 2147483647
      pages:
        type: "integer"
        format: "int32"
        readOnly: true
        minimum: -2147483648
        maximum: 2147483647
      per_page:
        type: "integer"
        format: "int32"
        readOnly: true
        minimum: -2147483648
        maximum: 2147483647
      prev_url:
        type: "string"
        readOnly: true
      total:
        type: "integer"
        format: "int64"
        readOnly: true
        minimum: -9223372036854775808
        maximum: 9223372036854775807
    example:
      per_page: -1517921766
      first_url: "first_url"
      total: 1774823812569044992
      pages: 441289069
      objects:
      - metadata: "{}"
        name: "name"
        id: "id"
        type: "VIDEO"
      - metadata: "{}"
        name: "name"
        id: "id"
        type: "VIDEO"
      next_url: "next_url"
      page: -1803530559
      prev_url: "prev_url"
      last_url: "last_url"
  CustomSettingsSchema:
    type: "object"
    properties:
      custom:
        type: "string"
      delete:
        type: "boolean"
      is_system:
        type: "boolean"
        default: false
      read:
        type: "boolean"
      write:
        type: "boolean"
  DeleteQueueSchema:
    type: "object"
    required:
    - "ids"
    properties:
      ids:
        type: "array"
        items:
          type: "string"
  EditProxyResponseSchema:
    type: "object"
    properties:
      bitrate:
        type: "integer"
        format: "int32"
        minimum: -2147483648
        maximum: 2147483647
      codec:
        type: "string"
      directory_path:
        type: "string"
      file_set_id:
        type: "string"
      format_id:
        type: "string"
      height:
        type: "integer"
        format: "int32"
        minimum: -2147483648
        maximum: 2147483647
      id:
        type: "string"
      name:
        type: "string"
      transcoder_id:
        type: "string"
      type:
        type: "string"
      width:
        type: "integer"
        format: "int32"
        minimum: -2147483648
        maximum: 2147483647
  EditProxySchema:
    type: "object"
    required:
    - "directory_path"
    - "height"
    - "name"
    - "storage_id"
    - "version_id"
    - "width"
    properties:
      directory_path:
        type: "string"
        x-nullable: true
      force_storage_id:
        type: "boolean"
      height:
        type: "integer"
        format: "int32"
      ignore_transcoder_settings:
        type: "boolean"
      name:
        type: "string"
      storage_id:
        type: "string"
      version_id:
        type: "string"
      width:
        type: "integer"
        format: "int32"
  EditProxySettingsSchema:
    type: "object"
    required:
    - "height"
    - "width"
    properties:
      bitrate:
        type: "integer"
        format: "int32"
      codec:
        type: "string"
      data:
        type: "string"
      delete_after_upload:
        type: "boolean"
        default: false
      destination_path:
        type: "string"
        x-nullable: true
      exclude_patterns:
        type: "string"
      height:
        type: "integer"
        format: "int32"
      include_patterns:
        type: "string"
      local:
        type: "boolean"
      min_height:
        type: "integer"
        format: "int32"
      min_width:
        type: "integer"
        format: "int32"
      storage_id:
        type: "string"
        x-nullable: true
      width:
        type: "integer"
        format: "int32"
  ElementalMediaConvertSchema:
    type: "object"
    required:
    - "access_key"
    - "endpoint_url"
    - "file_group_custom_name"
    - "iam_role"
    - "job_template_name"
    - "region_name"
    - "s3_endpoint_url"
    - "secret_key"
    properties:
      access_key:
        type: "string"
      edit_proxy_directory_path:
        type: "string"
        x-nullable: true
      edit_proxy_storage_id:
        type: "string"
        x-nullable: true
      endpoint_url:
        type: "string"
      file_group_custom_name:
        type: "string"
      iam_role:
        type: "string"
      job_template_name:
        type: "string"
      keyframe_storage_id:
        type: "string"
        x-nullable: true
      local:
        type: "boolean"
        default: false
      proxy_storage_id:
        type: "string"
        x-nullable: true
      queue_name:
        type: "string"
      region_name:
        type: "string"
      s3_endpoint_url:
        type: "string"
      s3_region_name:
        type: "string"
      secret_key:
        type: "string"
      temp_upload_path:
        type: "string"
        default: "temp_upload_path"
  ElementalServerSchema:
    type: "object"
    required:
    - "api_key"
    - "base_url"
    - "mount_point"
    - "profile"
    - "username"
    properties:
      api_key:
        type: "string"
      base_url:
        type: "string"
      keyframe_map_output_group_order:
        type: "integer"
        format: "int32"
        minimum: 1
        default: 3
      keyframe_output_group_order:
        type: "integer"
        format: "int32"
        minimum: 1
        default: 2
      local:
        type: "boolean"
        default: true
      mount_point:
        type: "string"
      profile:
        type: "integer"
        format: "int32"
        minimum: -2147483648
        maximum: 2147483647
      proxy_output_group_order:
        type: "integer"
        format: "int32"
        minimum: 1
        default: 1
      username:
        type: "string"
  EncodingComSettingsSchema:
    type: "object"
    required:
    - "user_id"
    - "user_key"
    properties:
      local:
        type: "boolean"
        default: false
      user_id:
        type: "string"
      user_key:
        type: "string"
  ExportLocationSchema:
    type: "object"
    required:
    - "name"
    - "path"
    - "storage_id"
    properties:
      description:
        type: "string"
      export_metadata:
        type: "boolean"
      export_original:
        type: "boolean"
      export_posters:
        type: "boolean"
      export_to_asset_folder:
        type: "boolean"
      export_transcriptions:
        type: "boolean"
      id:
        type: "string"
        readOnly: true
      metadata_format:
        type: "string"
        enum:
        - "CSV"
        - "JSON"
        - "XML"
      metadata_view:
        type: "string"
      name:
        type: "string"
      path:
        type: "string"
      storage_id:
        type: "string"
      system_domain_id:
        type: "string"
        readOnly: true
      transcode_profile_ids:
        type: "array"
        items:
          type: "string"
      transcription_format:
        type: "string"
        enum:
        - "WEBVTT"
        - "SRT"
    example:
      export_metadata: true
      description: "description"
      export_original: true
      metadata_format: "CSV"
      transcode_profile_ids:
      - "transcode_profile_ids"
      - "transcode_profile_ids"
      path: "path"
      transcription_format: "WEBVTT"
      storage_id: "storage_id"
      metadata_view: "metadata_view"
      name: "name"
      export_posters: true
      id: "id"
      export_to_asset_folder: true
      export_transcriptions: true
      system_domain_id: "system_domain_id"
  ExportLocationsSchema:
    type: "object"
    properties:
      facets:
        type: "object"
        properties: {}
      first_url:
        type: "string"
        readOnly: true
      last_url:
        type: "string"
        readOnly: true
      next_url:
        type: "string"
        readOnly: true
      objects:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/ExportLocationSchema"
      page:
        type: "integer"
        format: "int32"
        readOnly: true
        minimum: -2147483648
        maximum: 2147483647
      pages:
        type: "integer"
        format: "int32"
        readOnly: true
        minimum: -2147483648
        maximum: 2147483647
      per_page:
        type: "integer"
        format: "int32"
        readOnly: true
        minimum: -2147483648
        maximum: 2147483647
      prev_url:
        type: "string"
        readOnly: true
      total:
        type: "integer"
        format: "int64"
        readOnly: true
        minimum: -9223372036854775808
        maximum: 9223372036854775807
    example:
      per_page: -1517921766
      first_url: "first_url"
      total: 1774823812569044992
      pages: 441289069
      objects:
      - export_metadata: true
        description: "description"
        export_original: true
        metadata_format: "CSV"
        transcode_profile_ids:
        - "transcode_profile_ids"
        - "transcode_profile_ids"
        path: "path"
        transcription_format: "WEBVTT"
        storage_id: "storage_id"
        metadata_view: "metadata_view"
        name: "name"
        export_posters: true
        id: "id"
        export_to_asset_folder: true
        export_transcriptions: true
        system_domain_id: "system_domain_id"
      - export_metadata: true
        description: "description"
        export_original: true
        metadata_format: "CSV"
        transcode_profile_ids:
        - "transcode_profile_ids"
        - "transcode_profile_ids"
        path: "path"
        transcription_format: "WEBVTT"
        storage_id: "storage_id"
        metadata_view: "metadata_view"
        name: "name"
        export_posters: true
        id: "id"
        export_to_asset_folder: true
        export_transcriptions: true
        system_domain_id: "system_domain_id"
      next_url: "next_url"
      page: -1803530559
      prev_url: "prev_url"
      last_url: "last_url"
      facets: "{}"
  FFmpegSettingsSchema:
    type: "object"
    properties:
      bitrate:
        type: "integer"
        format: "int32"
        minimum: -2147483648
        maximum: 2147483647
      data:
        type: "string"
      edit_proxy_folder:
        type: "string"
        x-nullable: true
      local:
        type: "boolean"
      overlay_coordinates:
        type: "string"
        x-nullable: true
      overlay_url:
        type: "string"
        x-nullable: true
      width:
        type: "integer"
        format: "int32"
        minimum: -2147483648
        maximum: 2147483647
  FileBaseSchema:
    type: "object"
    required:
    - "directory_path"
    - "original_name"
    - "type"
    properties:
      asset_id:
        type: "string"
      checksum:
        type: "string"
      date_created:
        type: "string"
        format: "date-time"
        readOnly: true
      date_modified:
        type: "string"
        format: "date-time"
        readOnly: true
      directory_path:
        type: "string"
      file_date_created:
        type: "string"
        format: "date-time"
      file_date_modified:
        type: "string"
        format: "date-time"
      file_set_id:
        type: "string"
      format_id:
        type: "string"
      id:
        type: "string"
        readOnly: true
      name:
        type: "string"
        description: "If not specified, name will be autogenerated based on `id` and\
          \ `original_name`"
      original_name:
        type: "string"
      parent_id:
        type: "string"
        x-nullable: true
      size:
        type: "integer"
        format: "int64"
        minimum: -9223372036854775808
        maximum: 9223372036854775807
      status:
        type: "string"
        enum:
        - "OPEN"
        - "GROWING"
        - "AWAITED"
        - "CLOSED"
        - "FAILED"
        - "ARCHIVED"
        - "MISSING"
        - "REDISCOVERED"
        - "DELETED"
      storage_id:
        type: "string"
      type:
        type: "string"
        enum:
        - "FILE"
        - "DIRECTORY"
        - "SYMLINK"
      user_id:
        type: "string"
      version_id:
        type: "string"
    example:
      date_created: "2000-01-23T04:56:07.000+00:00"
      directory_path: "directory_path"
      asset_id: "asset_id"
      version_id: "version_id"
      type: "FILE"
      date_modified: "2000-01-23T04:56:07.000+00:00"
      size: -7746104769210155008
      file_date_modified: "2000-01-23T04:56:07.000+00:00"
      user_id: "user_id"
      parent_id: "parent_id"
      storage_id: "storage_id"
      original_name: "original_name"
      checksum: "checksum"
      name: "name"
      format_id: "format_id"
      id: "id"
      file_set_id: "file_set_id"
      file_date_created: "2000-01-23T04:56:07.000+00:00"
      status: "OPEN"
  FileCreateSchema:
    type: "object"
    required:
    - "directory_path"
    - "original_name"
    - "type"
    properties:
      asset_id:
        type: "string"
      checksum:
        type: "string"
      date_created:
        type: "string"
        format: "date-time"
        readOnly: true
      date_modified:
        type: "string"
        format: "date-time"
        readOnly: true
      directory_path:
        type: "string"
      file_date_created:
        type: "string"
        format: "date-time"
      file_date_modified:
        type: "string"
        format: "date-time"
      file_set_id:
        type: "string"
      format_id:
        type: "string"
      id:
        type: "string"
        readOnly: true
      multipart_upload_url:
        type: "string"
        readOnly: true
      name:
        type: "string"
        description: "If not specified, name will be autogenerated based on `id` and\
          \ `original_name`"
      original_name:
        type: "string"
      parent_id:
        type: "string"
        x-nullable: true
      size:
        type: "integer"
        format: "int64"
        minimum: -9223372036854775808
        maximum: 9223372036854775807
      status:
        type: "string"
        enum:
        - "OPEN"
        - "GROWING"
        - "AWAITED"
        - "CLOSED"
        - "FAILED"
        - "ARCHIVED"
        - "MISSING"
        - "REDISCOVERED"
        - "DELETED"
      storage_id:
        type: "string"
      storage_method:
        type: "string"
        readOnly: true
      type:
        type: "string"
        enum:
        - "FILE"
        - "DIRECTORY"
        - "SYMLINK"
      upload_credentials:
        type: "object"
        readOnly: true
        properties: {}
      upload_filename:
        type: "string"
        readOnly: true
      upload_method:
        type: "string"
        readOnly: true
      upload_url:
        type: "string"
        readOnly: true
      user_id:
        type: "string"
      version_id:
        type: "string"
    example:
      multipart_upload_url: "multipart_upload_url"
      directory_path: "directory_path"
      asset_id: "asset_id"
      upload_filename: "upload_filename"
      type: "FILE"
      storage_id: "storage_id"
      checksum: "checksum"
      upload_method: "upload_method"
      format_id: "format_id"
      id: "id"
      file_set_id: "file_set_id"
      file_date_created: "2000-01-23T04:56:07.000+00:00"
      storage_method: "storage_method"
      date_created: "2000-01-23T04:56:07.000+00:00"
      version_id: "version_id"
      date_modified: "2000-01-23T04:56:07.000+00:00"
      size: -7746104769210155008
      file_date_modified: "2000-01-23T04:56:07.000+00:00"
      user_id: "user_id"
      parent_id: "parent_id"
      original_name: "original_name"
      name: "name"
      upload_credentials: "{}"
      upload_url: "upload_url"
      status: "OPEN"
  FileDeletionFromLocalStorageSchema:
    type: "object"
    required:
    - "file_id"
    - "filename"
    - "job_id"
    - "storage_id"
    properties:
      directory_path:
        type: "string"
      file_id:
        type: "string"
      filename:
        type: "string"
      id:
        type: "string"
        readOnly: true
      job_id:
        type: "string"
      keep_source:
        type: "boolean"
      storage_id:
        type: "string"
    example:
      keep_source: true
      filename: "filename"
      directory_path: "directory_path"
      job_id: "job_id"
      storage_id: "storage_id"
      file_id: "file_id"
      id: "id"
  FileDeletionsSchema:
    type: "object"
    properties:
      first_url:
        type: "string"
        readOnly: true
      last_url:
        type: "string"
        readOnly: true
      next_url:
        type: "string"
        readOnly: true
      objects:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/FileDeletionFromLocalStorageSchema"
      page:
        type: "integer"
        format: "int32"
        readOnly: true
        minimum: -2147483648
        maximum: 2147483647
      pages:
        type: "integer"
        format: "int32"
        readOnly: true
        minimum: -2147483648
        maximum: 2147483647
      per_page:
        type: "integer"
        format: "int32"
        readOnly: true
        minimum: -2147483648
        maximum: 2147483647
      prev_url:
        type: "string"
        readOnly: true
      total:
        type: "integer"
        format: "int64"
        readOnly: true
        minimum: -9223372036854775808
        maximum: 9223372036854775807
    example:
      per_page: -1517921766
      first_url: "first_url"
      total: 1774823812569044992
      pages: 441289069
      objects:
      - keep_source: true
        filename: "filename"
        directory_path: "directory_path"
        job_id: "job_id"
        storage_id: "storage_id"
        file_id: "file_id"
        id: "id"
      - keep_source: true
        filename: "filename"
        directory_path: "directory_path"
        job_id: "job_id"
        storage_id: "storage_id"
        file_id: "file_id"
        id: "id"
      next_url: "next_url"
      page: -1803530559
      prev_url: "prev_url"
      last_url: "last_url"
  FileDownloadURLSchema:
    type: "object"
    properties:
      url:
        type: "string"
        readOnly: true
    example:
      url: "url"
  FileElasticSchema:
    type: "object"
    required:
    - "directory_path"
    - "original_name"
    - "type"
    properties:
      asset_id:
        type: "string"
      checksum:
        type: "string"
      date_created:
        type: "string"
      date_modified:
        type: "string"
      directory_path:
        type: "string"
      file_date_created:
        type: "string"
        format: "date-time"
      file_date_modified:
        type: "string"
        format: "date-time"
      file_set_id:
        type: "string"
      file_set_status:
        type: "string"
        readOnly: true
        x-nullable: true
      format_id:
        type: "string"
      format_status:
        type: "string"
        readOnly: true
        x-nullable: true
      id:
        type: "string"
        readOnly: true
      name:
        type: "string"
        description: "If not specified, name will be autogenerated based on `id` and\
          \ `original_name`"
      original_name:
        type: "string"
      parent_id:
        type: "string"
        x-nullable: true
      size:
        type: "integer"
        format: "int64"
        minimum: -9223372036854775808
        maximum: 9223372036854775807
      status:
        type: "string"
        enum:
        - "OPEN"
        - "GROWING"
        - "AWAITED"
        - "CLOSED"
        - "FAILED"
        - "ARCHIVED"
        - "MISSING"
        - "REDISCOVERED"
        - "DELETED"
      storage_id:
        type: "string"
      type:
        type: "string"
        enum:
        - "FILE"
        - "DIRECTORY"
        - "SYMLINK"
      user_id:
        type: "string"
      version_id:
        type: "string"
    example:
      date_created: "date_created"
      directory_path: "directory_path"
      asset_id: "asset_id"
      version_id: "version_id"
      type: "FILE"
      file_set_status: "file_set_status"
      date_modified: "date_modified"
      size: -7746104769210155008
      file_date_modified: "2000-01-23T04:56:07.000+00:00"
      user_id: "user_id"
      format_status: "format_status"
      parent_id: "parent_id"
      storage_id: "storage_id"
      original_name: "original_name"
      checksum: "checksum"
      name: "name"
      format_id: "format_id"
      id: "id"
      file_set_id: "file_set_id"
      file_date_created: "2000-01-23T04:56:07.000+00:00"
      status: "OPEN"
  FileExistenceCheckSchema:
    type: "object"
    required:
    - "directory_path"
    - "file_name"
    properties:
      directory_path:
        type: "string"
      file_name:
        type: "string"
  FileSchema:
    type: "object"
    required:
    - "directory_path"
    - "file_set_id"
    - "original_name"
    - "type"
    properties:
      asset_id:
        type: "string"
      checksum:
        type: "string"
      date_created:
        type: "string"
        format: "date-time"
        readOnly: true
      date_modified:
        type: "string"
        format: "date-time"
        readOnly: true
      directory_path:
        type: "string"
      file_date_created:
        type: "string"
        format: "date-time"
      file_date_modified:
        type: "string"
        format: "date-time"
      file_set_id:
        type: "string"
      file_set_status:
        type: "string"
        readOnly: true
        x-nullable: true
      format_id:
        type: "string"
      format_status:
        type: "string"
        readOnly: true
        x-nullable: true
      id:
        type: "string"
        readOnly: true
      multipart_upload_url:
        type: "string"
        readOnly: true
      name:
        type: "string"
        description: "If not specified, name will be autogenerated based on `id` and\
          \ `original_name`"
      original_name:
        type: "string"
      parent_id:
        type: "string"
        x-nullable: true
      size:
        type: "integer"
        format: "int64"
        minimum: -9223372036854775808
        maximum: 9223372036854775807
      status:
        type: "string"
        enum:
        - "OPEN"
        - "GROWING"
        - "AWAITED"
        - "CLOSED"
        - "FAILED"
        - "ARCHIVED"
        - "MISSING"
        - "REDISCOVERED"
        - "DELETED"
      storage_id:
        type: "string"
      storage_method:
        type: "string"
        readOnly: true
      type:
        type: "string"
        enum:
        - "FILE"
        - "DIRECTORY"
        - "SYMLINK"
      upload_credentials:
        type: "object"
        readOnly: true
        properties: {}
      upload_filename:
        type: "string"
        readOnly: true
      upload_method:
        type: "string"
        readOnly: true
      upload_url:
        type: "string"
        description: "On a file creation for Backblaze B2 storage in case when request\
          \ to Backblaze failed, upload_url field will be empty. You can try getting\
          \ upload_url again by requesting created file with `generate_signed_post_url`\
          \ set to true. "
        readOnly: true
      url:
        type: "string"
        readOnly: true
      user_id:
        type: "string"
      version_id:
        type: "string"
    example:
      multipart_upload_url: "multipart_upload_url"
      directory_path: "directory_path"
      asset_id: "asset_id"
      upload_filename: "upload_filename"
      type: "FILE"
      storage_id: "storage_id"
      checksum: "checksum"
      upload_method: "upload_method"
      format_id: "format_id"
      id: "id"
      file_set_id: "file_set_id"
      file_date_created: "2000-01-23T04:56:07.000+00:00"
      storage_method: "storage_method"
      date_created: "2000-01-23T04:56:07.000+00:00"
      version_id: "version_id"
      url: "url"
      file_set_status: "file_set_status"
      date_modified: "2000-01-23T04:56:07.000+00:00"
      size: -7746104769210155008
      file_date_modified: "2000-01-23T04:56:07.000+00:00"
      user_id: "user_id"
      format_status: "format_status"
      parent_id: "parent_id"
      original_name: "original_name"
      name: "name"
      upload_credentials: "{}"
      upload_url: "upload_url"
      status: "OPEN"
  FileSetElasticSchema:
    type: "object"
    required:
    - "base_dir"
    - "component_ids"
    - "format_id"
    - "name"
    properties:
      asset_id:
        type: "string"
        readOnly: true
      base_dir:
        type: "string"
      component_ids:
        type: "array"
        items:
          type: "string"
      date_deleted:
        type: "string"
      deleted_by_user:
        type: "string"
        readOnly: true
      format_id:
        type: "string"
      id:
        type: "string"
        readOnly: true
      is_archive:
        type: "boolean"
      name:
        type: "string"
      original_storage_id:
        type: "string"
      status:
        type: "string"
        enum:
        - "ACTIVE"
        - "DELETED"
      storage_id:
        type: "string"
      version_id:
        type: "string"
    example:
      date_deleted: "date_deleted"
      deleted_by_user: "deleted_by_user"
      asset_id: "asset_id"
      version_id: "version_id"
      component_ids:
      - "component_ids"
      - "component_ids"
      original_storage_id: "original_storage_id"
      storage_id: "storage_id"
      base_dir: "base_dir"
      is_archive: true
      name: "name"
      format_id: "format_id"
      id: "id"
      status: "ACTIVE"
  FileSetSchema:
    type: "object"
    required:
    - "base_dir"
    - "component_ids"
    - "format_id"
    - "name"
    properties:
      asset_id:
        type: "string"
        readOnly: true
      base_dir:
        type: "string"
      component_ids:
        type: "array"
        items:
          type: "string"
      date_deleted:
        type: "string"
        format: "date-time"
      deleted_by_user:
        type: "string"
        readOnly: true
      format_id:
        type: "string"
      id:
        type: "string"
        readOnly: true
      is_archive:
        type: "boolean"
      name:
        type: "string"
      original_storage_id:
        type: "string"
      status:
        type: "string"
        enum:
        - "ACTIVE"
        - "DELETED"
      storage_id:
        type: "string"
      version_id:
        type: "string"
    example:
      date_deleted: "2000-01-23T04:56:07.000+00:00"
      deleted_by_user: "deleted_by_user"
      asset_id: "asset_id"
      version_id: "version_id"
      component_ids:
      - "component_ids"
      - "component_ids"
      original_storage_id: "original_storage_id"
      storage_id: "storage_id"
      base_dir: "base_dir"
      is_archive: true
      name: "name"
      format_id: "format_id"
      id: "id"
      status: "ACTIVE"
  FileSetSourceSchema:
    type: "object"
    required:
    - "base_dir"
    - "component_ids"
    - "format_id"
    - "name"
    - "storage_id"
    - "storage_method"
    properties:
      asset_id:
        type: "string"
        readOnly: true
      base_dir:
        type: "string"
      component_ids:
        type: "array"
        items:
          type: "string"
      date_deleted:
        type: "string"
        format: "date-time"
      deleted_by_user:
        type: "string"
        readOnly: true
      format_id:
        type: "string"
      id:
        type: "string"
        readOnly: true
      is_archive:
        type: "boolean"
      name:
        type: "string"
      original_storage_id:
        type: "string"
      status:
        type: "string"
        enum:
        - "ACTIVE"
        - "DELETED"
      storage_id:
        type: "string"
      storage_method:
        type: "string"
      version_id:
        type: "string"
    example:
      storage_method: "storage_method"
      date_deleted: "2000-01-23T04:56:07.000+00:00"
      deleted_by_user: "deleted_by_user"
      asset_id: "asset_id"
      version_id: "version_id"
      component_ids:
      - "component_ids"
      - "component_ids"
      original_storage_id: "original_storage_id"
      storage_id: "storage_id"
      base_dir: "base_dir"
      is_archive: true
      name: "name"
      format_id: "format_id"
      id: "id"
      status: "ACTIVE"
  FileSetSourcesSchema:
    type: "object"
    properties:
      first_url:
        type: "string"
        readOnly: true
      last_url:
        type: "string"
        readOnly: true
      next_url:
        type: "string"
        readOnly: true
      objects:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/FileSetSourceSchema"
      page:
        type: "integer"
        format: "int32"
        readOnly: true
        minimum: -2147483648
        maximum: 2147483647
      pages:
        type: "integer"
        format: "int32"
        readOnly: true
        minimum: -2147483648
        maximum: 2147483647
      per_page:
        type: "integer"
        format: "int32"
        readOnly: true
        minimum: -2147483648
        maximum: 2147483647
      prev_url:
        type: "string"
        readOnly: true
      total:
        type: "integer"
        format: "int64"
        readOnly: true
        minimum: -9223372036854775808
        maximum: 9223372036854775807
    example:
      per_page: -1517921766
      first_url: "first_url"
      total: 1774823812569044992
      pages: 441289069
      objects:
      - storage_method: "storage_method"
        date_deleted: "2000-01-23T04:56:07.000+00:00"
        deleted_by_user: "deleted_by_user"
        asset_id: "asset_id"
        version_id: "version_id"
        component_ids:
        - "component_ids"
        - "component_ids"
        original_storage_id: "original_storage_id"
        storage_id: "storage_id"
        base_dir: "base_dir"
        is_archive: true
        name: "name"
        format_id: "format_id"
        id: "id"
        status: "ACTIVE"
      - storage_method: "storage_method"
        date_deleted: "2000-01-23T04:56:07.000+00:00"
        deleted_by_user: "deleted_by_user"
        asset_id: "asset_id"
        version_id: "version_id"
        component_ids:
        - "component_ids"
        - "component_ids"
        original_storage_id: "original_storage_id"
        storage_id: "storage_id"
        base_dir: "base_dir"
        is_archive: true
        name: "name"
        format_id: "format_id"
        id: "id"
        status: "ACTIVE"
      next_url: "next_url"
      page: -1803530559
      prev_url: "prev_url"
      last_url: "last_url"
  FileSetsElasticSchema:
    type: "object"
    properties:
      facets:
        type: "object"
        properties: {}
      first_url:
        type: "string"
        readOnly: true
      last_url:
        type: "string"
        readOnly: true
      next_url:
        type: "string"
        readOnly: true
      objects:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/FileSetElasticSchema"
      page:
        type: "integer"
        format: "int32"
        readOnly: true
        minimum: -2147483648
        maximum: 2147483647
      pages:
        type: "integer"
        format: "int32"
        readOnly: true
        minimum: -2147483648
        maximum: 2147483647
      per_page:
        type: "integer"
        format: "int32"
        readOnly: true
        minimum: -2147483648
        maximum: 2147483647
      prev_url:
        type: "string"
        readOnly: true
      total:
        type: "integer"
        format: "int64"
        readOnly: true
        minimum: -9223372036854775808
        maximum: 9223372036854775807
    example:
      per_page: -1517921766
      first_url: "first_url"
      total: 1774823812569044992
      pages: 441289069
      objects:
      - date_deleted: "date_deleted"
        deleted_by_user: "deleted_by_user"
        asset_id: "asset_id"
        version_id: "version_id"
        component_ids:
        - "component_ids"
        - "component_ids"
        original_storage_id: "original_storage_id"
        storage_id: "storage_id"
        base_dir: "base_dir"
        is_archive: true
        name: "name"
        format_id: "format_id"
        id: "id"
        status: "ACTIVE"
      - date_deleted: "date_deleted"
        deleted_by_user: "deleted_by_user"
        asset_id: "asset_id"
        version_id: "version_id"
        component_ids:
        - "component_ids"
        - "component_ids"
        original_storage_id: "original_storage_id"
        storage_id: "storage_id"
        base_dir: "base_dir"
        is_archive: true
        name: "name"
        format_id: "format_id"
        id: "id"
        status: "ACTIVE"
      next_url: "next_url"
      page: -1803530559
      prev_url: "prev_url"
      last_url: "last_url"
      facets: "{}"
  FileSetsSchema:
    type: "object"
    properties:
      first_url:
        type: "string"
        readOnly: true
      last_url:
        type: "string"
        readOnly: true
      next_url:
        type: "string"
        readOnly: true
      objects:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/FileSetSchema"
      page:
        type: "integer"
        format: "int32"
        readOnly: true
        minimum: -2147483648
        maximum: 2147483647
      pages:
        type: "integer"
        format: "int32"
        readOnly: true
        minimum: -2147483648
        maximum: 2147483647
      per_page:
        type: "integer"
        format: "int32"
        readOnly: true
        minimum: -2147483648
        maximum: 2147483647
      prev_url:
        type: "string"
        readOnly: true
      total:
        type: "integer"
        format: "int64"
        readOnly: true
        minimum: -9223372036854775808
        maximum: 9223372036854775807
    example:
      per_page: -1517921766
      first_url: "first_url"
      total: 1774823812569044992
      pages: 441289069
      objects:
      - date_deleted: "2000-01-23T04:56:07.000+00:00"
        deleted_by_user: "deleted_by_user"
        asset_id: "asset_id"
        version_id: "version_id"
        component_ids:
        - "component_ids"
        - "component_ids"
        original_storage_id: "original_storage_id"
        storage_id: "storage_id"
        base_dir: "base_dir"
        is_archive: true
        name: "name"
        format_id: "format_id"
        id: "id"
        status: "ACTIVE"
      - date_deleted: "2000-01-23T04:56:07.000+00:00"
        deleted_by_user: "deleted_by_user"
        asset_id: "asset_id"
        version_id: "version_id"
        component_ids:
        - "component_ids"
        - "component_ids"
        original_storage_id: "original_storage_id"
        storage_id: "storage_id"
        base_dir: "base_dir"
        is_archive: true
        name: "name"
        format_id: "format_id"
        id: "id"
        status: "ACTIVE"
      next_url: "next_url"
      page: -1803530559
      prev_url: "prev_url"
      last_url: "last_url"
  FileSettingsSchema:
    type: "object"
    required:
    - "mount_point"
    properties:
      access_group_id:
        type: "string"
        x-nullable: true
      acl_template_id:
        type: "string"
        x-nullable: true
      aggregate_identical_files:
        type: "boolean"
        default: true
      aggregate_ignore:
        type: "string"
      aggregate_only_on_same_storage:
        type: "boolean"
        default: false
      allow_access_outside_scan_directories:
        type: "boolean"
        default: false
      asset_versions_suffix:
        type: "string"
      delete:
        type: "boolean"
      directory_assets_original_patterns:
        type: "string"
      directory_assets_transcode_patterns:
        type: "string"
      enable_collection_directory_mapping:
        type: "boolean"
        default: false
      enable_directory_assets:
        type: "boolean"
        default: false
      filename_is_external_id:
        type: "boolean"
        default: false
      folder_name_tags_metadata_field_name:
        type: "string"
      folder_name_tags_metadata_view_id:
        type: "string"
        x-nullable: true
      gateway_user_id:
        type: "string"
        readOnly: true
      growing_files_threshold:
        type: "integer"
        format: "int32"
        minimum: -2147483648
        maximum: 2147483647
        default: 600
      is_system:
        type: "boolean"
        default: false
      local_keyframe_creation:
        type: "boolean"
        default: false
      local_proxy_creation:
        type: "boolean"
        default: false
      metadata_view_id:
        type: "string"
        x-nullable: true
      mount_point:
        type: "string"
      public_identity:
        type: "string"
      read:
        type: "boolean"
      remote_path:
        type: "string"
      remote_storage_id:
        type: "string"
      scan:
        type: "boolean"
      scan_directories:
        type: "string"
      scan_ignore:
        type: "string"
      scan_interval_seconds:
        type: "integer"
        format: "int32"
        minimum: -2147483648
        maximum: 2147483647
        default: 5
      sidecar_metadata_required:
        type: "boolean"
      storage_addr:
        type: "string"
      title_includes_extension:
        type: "boolean"
        default: false
      transcode_ignore:
        type: "string"
      upload_files:
        type: "boolean"
        default: false
      write:
        type: "boolean"
  FileShareUploadEditSchema:
    type: "object"
    properties:
      size:
        type: "integer"
        format: "int64"
        minimum: -9223372036854775808
        maximum: 9223372036854775807
      status:
        type: "string"
        enum:
        - "OPEN"
        - "GROWING"
        - "AWAITED"
        - "CLOSED"
        - "FAILED"
        - "ARCHIVED"
        - "MISSING"
        - "REDISCOVERED"
        - "DELETED"
  FilesElasticSchema:
    type: "object"
    properties:
      facets:
        type: "object"
        properties: {}
      first_url:
        type: "string"
        readOnly: true
      last_url:
        type: "string"
        readOnly: true
      next_url:
        type: "string"
        readOnly: true
      objects:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/FileElasticSchema"
      page:
        type: "integer"
        format: "int32"
        readOnly: true
        minimum: -2147483648
        maximum: 2147483647
      pages:
        type: "integer"
        format: "int32"
        readOnly: true
        minimum: -2147483648
        maximum: 2147483647
      per_page:
        type: "integer"
        format: "int32"
        readOnly: true
        minimum: -2147483648
        maximum: 2147483647
      prev_url:
        type: "string"
        readOnly: true
      total:
        type: "integer"
        format: "int64"
        readOnly: true
        minimum: -9223372036854775808
        maximum: 9223372036854775807
    example:
      per_page: 413233370
      first_url: "first_url"
      total: 1175752406347165696
      pages: -1517921766
      objects:
      - date_created: "date_created"
        directory_path: "directory_path"
        asset_id: "asset_id"
        version_id: "version_id"
        type: "FILE"
        file_set_status: "file_set_status"
        date_modified: "date_modified"
        size: -7746104769210155008
        file_date_modified: "2000-01-23T04:56:07.000+00:00"
        user_id: "user_id"
        format_status: "format_status"
        parent_id: "parent_id"
        storage_id: "storage_id"
        original_name: "original_name"
        checksum: "checksum"
        name: "name"
        format_id: "format_id"
        id: "id"
        file_set_id: "file_set_id"
        file_date_created: "2000-01-23T04:56:07.000+00:00"
        status: "OPEN"
      - date_created: "date_created"
        directory_path: "directory_path"
        asset_id: "asset_id"
        version_id: "version_id"
        type: "FILE"
        file_set_status: "file_set_status"
        date_modified: "date_modified"
        size: -7746104769210155008
        file_date_modified: "2000-01-23T04:56:07.000+00:00"
        user_id: "user_id"
        format_status: "format_status"
        parent_id: "parent_id"
        storage_id: "storage_id"
        original_name: "original_name"
        checksum: "checksum"
        name: "name"
        format_id: "format_id"
        id: "id"
        file_set_id: "file_set_id"
        file_date_created: "2000-01-23T04:56:07.000+00:00"
        status: "OPEN"
      next_url: "next_url"
      page: 441289069
      prev_url: "prev_url"
      last_url: "last_url"
      facets: "{}"
  FilesSchema:
    type: "object"
    properties:
      first_url:
        type: "string"
        readOnly: true
      last_url:
        type: "string"
        readOnly: true
      next_url:
        type: "string"
        readOnly: true
      objects:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/FileSchema"
      page:
        type: "integer"
        format: "int32"
        readOnly: true
        minimum: -2147483648
        maximum: 2147483647
      pages:
        type: "integer"
        format: "int32"
        readOnly: true
        minimum: -2147483648
        maximum: 2147483647
      per_page:
        type: "integer"
        format: "int32"
        readOnly: true
        minimum: -2147483648
        maximum: 2147483647
      prev_url:
        type: "string"
        readOnly: true
      total:
        type: "integer"
        format: "int64"
        readOnly: true
        minimum: -9223372036854775808
        maximum: 9223372036854775807
    example:
      per_page: 413233370
      first_url: "first_url"
      total: 1175752406347165696
      pages: -1517921766
      objects:
      - multipart_upload_url: "multipart_upload_url"
        directory_path: "directory_path"
        asset_id: "asset_id"
        upload_filename: "upload_filename"
        type: "FILE"
        storage_id: "storage_id"
        checksum: "checksum"
        upload_method: "upload_method"
        format_id: "format_id"
        id: "id"
        file_set_id: "file_set_id"
        file_date_created: "2000-01-23T04:56:07.000+00:00"
        storage_method: "storage_method"
        date_created: "2000-01-23T04:56:07.000+00:00"
        version_id: "version_id"
        url: "url"
        file_set_status: "file_set_status"
        date_modified: "2000-01-23T04:56:07.000+00:00"
        size: -7746104769210155008
        file_date_modified: "2000-01-23T04:56:07.000+00:00"
        user_id: "user_id"
        format_status: "format_status"
        parent_id: "parent_id"
        original_name: "original_name"
        name: "name"
        upload_credentials: "{}"
        upload_url: "upload_url"
        status: "OPEN"
      - multipart_upload_url: "multipart_upload_url"
        directory_path: "directory_path"
        asset_id: "asset_id"
        upload_filename: "upload_filename"
        type: "FILE"
        storage_id: "storage_id"
        checksum: "checksum"
        upload_method: "upload_method"
        format_id: "format_id"
        id: "id"
        file_set_id: "file_set_id"
        file_date_created: "2000-01-23T04:56:07.000+00:00"
        storage_method: "storage_method"
        date_created: "2000-01-23T04:56:07.000+00:00"
        version_id: "version_id"
        url: "url"
        file_set_status: "file_set_status"
        date_modified: "2000-01-23T04:56:07.000+00:00"
        size: -7746104769210155008
        file_date_modified: "2000-01-23T04:56:07.000+00:00"
        user_id: "user_id"
        format_status: "format_status"
        parent_id: "parent_id"
        original_name: "original_name"
        name: "name"
        upload_credentials: "{}"
        upload_url: "upload_url"
        status: "OPEN"
      next_url: "next_url"
      page: 441289069
      prev_url: "prev_url"
      last_url: "last_url"
  FilesetTransferBaseSchema:
    type: "object"
    properties:
      asset_id:
        type: "string"
      component_ids:
        type: "array"
        items:
          type: "string"
      destination_filename:
        type: "string"
      id:
        type: "string"
        readOnly: true
      job_id:
        type: "string"
      job_steps:
        type: "object"
        properties: {}
      original_storage_id:
        type: "string"
      original_url:
        type: "string"
        format: "url"
      parent_job_id:
        type: "string"
      transfer_type:
        type: "string"
        readOnly: true
  FormatArchiveSchema:
    type: "object"
    properties:
      delete_original:
        type: "boolean"
        default: false
      destination_directory_path:
        type: "string"
      destination_file_set_name:
        type: "string"
        readOnly: true
      destination_storage_id:
        type: "string"
      destination_storage_method:
        type: "string"
      format_id:
        type: "string"
      original_file_set_id:
        type: "string"
  FormatDeleteArchiveSchema:
    type: "object"
    properties:
      file_set_id:
        type: "string"
  FormatElasticSchema:
    type: "object"
    required:
    - "name"
    properties:
      archive_status:
        type: "string"
        enum:
        - "NOT_ARCHIVED"
        - "ARCHIVING"
        - "FAILED_TO_ARCHIVE"
        - "ARCHIVED"
      asset_id:
        type: "string"
        readOnly: true
      components:
        type: "array"
        items:
          $ref: "#/definitions/ComponentSchema"
      date_deleted:
        type: "string"
      deleted_by_user:
        type: "string"
        readOnly: true
      id:
        type: "string"
        readOnly: true
      is_online:
        type: "boolean"
        default: true
      metadata:
        type: "array"
        items:
          type: "object"
          properties: {}
      name:
        type: "string"
      status:
        type: "string"
        enum:
        - "ACTIVE"
        - "DELETED"
      storage_methods:
        type: "string"
      user_id:
        type: "string"
      version_id:
        type: "string"
    example:
      components:
      - metadata: "{}"
        name: "name"
        id: "id"
        type: "VIDEO"
      - metadata: "{}"
        name: "name"
        id: "id"
        type: "VIDEO"
      metadata:
      - "{}"
      - "{}"
      date_deleted: "date_deleted"
      deleted_by_user: "deleted_by_user"
      asset_id: "asset_id"
      version_id: "version_id"
      archive_status: "NOT_ARCHIVED"
      user_id: "user_id"
      name: "name"
      id: "id"
      is_online: true
      storage_methods: "storage_methods"
      status: "ACTIVE"
  FormatRestoreSchema:
    type: "object"
    properties:
      destination_directory_path:
        type: "string"
        x-nullable: true
      destination_storage_id:
        type: "string"
      storage_id:
        type: "string"
        description: "Deprecated field. Use destination_storage_id instead"
  FormatSchema:
    type: "object"
    required:
    - "name"
    properties:
      archive_status:
        type: "string"
        enum:
        - "NOT_ARCHIVED"
        - "ARCHIVING"
        - "FAILED_TO_ARCHIVE"
        - "ARCHIVED"
      asset_id:
        type: "string"
        readOnly: true
      components:
        type: "array"
        items:
          $ref: "#/definitions/ComponentSchema"
      date_deleted:
        type: "string"
        format: "date-time"
      deleted_by_user:
        type: "string"
        readOnly: true
      id:
        type: "string"
        readOnly: true
      is_online:
        type: "boolean"
        default: true
      metadata:
        type: "array"
        items:
          type: "object"
          properties: {}
      name:
        type: "string"
      status:
        type: "string"
        enum:
        - "ACTIVE"
        - "DELETED"
      storage_methods:
        type: "string"
      user_id:
        type: "string"
      version_id:
        type: "string"
    example:
      components:
      - metadata: "{}"
        name: "name"
        id: "id"
        type: "VIDEO"
      - metadata: "{}"
        name: "name"
        id: "id"
        type: "VIDEO"
      metadata:
      - "{}"
      - "{}"
      date_deleted: "2000-01-23T04:56:07.000+00:00"
      deleted_by_user: "deleted_by_user"
      asset_id: "asset_id"
      version_id: "version_id"
      archive_status: "NOT_ARCHIVED"
      user_id: "user_id"
      name: "name"
      id: "id"
      is_online: true
      storage_methods: "storage_methods"
      status: "ACTIVE"
  FormatUpdateSchema:
    type: "object"
    required:
    - "name"
    properties:
      archive_status:
        type: "string"
        enum:
        - "NOT_ARCHIVED"
        - "ARCHIVING"
        - "FAILED_TO_ARCHIVE"
        - "ARCHIVED"
      asset_id:
        type: "string"
        readOnly: true
      components:
        type: "array"
        items:
          $ref: "#/definitions/ComponentSchema"
      date_deleted:
        type: "string"
        format: "date-time"
      deleted_by_user:
        type: "string"
        readOnly: true
      id:
        type: "string"
        readOnly: true
      is_online:
        type: "boolean"
        default: true
      metadata:
        type: "array"
        items:
          type: "object"
          properties: {}
      name:
        type: "string"
      status:
        type: "string"
        enum:
        - "ACTIVE"
        - "DELETED"
      storage_methods:
        type: "string"
      user_id:
        type: "string"
      version_id:
        type: "string"
      warnings:
        type: "array"
        readOnly: true
        items:
          type: "string"
    example:
      components:
      - metadata: "{}"
        name: "name"
        id: "id"
        type: "VIDEO"
      - metadata: "{}"
        name: "name"
        id: "id"
        type: "VIDEO"
      metadata:
      - "{}"
      - "{}"
      date_deleted: "2000-01-23T04:56:07.000+00:00"
      warnings:
      - "warnings"
      - "warnings"
      deleted_by_user: "deleted_by_user"
      asset_id: "asset_id"
      version_id: "version_id"
      archive_status: "NOT_ARCHIVED"
      user_id: "user_id"
      name: "name"
      id: "id"
      is_online: true
      storage_methods: "storage_methods"
      status: "ACTIVE"
  FormatsElasticSchema:
    type: "object"
    properties:
      facets:
        type: "object"
        properties: {}
      first_url:
        type: "string"
        readOnly: true
      last_url:
        type: "string"
        readOnly: true
      next_url:
        type: "string"
        readOnly: true
      objects:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/FormatElasticSchema"
      page:
        type: "integer"
        format: "int32"
        readOnly: true
        minimum: -2147483648
        maximum: 2147483647
      pages:
        type: "integer"
        format: "int32"
        readOnly: true
        minimum: -2147483648
        maximum: 2147483647
      per_page:
        type: "integer"
        format: "int32"
        readOnly: true
        minimum: -2147483648
        maximum: 2147483647
      prev_url:
        type: "string"
        readOnly: true
      total:
        type: "integer"
        format: "int64"
        readOnly: true
        minimum: -9223372036854775808
        maximum: 9223372036854775807
    example:
      per_page: -1517921766
      first_url: "first_url"
      total: 1774823812569044992
      pages: 441289069
      objects:
      - components:
        - metadata: "{}"
          name: "name"
          id: "id"
          type: "VIDEO"
        - metadata: "{}"
          name: "name"
          id: "id"
          type: "VIDEO"
        metadata:
        - "{}"
        - "{}"
        date_deleted: "date_deleted"
        deleted_by_user: "deleted_by_user"
        asset_id: "asset_id"
        version_id: "version_id"
        archive_status: "NOT_ARCHIVED"
        user_id: "user_id"
        name: "name"
        id: "id"
        is_online: true
        storage_methods: "storage_methods"
        status: "ACTIVE"
      - components:
        - metadata: "{}"
          name: "name"
          id: "id"
          type: "VIDEO"
        - metadata: "{}"
          name: "name"
          id: "id"
          type: "VIDEO"
        metadata:
        - "{}"
        - "{}"
        date_deleted: "date_deleted"
        deleted_by_user: "deleted_by_user"
        asset_id: "asset_id"
        version_id: "version_id"
        archive_status: "NOT_ARCHIVED"
        user_id: "user_id"
        name: "name"
        id: "id"
        is_online: true
        storage_methods: "storage_methods"
        status: "ACTIVE"
      next_url: "next_url"
      page: -1803530559
      prev_url: "prev_url"
      last_url: "last_url"
      facets: "{}"
  FormatsSchema:
    type: "object"
    properties:
      first_url:
        type: "string"
        readOnly: true
      last_url:
        type: "string"
        readOnly: true
      next_url:
        type: "string"
        readOnly: true
      objects:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/FormatSchema"
      page:
        type: "integer"
        format: "int32"
        readOnly: true
        minimum: -2147483648
        maximum: 2147483647
      pages:
        type: "integer"
        format: "int32"
        readOnly: true
        minimum: -2147483648
        maximum: 2147483647
      per_page:
        type: "integer"
        format: "int32"
        readOnly: true
        minimum: -2147483648
        maximum: 2147483647
      prev_url:
        type: "string"
        readOnly: true
      total:
        type: "integer"
        format: "int64"
        readOnly: true
        minimum: -9223372036854775808
        maximum: 9223372036854775807
    example:
      per_page: -1517921766
      first_url: "first_url"
      total: 1774823812569044992
      pages: 441289069
      objects:
      - components:
        - metadata: "{}"
          name: "name"
          id: "id"
          type: "VIDEO"
        - metadata: "{}"
          name: "name"
          id: "id"
          type: "VIDEO"
        metadata:
        - "{}"
        - "{}"
        date_deleted: "2000-01-23T04:56:07.000+00:00"
        deleted_by_user: "deleted_by_user"
        asset_id: "asset_id"
        version_id: "version_id"
        archive_status: "NOT_ARCHIVED"
        user_id: "user_id"
        name: "name"
        id: "id"
        is_online: true
        storage_methods: "storage_methods"
        status: "ACTIVE"
      - components:
        - metadata: "{}"
          name: "name"
          id: "id"
          type: "VIDEO"
        - metadata: "{}"
          name: "name"
          id: "id"
          type: "VIDEO"
        metadata:
        - "{}"
        - "{}"
        date_deleted: "2000-01-23T04:56:07.000+00:00"
        deleted_by_user: "deleted_by_user"
        asset_id: "asset_id"
        version_id: "version_id"
        archive_status: "NOT_ARCHIVED"
        user_id: "user_id"
        name: "name"
        id: "id"
        is_online: true
        storage_methods: "storage_methods"
        status: "ACTIVE"
      next_url: "next_url"
      page: -1803530559
      prev_url: "prev_url"
      last_url: "last_url"
  FtpSettingsSchema:
    type: "object"
    required:
    - "address"
    - "password"
    - "user"
    properties:
      address:
        type: "string"
      delete:
        type: "boolean"
      is_system:
        type: "boolean"
        default: false
      password:
        type: "string"
      read:
        type: "boolean"
      scan:
        type: "boolean"
      user:
        type: "string"
      write:
        type: "boolean"
  GatewayReportSchema:
    type: "object"
    properties:
      await_checksum_files_number:
        type: "integer"
        format: "int32"
        minimum: -2147483648
        maximum: 2147483647
        default: 0
        x-nullable: true
      date_reported:
        type: "string"
        format: "date-time"
        readOnly: true
      empty_files_number:
        type: "integer"
        format: "int32"
        minimum: -2147483648
        maximum: 2147483647
        default: 0
        x-nullable: true
      error_log_lines:
        type: "array"
        items:
          type: "string"
          maxLength: 2000
        maxItems: 10
      exported_files_number:
        type: "integer"
        format: "int32"
        minimum: -2147483648
        maximum: 2147483647
        default: 0
        x-nullable: true
      faulty_files_number:
        type: "integer"
        format: "int32"
        minimum: -2147483648
        maximum: 2147483647
        default: 0
        x-nullable: true
      host_info:
        type: "string"
        maxLength: 1000
      host_name:
        type: "string"
        maxLength: 1000
      id:
        type: "string"
        readOnly: true
      ingested_files_number:
        type: "integer"
        format: "int32"
        minimum: -2147483648
        maximum: 2147483647
        default: 0
        x-nullable: true
      ingested_files_uploads_number:
        type: "integer"
        format: "int32"
        minimum: -2147483648
        maximum: 2147483647
        default: 0
        x-nullable: true
      ingesting_files_number:
        type: "integer"
        format: "int32"
        minimum: -2147483648
        maximum: 2147483647
        default: 0
        x-nullable: true
      last_scan_time:
        type: "integer"
        format: "int32"
        minimum: -2147483648
        maximum: 2147483647
        default: 0
        x-nullable: true
      log_lines:
        type: "array"
        items:
          type: "string"
          maxLength: 2000
        maxItems: 50
      missing_files_number:
        type: "integer"
        format: "int32"
        minimum: -2147483648
        maximum: 2147483647
        default: 0
        x-nullable: true
      scanned_files_number:
        type: "integer"
        format: "int32"
        minimum: -2147483648
        maximum: 2147483647
        default: 0
        x-nullable: true
      skipped_files_number:
        type: "integer"
        format: "int32"
        minimum: -2147483648
        maximum: 2147483647
        default: 0
        x-nullable: true
      start_last_date:
        type: "string"
        format: "date-time"
        readOnly: true
      start_status:
        type: "string"
        enum:
        - "SUCCESS"
        - "FAILED"
      start_status_message:
        type: "string"
        maxLength: 1000
      status:
        type: "string"
        enum:
        - "OFFLINE"
        - "LIVE"
        - "UNKNOWN"
      storage_id:
        type: "string"
        readOnly: true
      total_files_number:
        type: "integer"
        format: "int32"
        minimum: -2147483648
        maximum: 2147483647
        default: 0
        x-nullable: true
      total_folders_number:
        type: "integer"
        format: "int32"
        minimum: -2147483648
        maximum: 2147483647
        default: 0
        x-nullable: true
      version:
        type: "string"
        maxLength: 100
      waiting_preview_transcode_jobs_number:
        type: "integer"
        format: "int32"
        minimum: -2147483648
        maximum: 2147483647
        default: 0
        x-nullable: true
      waiting_transcode_jobs_number:
        type: "integer"
        format: "int32"
        minimum: -2147483648
        maximum: 2147483647
        default: 0
        x-nullable: true
    example:
      total_files_number: 1024900291
      await_checksum_files_number: -1803530559
      date_reported: "2000-01-23T04:56:07.000+00:00"
      faulty_files_number: 413233370
      ingested_files_uploads_number: -1158723813
      empty_files_number: 441289069
      ingested_files_number: 273751188
      ingesting_files_number: 885365090
      missing_files_number: -594390510
      waiting_preview_transcode_jobs_number: -1707401670
      storage_id: "storage_id"
      id: "id"
      scanned_files_number: -1276840939
      host_info: "host_info"
      error_log_lines:
      - "error_log_lines"
      - "error_log_lines"
      - "error_log_lines"
      - "error_log_lines"
      - "error_log_lines"
      - "error_log_lines"
      - "error_log_lines"
      - "error_log_lines"
      - "error_log_lines"
      - "error_log_lines"
      start_status_message: "start_status_message"
      total_folders_number: -1618552611
      log_lines:
      - "log_lines"
      - "log_lines"
      - "log_lines"
      - "log_lines"
      - "log_lines"
      - "log_lines"
      - "log_lines"
      - "log_lines"
      - "log_lines"
      - "log_lines"
      version: "version"
      start_status: "SUCCESS"
      exported_files_number: -1517921766
      waiting_transcode_jobs_number: -1507784385
      skipped_files_number: -366958557
      start_last_date: "2000-01-23T04:56:07.000+00:00"
      last_scan_time: 1847456234
      host_name: "host_name"
      status: "OFFLINE"
  GatewayStatusSchema:
    type: "object"
    properties:
      status:
        type: "string"
  GoogleCloudStorageSettingsSchema:
    type: "object"
    required:
    - "bucket"
    - "json_key"
    - "path"
    - "project"
    properties:
      access_group_id:
        type: "string"
        x-nullable: true
      acl_template_id:
        type: "string"
        x-nullable: true
      add_uuid_to_filenames:
        type: "boolean"
        default: true
      aggregate_identical_files:
        type: "boolean"
        default: true
      aggregate_ignore:
        type: "string"
      aggregate_only_on_same_storage:
        type: "boolean"
        default: false
      bucket:
        type: "string"
      delete:
        type: "boolean"
      enable_collection_directory_mapping:
        type: "boolean"
        default: false
      filename_is_external_id:
        type: "boolean"
        default: false
      folder_name_tags_metadata_field_name:
        type: "string"
      folder_name_tags_metadata_view_id:
        type: "string"
        x-nullable: true
      is_system:
        type: "boolean"
        default: false
      json_key:
        type: "string"
      metadata_view_id:
        type: "string"
        x-nullable: true
      path:
        type: "string"
      preload_edge_jobs:
        type: "integer"
        format: "int32"
        minimum: -2147483648
        maximum: 2147483647
        x-nullable: true
      project:
        type: "string"
      read:
        type: "boolean"
      root_collection_id:
        type: "string"
      scan:
        type: "boolean"
      scan_directories:
        type: "string"
      scan_ignore:
        type: "string"
      sidecar_metadata_required:
        type: "boolean"
      title_includes_extension:
        type: "boolean"
        default: false
      transcode_ignore:
        type: "string"
      write:
        type: "boolean"
  HttpSettingsSchema:
    type: "object"
    required:
    - "address"
    properties:
      address:
        type: "string"
      auto:
        type: "boolean"
      delete:
        type: "boolean"
      is_system:
        type: "boolean"
        default: false
      read:
        type: "boolean"
      scan:
        type: "boolean"
  ISGHandlerURLSchema:
    type: "object"
    properties:
      url:
        type: "string"
    example:
      url: "url"
  IconikEdgeTranscoderSchema:
    type: "object"
    properties:
      local:
        type: "boolean"
        default: false
      max_transcoding_jobs:
        type: "integer"
        format: "int32"
        minimum: 1
  IconikStorageGatewayEventSchema:
    type: "object"
    required:
    - "type"
    properties:
      data:
        type: "object"
        properties: {}
      date_created:
        type: "string"
        format: "date-time"
        readOnly: true
      id:
        type: "string"
        readOnly: true
      type:
        type: "string"
        enum:
        - "RESTART"
        - "DOWNLOAD"
        - "DOWNLOAD_ABORT"
        - "DOWNLOAD_CHANGE_PRIORITY"
        - "UPLOAD"
        - "UPLOAD_ABORT"
        - "UPLOAD_CHANGE_PRIORITY"
        - "INGEST_UPLOAD"
        - "DELETE"
        - "TRANSCODE"
        - "ASSET_MERGED"
        - "TRANSCODE_ABORT"
        - "TRANSCODE_CHANGE_PRIORITY"
        - "REQUEST_COLLECTION_MAP"
        - "COLLECTION_DELETED"
    example:
      data: "{}"
      date_created: "2000-01-23T04:56:07.000+00:00"
      id: "id"
      type: "RESTART"
  IconikStorageGatewayEventsPurgeSchema:
    type: "object"
    required:
    - "event_ids"
    properties:
      event_ids:
        type: "array"
        items:
          type: "string"
        maxItems: 100
        minItems: 1
  IconikStorageGatewayEventsSchema:
    type: "object"
    properties:
      objects:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/IconikStorageGatewayEventSchema"
    example:
      objects:
      - data: "{}"
        date_created: "2000-01-23T04:56:07.000+00:00"
        id: "id"
        type: "RESTART"
      - data: "{}"
        date_created: "2000-01-23T04:56:07.000+00:00"
        id: "id"
        type: "RESTART"
  ImageMagickSettingsSchema:
    type: "object"
    properties:
      data:
        type: "string"
      local:
        type: "boolean"
      overlay_coordinates:
        type: "string"
        x-nullable: true
      overlay_url:
        type: "string"
        x-nullable: true
  JobsPrioritySchema:
    type: "object"
    required:
    - "job_ids"
    - "priority"
    properties:
      job_ids:
        type: "array"
        items:
          type: "string"
        maxItems: 500
        minItems: 1
      priority:
        type: "integer"
        format: "int32"
        minimum: 1
        maximum: 10
  JobsStateSchema:
    type: "object"
    required:
    - "action"
    - "job_ids"
    properties:
      action:
        type: "string"
        enum:
        - "RESTART"
        - "ABORT"
      job_ids:
        type: "array"
        items:
          type: "string"
        maxItems: 500
        minItems: 1
  KeyframeBaseSchema:
    type: "object"
    required:
    - "type"
    properties:
      filename:
        type: "string"
      format:
        type: "string"
      is_custom_keyframe:
        type: "boolean"
      is_public:
        type: "boolean"
        readOnly: true
      name:
        type: "string"
      resolution:
        $ref: "#/definitions/ResolutionTypeSchema"
      rotation:
        type: "integer"
        format: "int32"
        minimum: -2147483648
        maximum: 2147483647
        x-nullable: true
      size:
        type: "integer"
        format: "int64"
        minimum: -9223372036854775808
        maximum: 9223372036854775807
        x-nullable: true
      status:
        type: "string"
        enum:
        - "OPEN"
        - "GROWING"
        - "AWAITED"
        - "CLOSED"
        - "FAILED"
        - "ARCHIVED"
        - "MISSING"
        - "REDISCOVERED"
        - "DELETED"
      time_code:
        $ref: "#/definitions/TimeCodeTypeSchema"
      type:
        type: "string"
        enum:
        - "KEYFRAME_MAP"
        - "KEYFRAME"
        - "POSTER"
      url:
        type: "string"
        readOnly: true
  KeyframeCreateSchema:
    type: "object"
    required:
    - "storage_id"
    - "type"
    properties:
      asset_id:
        type: "string"
        x-nullable: true
      collection_id:
        type: "string"
        x-nullable: true
      filename:
        type: "string"
      format:
        type: "string"
      id:
        type: "string"
        readOnly: true
      is_custom_keyframe:
        type: "boolean"
      is_public:
        type: "boolean"
        readOnly: true
      name:
        type: "string"
      resolution:
        $ref: "#/definitions/ResolutionTypeSchema"
      rotation:
        type: "integer"
        format: "int32"
        minimum: -2147483648
        maximum: 2147483647
        x-nullable: true
      size:
        type: "integer"
        format: "int64"
        minimum: -9223372036854775808
        maximum: 9223372036854775807
        x-nullable: true
      status:
        type: "string"
        enum:
        - "OPEN"
        - "GROWING"
        - "AWAITED"
        - "CLOSED"
        - "FAILED"
        - "ARCHIVED"
        - "MISSING"
        - "REDISCOVERED"
        - "DELETED"
      storage_id:
        type: "string"
      storage_method:
        type: "string"
        readOnly: true
      time_code:
        $ref: "#/definitions/TimeCodeTypeSchema"
      type:
        type: "string"
        enum:
        - "KEYFRAME_MAP"
        - "KEYFRAME"
        - "POSTER"
      upload_credentials:
        type: "object"
        readOnly: true
        properties: {}
      upload_method:
        type: "string"
        readOnly: true
      upload_url:
        type: "string"
        readOnly: true
      url:
        type: "string"
        readOnly: true
      version_id:
        type: "string"
        x-nullable: true
    example:
      storage_method: "storage_method"
      rotation: -1803530559
      format: "format"
      asset_id: "asset_id"
      version_id: "version_id"
      is_custom_keyframe: true
      type: "KEYFRAME_MAP"
      resolution:
        width: 441289069
        height: -1803530559
      url: "url"
      collection_id: "collection_id"
      filename: "filename"
      size: 1895322125605019648
      storage_id: "storage_id"
      is_public: true
      name: "name"
      time_code:
        time_base:
          denominator: -1158723813
          numerator: 885365090
        is_drop_frame: true
        frames_number: 1175752406347165696
      upload_method: "upload_method"
      upload_credentials: "{}"
      upload_url: "upload_url"
      id: "id"
      status: "OPEN"
  KeyframeSchema:
    type: "object"
    required:
    - "storage_id"
    - "type"
    properties:
      asset_id:
        type: "string"
        x-nullable: true
      collection_id:
        type: "string"
        x-nullable: true
      filename:
        type: "string"
      format:
        type: "string"
      id:
        type: "string"
        readOnly: true
      is_custom_keyframe:
        type: "boolean"
      is_public:
        type: "boolean"
        readOnly: true
      name:
        type: "string"
      resolution:
        $ref: "#/definitions/ResolutionTypeSchema"
      rotation:
        type: "integer"
        format: "int32"
        minimum: -2147483648
        maximum: 2147483647
        x-nullable: true
      size:
        type: "integer"
        format: "int64"
        minimum: -9223372036854775808
        maximum: 9223372036854775807
        x-nullable: true
      status:
        type: "string"
        enum:
        - "OPEN"
        - "GROWING"
        - "AWAITED"
        - "CLOSED"
        - "FAILED"
        - "ARCHIVED"
        - "MISSING"
        - "REDISCOVERED"
        - "DELETED"
      storage_id:
        type: "string"
      storage_method:
        type: "string"
        readOnly: true
      time_code:
        $ref: "#/definitions/TimeCodeTypeSchema"
      type:
        type: "string"
        enum:
        - "KEYFRAME_MAP"
        - "KEYFRAME"
        - "POSTER"
      upload_credentials:
        type: "object"
        readOnly: true
        properties: {}
      upload_method:
        type: "string"
        readOnly: true
      upload_url:
        type: "string"
        readOnly: true
      url:
        type: "string"
        readOnly: true
      version_id:
        type: "string"
        x-nullable: true
    example:
      storage_method: "storage_method"
      rotation: -1517921766
      format: "format"
      asset_id: "asset_id"
      version_id: "version_id"
      is_custom_keyframe: true
      type: "KEYFRAME_MAP"
      resolution:
        width: 441289069
        height: -1803530559
      url: "url"
      collection_id: "collection_id"
      filename: "filename"
      size: 1774823812569044992
      storage_id: "storage_id"
      is_public: true
      name: "name"
      time_code:
        time_base:
          denominator: -1158723813
          numerator: 885365090
        is_drop_frame: true
        frames_number: 1175752406347165696
      upload_method: "upload_method"
      upload_credentials: "{}"
      upload_url: "upload_url"
      id: "id"
      status: "OPEN"
  KeyframeUpdateSchema:
    type: "object"
    required:
    - "type"
    properties:
      filename:
        type: "string"
      format:
        type: "string"
      is_custom_keyframe:
        type: "boolean"
      is_public:
        type: "boolean"
        readOnly: true
      name:
        type: "string"
      resolution:
        $ref: "#/definitions/ResolutionTypeSchema"
      rotation:
        type: "integer"
        format: "int32"
        minimum: -2147483648
        maximum: 2147483647
        x-nullable: true
      size:
        type: "integer"
        format: "int64"
        minimum: -9223372036854775808
        maximum: 9223372036854775807
        x-nullable: true
      status:
        type: "string"
        enum:
        - "OPEN"
        - "GROWING"
        - "AWAITED"
        - "CLOSED"
        - "FAILED"
        - "ARCHIVED"
        - "MISSING"
        - "REDISCOVERED"
        - "DELETED"
      storage_id:
        type: "string"
      time_code:
        $ref: "#/definitions/TimeCodeTypeSchema"
      type:
        type: "string"
        enum:
        - "KEYFRAME_MAP"
        - "KEYFRAME"
        - "POSTER"
      url:
        type: "string"
        readOnly: true
  KeyframesSchema:
    type: "object"
    properties:
      first_url:
        type: "string"
        readOnly: true
      last_url:
        type: "string"
        readOnly: true
      next_url:
        type: "string"
        readOnly: true
      objects:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/KeyframeSchema"
      page:
        type: "integer"
        format: "int32"
        readOnly: true
        minimum: -2147483648
        maximum: 2147483647
      pages:
        type: "integer"
        format: "int32"
        readOnly: true
        minimum: -2147483648
        maximum: 2147483647
      per_page:
        type: "integer"
        format: "int32"
        readOnly: true
        minimum: -2147483648
        maximum: 2147483647
      prev_url:
        type: "string"
        readOnly: true
      total:
        type: "integer"
        format: "int64"
        readOnly: true
        minimum: -9223372036854775808
        maximum: 9223372036854775807
    example:
      per_page: -1517921766
      first_url: "first_url"
      total: 1774823812569044992
      pages: 441289069
      objects:
      - storage_method: "storage_method"
        rotation: -1517921766
        format: "format"
        asset_id: "asset_id"
        version_id: "version_id"
        is_custom_keyframe: true
        type: "KEYFRAME_MAP"
        resolution:
          width: 441289069
          height: -1803530559
        url: "url"
        collection_id: "collection_id"
        filename: "filename"
        size: 1774823812569044992
        storage_id: "storage_id"
        is_public: true
        name: "name"
        time_code:
          time_base:
            denominator: -1158723813
            numerator: 885365090
          is_drop_frame: true
          frames_number: 1175752406347165696
        upload_method: "upload_method"
        upload_credentials: "{}"
        upload_url: "upload_url"
        id: "id"
        status: "OPEN"
      - storage_method: "storage_method"
        rotation: -1517921766
        format: "format"
        asset_id: "asset_id"
        version_id: "version_id"
        is_custom_keyframe: true
        type: "KEYFRAME_MAP"
        resolution:
          width: 441289069
          height: -1803530559
        url: "url"
        collection_id: "collection_id"
        filename: "filename"
        size: 1774823812569044992
        storage_id: "storage_id"
        is_public: true
        name: "name"
        time_code:
          time_base:
            denominator: -1158723813
            numerator: 885365090
          is_drop_frame: true
          frames_number: 1175752406347165696
        upload_method: "upload_method"
        upload_credentials: "{}"
        upload_url: "upload_url"
        id: "id"
        status: "OPEN"
      next_url: "next_url"
      page: -1803530559
      prev_url: "prev_url"
      last_url: "last_url"
  ListObjectsSchema:
    type: "object"
    properties:
      first_url:
        type: "string"
        readOnly: true
      last_url:
        type: "string"
        readOnly: true
      next_url:
        type: "string"
        readOnly: true
      page:
        type: "integer"
        format: "int32"
        readOnly: true
        minimum: -2147483648
        maximum: 2147483647
      pages:
        type: "integer"
        format: "int32"
        readOnly: true
        minimum: -2147483648
        maximum: 2147483647
      per_page:
        type: "integer"
        format: "int32"
        readOnly: true
        minimum: -2147483648
        maximum: 2147483647
      prev_url:
        type: "string"
        readOnly: true
      total:
        type: "integer"
        format: "int64"
        readOnly: true
        minimum: -9223372036854775808
        maximum: 9223372036854775807
  MoveAssetResourceSchema:
    type: "object"
    required:
    - "destination_asset_id"
    - "destination_version_id"
    - "source_version_id"
    properties:
      destination_asset_id:
        type: "string"
      destination_version_id:
        type: "string"
      source_version_id:
        type: "string"
  MultiPartURLsSchema:
    type: "object"
    properties:
      abort_url:
        type: "string"
        readOnly: true
      complete_url:
        type: "string"
        readOnly: true
      list_parts_url:
        type: "array"
        readOnly: true
        items:
          type: "string"
    example:
      list_parts_url:
      - "list_parts_url"
      - "list_parts_url"
      abort_url: "abort_url"
      complete_url: "complete_url"
  MultiPartUploadComposeURLSchema:
    type: "object"
    properties:
      compose_url:
        type: "string"
        readOnly: true
      delete_url:
        type: "string"
        readOnly: true
      key:
        type: "string"
        readOnly: true
      url:
        type: "string"
        readOnly: true
    example:
      delete_url: "delete_url"
      key: "key"
      url: "url"
      compose_url: "compose_url"
  MultiPartUploadURLSchema:
    type: "object"
    properties:
      delete_url:
        type: "string"
        readOnly: true
      download_url:
        type: "string"
        readOnly: true
      key:
        type: "string"
        readOnly: true
      number:
        type: "integer"
        format: "int32"
        readOnly: true
      url:
        type: "string"
        readOnly: true
    example:
      number: 0
      download_url: "download_url"
      delete_url: "delete_url"
      key: "key"
      url: "url"
  MultiPartUploadURLsSchema:
    type: "object"
    properties:
      objects:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/MultiPartUploadURLSchema"
    example:
      objects:
      - number: 0
        download_url: "download_url"
        delete_url: "delete_url"
        key: "key"
        url: "url"
      - number: 0
        download_url: "download_url"
        delete_url: "delete_url"
        key: "key"
        url: "url"
  MultipartB2CancelUpload:
    type: "object"
    required:
    - "upload_file_id"
    properties:
      upload_file_id:
        type: "string"
  MultipartB2FinishUpload:
    type: "object"
    required:
    - "sha1_list"
    - "upload_file_id"
    properties:
      sha1_list:
        type: "array"
        items:
          type: "string"
      upload_file_id:
        type: "string"
  MultipartB2StartUpload:
    type: "object"
    properties:
      authorization_token:
        type: "string"
        readOnly: true
      error:
        type: "string"
        readOnly: true
      error_code:
        type: "string"
        readOnly: true
      status:
        type: "string"
        readOnly: true
      upload_file_id:
        type: "string"
        x-nullable: true
      upload_url:
        type: "string"
        readOnly: true
    example:
      upload_file_id: "upload_file_id"
      authorization_token: "authorization_token"
      upload_url: "upload_url"
      error_code: "error_code"
      error: "error"
      status: "status"
  MultipartUploadCleanupSchema:
    type: "object"
    required:
    - "parts_number"
    properties:
      parts_group_number:
        type: "integer"
        format: "int64"
        minimum: -9223372036854775808
        maximum: 9223372036854775807
        x-nullable: true
      parts_number:
        type: "integer"
        format: "int64"
        minimum: 1
      temporary:
        type: "boolean"
        default: false
  MultipartUploadComposeSchema:
    type: "object"
    properties:
      content_type:
        type: "string"
        x-nullable: true
      parts_group:
        type: "integer"
        format: "int64"
        minimum: -9223372036854775808
        maximum: 9223372036854775807
        x-nullable: true
  MultipartUploadSchema:
    type: "object"
    required:
    - "parts_range"
    properties:
      parts_group:
        type: "integer"
        format: "int64"
        minimum: -9223372036854775808
        maximum: 9223372036854775807
        x-nullable: true
      parts_range:
        type: "array"
        items:
          type: "string"
  PortalSettingsSchema:
    type: "object"
    properties:
      delete:
        type: "boolean"
      is_system:
        type: "boolean"
        default: false
      read:
        type: "boolean"
      scan:
        type: "boolean"
      write:
        type: "boolean"
  ProxiesSchema:
    type: "object"
    properties:
      first_url:
        type: "string"
        readOnly: true
      last_url:
        type: "string"
        readOnly: true
      next_url:
        type: "string"
        readOnly: true
      objects:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/ProxySchema"
      page:
        type: "integer"
        format: "int32"
        readOnly: true
        minimum: -2147483648
        maximum: 2147483647
      pages:
        type: "integer"
        format: "int32"
        readOnly: true
        minimum: -2147483648
        maximum: 2147483647
      per_page:
        type: "integer"
        format: "int32"
        readOnly: true
        minimum: -2147483648
        maximum: 2147483647
      prev_url:
        type: "string"
        readOnly: true
      total:
        type: "integer"
        format: "int64"
        readOnly: true
        minimum: -9223372036854775808
        maximum: 9223372036854775807
    example:
      per_page: -1158723813
      first_url: "first_url"
      total: 3802614113523499008
      pages: 273751188
      objects:
      - multipart_upload_url: "multipart_upload_url"
        storage_method: "storage_method"
        rotation: 441289069
        format: "format"
        asset_id: "asset_id"
        version_id: "version_id"
        is_drop_frame: true
        frame_rate: "frame_rate"
        resolution:
          width: 441289069
          height: -1803530559
        url: "url"
        bit_rate: -1803530559
        codec: "codec"
        filename: "filename"
        size: -6519424345728851968
        storage_id: "storage_id"
        is_public: true
        name: "name"
        start_time_code: "start_time_code"
        upload_method: "upload_method"
        upload_credentials: "{}"
        upload_url: "upload_url"
        id: "id"
        status: "OPEN"
      - multipart_upload_url: "multipart_upload_url"
        storage_method: "storage_method"
        rotation: 441289069
        format: "format"
        asset_id: "asset_id"
        version_id: "version_id"
        is_drop_frame: true
        frame_rate: "frame_rate"
        resolution:
          width: 441289069
          height: -1803530559
        url: "url"
        bit_rate: -1803530559
        codec: "codec"
        filename: "filename"
        size: -6519424345728851968
        storage_id: "storage_id"
        is_public: true
        name: "name"
        start_time_code: "start_time_code"
        upload_method: "upload_method"
        upload_credentials: "{}"
        upload_url: "upload_url"
        id: "id"
        status: "OPEN"
      next_url: "next_url"
      page: 413233370
      prev_url: "prev_url"
      last_url: "last_url"
  ProxyBaseSchema:
    type: "object"
    properties:
      asset_id:
        type: "string"
      bit_rate:
        type: "integer"
        format: "int32"
        minimum: -2147483648
        maximum: 2147483647
      codec:
        type: "string"
      filename:
        type: "string"
      format:
        type: "string"
      frame_rate:
        type: "string"
        x-nullable: true
      id:
        type: "string"
        readOnly: true
      is_drop_frame:
        type: "boolean"
        x-nullable: true
      is_public:
        type: "boolean"
        readOnly: true
      name:
        type: "string"
      resolution:
        $ref: "#/definitions/ResolutionTypeSchema"
      rotation:
        type: "integer"
        format: "int32"
        minimum: -2147483648
        maximum: 2147483647
        x-nullable: true
      size:
        type: "integer"
        format: "int64"
        minimum: -9223372036854775808
        maximum: 9223372036854775807
        x-nullable: true
      start_time_code:
        type: "string"
        x-nullable: true
      status:
        type: "string"
        enum:
        - "OPEN"
        - "GROWING"
        - "AWAITED"
        - "CLOSED"
        - "FAILED"
        - "ARCHIVED"
        - "MISSING"
        - "REDISCOVERED"
        - "DELETED"
      url:
        type: "string"
        readOnly: true
      version_id:
        type: "string"
        x-nullable: true
  ProxyCreateSchema:
    type: "object"
    required:
    - "storage_id"
    properties:
      asset_id:
        type: "string"
      bit_rate:
        type: "integer"
        format: "int32"
        minimum: -2147483648
        maximum: 2147483647
      codec:
        type: "string"
      filename:
        type: "string"
      format:
        type: "string"
      frame_rate:
        type: "string"
        x-nullable: true
      id:
        type: "string"
        readOnly: true
      is_drop_frame:
        type: "boolean"
        x-nullable: true
      is_public:
        type: "boolean"
        readOnly: true
      multipart_upload_url:
        type: "string"
        readOnly: true
      name:
        type: "string"
      resolution:
        $ref: "#/definitions/ResolutionTypeSchema"
      rotation:
        type: "integer"
        format: "int32"
        minimum: -2147483648
        maximum: 2147483647
        x-nullable: true
      size:
        type: "integer"
        format: "int64"
        minimum: -9223372036854775808
        maximum: 9223372036854775807
        x-nullable: true
      start_time_code:
        type: "string"
        x-nullable: true
      status:
        type: "string"
        enum:
        - "OPEN"
        - "GROWING"
        - "AWAITED"
        - "CLOSED"
        - "FAILED"
        - "ARCHIVED"
        - "MISSING"
        - "REDISCOVERED"
        - "DELETED"
      storage_id:
        type: "string"
      storage_method:
        type: "string"
        readOnly: true
      upload_credentials:
        type: "object"
        readOnly: true
        properties: {}
      upload_method:
        type: "string"
        readOnly: true
      upload_url:
        type: "string"
        readOnly: true
      url:
        type: "string"
        readOnly: true
      version_id:
        type: "string"
        x-nullable: true
    example:
      multipart_upload_url: "multipart_upload_url"
      storage_method: "storage_method"
      rotation: 441289069
      format: "format"
      asset_id: "asset_id"
      version_id: "version_id"
      is_drop_frame: true
      frame_rate: "frame_rate"
      resolution:
        width: 441289069
        height: -1803530559
      url: "url"
      bit_rate: -1803530559
      codec: "codec"
      filename: "filename"
      size: -6519424345728851968
      storage_id: "storage_id"
      is_public: true
      name: "name"
      start_time_code: "start_time_code"
      upload_method: "upload_method"
      upload_credentials: "{}"
      upload_url: "upload_url"
      id: "id"
      status: "OPEN"
  ProxyDownloadURLSchema:
    type: "object"
    properties:
      url:
        type: "string"
        readOnly: true
    example:
      url: "url"
  ProxySchema:
    type: "object"
    required:
    - "storage_id"
    properties:
      asset_id:
        type: "string"
      bit_rate:
        type: "integer"
        format: "int32"
        minimum: -2147483648
        maximum: 2147483647
      codec:
        type: "string"
      filename:
        type: "string"
      format:
        type: "string"
      frame_rate:
        type: "string"
        x-nullable: true
      id:
        type: "string"
        readOnly: true
      is_drop_frame:
        type: "boolean"
        x-nullable: true
      is_public:
        type: "boolean"
        readOnly: true
      multipart_upload_url:
        type: "string"
        readOnly: true
      name:
        type: "string"
      resolution:
        $ref: "#/definitions/ResolutionTypeSchema"
      rotation:
        type: "integer"
        format: "int32"
        minimum: -2147483648
        maximum: 2147483647
        x-nullable: true
      size:
        type: "integer"
        format: "int64"
        minimum: -9223372036854775808
        maximum: 9223372036854775807
        x-nullable: true
      start_time_code:
        type: "string"
        x-nullable: true
      status:
        type: "string"
        enum:
        - "OPEN"
        - "GROWING"
        - "AWAITED"
        - "CLOSED"
        - "FAILED"
        - "ARCHIVED"
        - "MISSING"
        - "REDISCOVERED"
        - "DELETED"
      storage_id:
        type: "string"
      storage_method:
        type: "string"
        readOnly: true
      upload_credentials:
        type: "object"
        readOnly: true
        properties: {}
      upload_method:
        type: "string"
        readOnly: true
      upload_url:
        type: "string"
        readOnly: true
      url:
        type: "string"
        readOnly: true
      version_id:
        type: "string"
        x-nullable: true
    example:
      multipart_upload_url: "multipart_upload_url"
      storage_method: "storage_method"
      rotation: 441289069
      format: "format"
      asset_id: "asset_id"
      version_id: "version_id"
      is_drop_frame: true
      frame_rate: "frame_rate"
      resolution:
        width: 441289069
        height: -1803530559
      url: "url"
      bit_rate: -1803530559
      codec: "codec"
      filename: "filename"
      size: -6519424345728851968
      storage_id: "storage_id"
      is_public: true
      name: "name"
      start_time_code: "start_time_code"
      upload_method: "upload_method"
      upload_credentials: "{}"
      upload_url: "upload_url"
      id: "id"
      status: "OPEN"
  ProxyUpdateSchema:
    type: "object"
    properties:
      asset_id:
        type: "string"
      bit_rate:
        type: "integer"
        format: "int32"
        minimum: -2147483648
        maximum: 2147483647
      codec:
        type: "string"
      filename:
        type: "string"
      format:
        type: "string"
      frame_rate:
        type: "string"
        x-nullable: true
      id:
        type: "string"
        readOnly: true
      is_drop_frame:
        type: "boolean"
        x-nullable: true
      is_public:
        type: "boolean"
        readOnly: true
      name:
        type: "string"
      resolution:
        $ref: "#/definitions/ResolutionTypeSchema"
      rotation:
        type: "integer"
        format: "int32"
        minimum: -2147483648
        maximum: 2147483647
        x-nullable: true
      size:
        type: "integer"
        format: "int64"
        minimum: -9223372036854775808
        maximum: 9223372036854775807
        x-nullable: true
      start_time_code:
        type: "string"
        x-nullable: true
      status:
        type: "string"
        enum:
        - "OPEN"
        - "GROWING"
        - "AWAITED"
        - "CLOSED"
        - "FAILED"
        - "ARCHIVED"
        - "MISSING"
        - "REDISCOVERED"
        - "DELETED"
      storage_id:
        type: "string"
      url:
        type: "string"
        readOnly: true
      version_id:
        type: "string"
        x-nullable: true
  RedlineSchema:
    type: "object"
    properties:
      edit_proxy_upload_storage_id:
        type: "string"
      edit_proxy_upload_storage_path:
        type: "string"
      format:
        type: "string"
        enum:
        - "QT transcode"
        - "Apple ProRes"
        - ""
      keep_redline_proxy:
        type: "boolean"
      local:
        type: "boolean"
        default: true
      opencl_device_indexes:
        type: "string"
      qt_codec:
        type: "string"
        enum:
        - "H264"
        - "H263"
        - "AVID_1080P_DNxHD_36_8-bit"
        - "AVID_1080P_DNxHD_115/120_8-bit"
        - "AVID_1080P_DNxHD_175/185_8-bit"
        - "AVID_1080P_DNxHD_175/185_10-bit"
        - "AVID_720P_DNxHD_60/75_8-bit"
        - "AVID_720P_DNxHD_90/110_8-bit"
        - "AVID_720P_DNxHD_90/110_10-bit"
        - "AVID_720P_DNxHD_120/145_8-bit"
        - "AVID_720P_DNxHD_185/220_8-bit"
        - "AVID_720P_DNxHD_185/220_10-bit"
        - "Apple_ProRes_422_HQ"
        - "Apple_ProRes_422"
        - "Apple_ProRes_4444"
        - "Apple_ProRes_422_LT"
        - "Apple_ProRes_422_Proxy"
        - ""
  ReindexExportLocationSchema:
    type: "object"
    properties:
      sync_to_another_dc:
        type: "boolean"
        default: true
  ReindexFileSchema:
    type: "object"
    properties:
      sync_to_another_dc:
        type: "boolean"
        default: true
  ReindexFileSetSchema:
    type: "object"
    properties:
      sync_to_another_dc:
        type: "boolean"
        default: true
  ReindexFormatSchema:
    type: "object"
    properties:
      sync_to_another_dc:
        type: "boolean"
        default: true
  ReindexQueueRecordSchema:
    type: "object"
    properties:
      sync_to_another_dc:
        type: "boolean"
        default: true
  ReindexStorageSchema:
    type: "object"
    properties:
      sync_to_another_dc:
        type: "boolean"
        default: true
  ReindexTranscoderSchema:
    type: "object"
    properties:
      sync_to_another_dc:
        type: "boolean"
        default: true
  ResolutionTypeSchema:
    type: "object"
    properties:
      height:
        type: "integer"
        format: "int32"
        minimum: -2147483648
        maximum: 2147483647
      width:
        type: "integer"
        format: "int32"
        minimum: -2147483648
        maximum: 2147483647
    example:
      width: 441289069
      height: -1803530559
  S3SettingsSchema:
    type: "object"
    required:
    - "access_key"
    - "bucket"
    - "endpoint"
    - "path"
    - "region"
    - "secret_key"
    properties:
      access_group_id:
        type: "string"
        x-nullable: true
      access_key:
        type: "string"
      acl_template_id:
        type: "string"
        x-nullable: true
      add_uuid_to_filenames:
        type: "boolean"
        default: true
      aggregate_identical_files:
        type: "boolean"
        default: true
      aggregate_ignore:
        type: "string"
      aggregate_only_on_same_storage:
        type: "boolean"
        default: false
      bucket:
        type: "string"
      delete:
        type: "boolean"
      enable_collection_directory_mapping:
        type: "boolean"
        default: false
      endpoint:
        type: "string"
      filename_is_external_id:
        type: "boolean"
        default: false
      folder_name_tags_metadata_field_name:
        type: "string"
      folder_name_tags_metadata_view_id:
        type: "string"
        x-nullable: true
      glacier_restore_timeout:
        type: "integer"
        format: "int32"
        description: "Keep restored assets online for this many days to allow them\
          \ to be copied before going back to Glacier"
        minimum: -2147483648
        maximum: 2147483647
        x-nullable: true
      is_system:
        type: "boolean"
        default: false
      metadata_view_id:
        type: "string"
        x-nullable: true
      notification_sqs_url:
        type: "string"
      path:
        type: "string"
      preload_edge_jobs:
        type: "integer"
        format: "int32"
        minimum: -2147483648
        maximum: 2147483647
        x-nullable: true
      read:
        type: "boolean"
      region:
        type: "string"
      root_collection_id:
        type: "string"
      scan:
        type: "boolean"
      scan_directories:
        type: "string"
      scan_ignore:
        type: "string"
      secret_key:
        type: "string"
      sidecar_metadata_required:
        type: "boolean"
      title_includes_extension:
        type: "boolean"
        default: false
      transcode_ignore:
        type: "string"
      use_acceleration:
        type: "boolean"
        default: false
      write:
        type: "boolean"
  SftpSettingsSchema:
    type: "object"
    required:
    - "address"
    - "password"
    - "user"
    properties:
      address:
        type: "string"
      delete:
        type: "boolean"
      is_system:
        type: "boolean"
        default: false
      password:
        type: "string"
      read:
        type: "boolean"
      scan:
        type: "boolean"
      user:
        type: "string"
      write:
        type: "boolean"
  StorageAutoScanSchema:
    type: "object"
    properties:
      hours_interval:
        type: "integer"
        format: "int32"
        minimum: 1
        default: 24
    example:
      hours_interval: 1
  StorageBaseSchema:
    type: "object"
  StorageFileSchema:
    type: "object"
    required:
    - "directory_path"
    - "original_name"
    - "type"
    properties:
      asset_id:
        type: "string"
      checksum:
        type: "string"
      date_created:
        type: "string"
        format: "date-time"
        readOnly: true
      date_modified:
        type: "string"
        format: "date-time"
        readOnly: true
      destination_storage_id:
        type: "string"
      directory_path:
        type: "string"
      file_date_created:
        type: "string"
        format: "date-time"
      file_date_modified:
        type: "string"
        format: "date-time"
      file_set_id:
        type: "string"
      format_id:
        type: "string"
      id:
        type: "string"
        readOnly: true
      name:
        type: "string"
        description: "If not specified, name will be autogenerated based on `id` and\
          \ `original_name`"
      original_name:
        type: "string"
      parent_id:
        type: "string"
        x-nullable: true
      size:
        type: "integer"
        format: "int64"
        minimum: -9223372036854775808
        maximum: 9223372036854775807
      status:
        type: "string"
        enum:
        - "OPEN"
        - "GROWING"
        - "AWAITED"
        - "CLOSED"
        - "FAILED"
        - "ARCHIVED"
        - "MISSING"
        - "REDISCOVERED"
        - "DELETED"
      storage_id:
        type: "string"
        description: "Deprecated field. Use destination_storage_id instead"
      type:
        type: "string"
        enum:
        - "FILE"
        - "DIRECTORY"
        - "SYMLINK"
      url:
        type: "string"
        readOnly: true
      user_id:
        type: "string"
      version_id:
        type: "string"
  StorageFileUpdateSchema:
    type: "object"
    required:
    - "directory_path"
    - "name"
    properties:
      asset_id:
        type: "string"
      checksum:
        type: "string"
      date_created:
        type: "string"
        format: "date-time"
        readOnly: true
      date_modified:
        type: "string"
        format: "date-time"
        readOnly: true
      directory_path:
        type: "string"
      file_date_created:
        type: "string"
        format: "date-time"
      file_date_modified:
        type: "string"
        format: "date-time"
      file_set_id:
        type: "string"
      format_id:
        type: "string"
      id:
        type: "string"
        readOnly: true
      name:
        type: "string"
      original_name:
        type: "string"
      parent_id:
        type: "string"
        x-nullable: true
      size:
        type: "integer"
        format: "int64"
        minimum: -9223372036854775808
        maximum: 9223372036854775807
      status:
        type: "string"
        enum:
        - "OPEN"
        - "GROWING"
        - "AWAITED"
        - "CLOSED"
        - "FAILED"
        - "ARCHIVED"
        - "MISSING"
        - "REDISCOVERED"
        - "DELETED"
      storage_id:
        type: "string"
      type:
        type: "string"
        enum:
        - "FILE"
        - "DIRECTORY"
        - "SYMLINK"
      user_id:
        type: "string"
      version_id:
        type: "string"
  StoragePrivateDataSchema:
    type: "object"
    required:
    - "method"
    - "name"
    - "purpose"
    - "settings"
    properties:
      bucket_location:
        type: "string"
        readOnly: true
      default:
        type: "boolean"
        readOnly: true
      id:
        type: "string"
        readOnly: true
      last_scanned:
        type: "string"
        format: "date-time"
        x-nullable: true
      method:
        type: "string"
        enum:
        - "FILE"
        - "HTTP"
        - "FTP"
        - "SFTP"
        - "S3"
        - "B2"
        - "GCS"
        - "PORTAL"
        - "CUSTOM"
        - "AZURE"
      name:
        type: "string"
      purpose:
        type: "string"
        enum:
        - "KEYFRAMES"
        - "FILES"
        - "PROXIES"
        - "EXPORTS"
        - "ARCHIVE"
      scanner_status:
        type: "string"
        x-nullable: true
      settings:
        type: "string"
      status:
        type: "string"
        enum:
        - "ACTIVE"
        - "INACTIVE"
        - "FAILING"
      status_message:
        type: "string"
        x-nullable: true
      version:
        type: "string"
        readOnly: true
  StorageReadSchema:
    type: "object"
    required:
    - "method"
    - "name"
    - "purpose"
    - "settings"
    properties:
      default:
        type: "boolean"
        readOnly: true
      id:
        type: "string"
        readOnly: true
      isg_version:
        type: "string"
        readOnly: true
      last_scanned:
        type: "string"
        format: "date-time"
        x-nullable: true
      method:
        type: "string"
        enum:
        - "FILE"
        - "HTTP"
        - "FTP"
        - "SFTP"
        - "S3"
        - "B2"
        - "GCS"
        - "PORTAL"
        - "CUSTOM"
        - "AZURE"
      name:
        type: "string"
      purpose:
        type: "string"
        enum:
        - "KEYFRAMES"
        - "FILES"
        - "PROXIES"
        - "EXPORTS"
        - "ARCHIVE"
      scanner_status:
        type: "string"
        x-nullable: true
      settings:
        type: "string"
      status:
        type: "string"
        enum:
        - "ACTIVE"
        - "INACTIVE"
        - "FAILING"
      status_message:
        type: "string"
        x-nullable: true
      version:
        type: "string"
        readOnly: true
    example:
      scanner_status: "scanner_status"
      status_message: "status_message"
      settings: "settings"
      default: true
      method: "FILE"
      purpose: "KEYFRAMES"
      last_scanned: "2000-01-23T04:56:07.000+00:00"
      name: "name"
      id: "id"
      version: "version"
      isg_version: "isg_version"
      status: "ACTIVE"
  StorageScanSchema:
    type: "object"
    properties:
      files:
        type: "array"
        items:
          type: "string"
        x-nullable: true
      ignore_already_active:
        type: "boolean"
        description: "Will force scanning even if the scan is already active if any\
          \ of `paths` or `files` are specified."
        default: false
      paths:
        type: "array"
        items:
          type: "string"
        x-nullable: true
  StorageSchema:
    type: "object"
    required:
    - "method"
    - "name"
    - "purpose"
    - "settings"
    properties:
      default:
        type: "boolean"
        readOnly: true
      id:
        type: "string"
        readOnly: true
      last_scanned:
        type: "string"
        format: "date-time"
        x-nullable: true
      method:
        type: "string"
        enum:
        - "FILE"
        - "HTTP"
        - "FTP"
        - "SFTP"
        - "S3"
        - "B2"
        - "GCS"
        - "PORTAL"
        - "CUSTOM"
        - "AZURE"
      name:
        type: "string"
      purpose:
        type: "string"
        enum:
        - "KEYFRAMES"
        - "FILES"
        - "PROXIES"
        - "EXPORTS"
        - "ARCHIVE"
      scanner_status:
        type: "string"
        x-nullable: true
      settings:
        type: "string"
      status:
        type: "string"
        enum:
        - "ACTIVE"
        - "INACTIVE"
        - "FAILING"
      status_message:
        type: "string"
        x-nullable: true
      version:
        type: "string"
        readOnly: true
    example:
      scanner_status: "scanner_status"
      status_message: "status_message"
      settings: "settings"
      default: true
      method: "FILE"
      purpose: "KEYFRAMES"
      last_scanned: "2000-01-23T04:56:07.000+00:00"
      name: "name"
      id: "id"
      version: "version"
      status: "ACTIVE"
  StoragesReadSchema:
    type: "object"
    properties:
      facets:
        type: "object"
        properties: {}
      first_url:
        type: "string"
        readOnly: true
      last_url:
        type: "string"
        readOnly: true
      next_url:
        type: "string"
        readOnly: true
      objects:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/StorageReadSchema"
      page:
        type: "integer"
        format: "int32"
        readOnly: true
        minimum: -2147483648
        maximum: 2147483647
      pages:
        type: "integer"
        format: "int32"
        readOnly: true
        minimum: -2147483648
        maximum: 2147483647
      per_page:
        type: "integer"
        format: "int32"
        readOnly: true
        minimum: -2147483648
        maximum: 2147483647
      prev_url:
        type: "string"
        readOnly: true
      total:
        type: "integer"
        format: "int64"
        readOnly: true
        minimum: -9223372036854775808
        maximum: 9223372036854775807
    example:
      per_page: -1517921766
      first_url: "first_url"
      total: 1774823812569044992
      pages: 441289069
      objects:
      - scanner_status: "scanner_status"
        status_message: "status_message"
        settings: "settings"
        default: true
        method: "FILE"
        purpose: "KEYFRAMES"
        last_scanned: "2000-01-23T04:56:07.000+00:00"
        name: "name"
        id: "id"
        version: "version"
        isg_version: "isg_version"
        status: "ACTIVE"
      - scanner_status: "scanner_status"
        status_message: "status_message"
        settings: "settings"
        default: true
        method: "FILE"
        purpose: "KEYFRAMES"
        last_scanned: "2000-01-23T04:56:07.000+00:00"
        name: "name"
        id: "id"
        version: "version"
        isg_version: "isg_version"
        status: "ACTIVE"
      next_url: "next_url"
      page: -1803530559
      prev_url: "prev_url"
      last_url: "last_url"
      facets: "{}"
  SubtitleRequestSchema:
    type: "object"
    properties:
      create_transcription:
        type: "boolean"
        default: true
      priority:
        type: "integer"
        format: "int32"
        minimum: -2147483648
        maximum: 2147483647
        x-nullable: true
  SubtitleSchema:
    type: "object"
    required:
    - "asset_id"
    - "closed_captions"
    - "format_id"
    - "id"
    - "language"
    properties:
      asset_id:
        type: "string"
        readOnly: true
      closed_captions:
        type: "boolean"
      content:
        type: "string"
      format_id:
        type: "string"
      id:
        type: "string"
        readOnly: true
      language:
        type: "string"
      name:
        type: "string"
      version_id:
        type: "string"
    example:
      name: "name"
      format_id: "format_id"
      language: "language"
      asset_id: "asset_id"
      closed_captions: true
      id: "id"
      version_id: "version_id"
      content: "content"
  SubtitlesSchema:
    type: "object"
    properties:
      first_url:
        type: "string"
        readOnly: true
      last_url:
        type: "string"
        readOnly: true
      next_url:
        type: "string"
        readOnly: true
      objects:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/SubtitleSchema"
      page:
        type: "integer"
        format: "int32"
        readOnly: true
        minimum: -2147483648
        maximum: 2147483647
      pages:
        type: "integer"
        format: "int32"
        readOnly: true
        minimum: -2147483648
        maximum: 2147483647
      per_page:
        type: "integer"
        format: "int32"
        readOnly: true
        minimum: -2147483648
        maximum: 2147483647
      prev_url:
        type: "string"
        readOnly: true
      total:
        type: "integer"
        format: "int64"
        readOnly: true
        minimum: -9223372036854775808
        maximum: 9223372036854775807
    example:
      per_page: -1517921766
      first_url: "first_url"
      total: 1774823812569044992
      pages: 441289069
      objects:
      - name: "name"
        format_id: "format_id"
        language: "language"
        asset_id: "asset_id"
        closed_captions: true
        id: "id"
        version_id: "version_id"
        content: "content"
      - name: "name"
        format_id: "format_id"
        language: "language"
        asset_id: "asset_id"
        closed_captions: true
        id: "id"
        version_id: "version_id"
        content: "content"
      next_url: "next_url"
      page: -1803530559
      prev_url: "prev_url"
      last_url: "last_url"
  TelestreamCloudSchema:
    type: "object"
    required:
    - "access_key"
    - "factory_id"
    - "keyframes_profile_id"
    - "proxy_profile_id"
    - "secret_key"
    - "storage_id"
    properties:
      access_key:
        type: "string"
      api_host:
        type: "string"
        default: "api.cloud.telestream.net"
      api_port:
        type: "integer"
        format: "int32"
        minimum: -2147483648
        maximum: 2147483647
        default: 443
      factory_id:
        type: "string"
      keyframes_profile_id:
        type: "string"
      local:
        type: "boolean"
        default: false
      proxy_profile_id:
        type: "string"
      secret_key:
        type: "string"
      storage_id:
        type: "string"
  TemporaryFileCreateSchema:
    type: "object"
    required:
    - "directory_path"
    - "original_name"
    - "type"
    properties:
      asset_id:
        type: "string"
      checksum:
        type: "string"
      date_created:
        type: "string"
        format: "date-time"
        readOnly: true
      date_modified:
        type: "string"
        format: "date-time"
        readOnly: true
      directory_path:
        type: "string"
      file_date_created:
        type: "string"
        format: "date-time"
      file_date_modified:
        type: "string"
        format: "date-time"
      file_set_id:
        type: "string"
      format_id:
        type: "string"
      id:
        type: "string"
        readOnly: true
      multipart_upload_url:
        type: "string"
        readOnly: true
      name:
        type: "string"
        description: "If not specified, name will be autogenerated based on `id` and\
          \ `original_name`"
      original_name:
        type: "string"
      parent_id:
        type: "string"
        x-nullable: true
      path_exist:
        type: "boolean"
        readOnly: true
      size:
        type: "integer"
        format: "int64"
        minimum: -9223372036854775808
        maximum: 9223372036854775807
      status:
        type: "string"
        enum:
        - "OPEN"
        - "GROWING"
        - "AWAITED"
        - "CLOSED"
        - "FAILED"
        - "ARCHIVED"
        - "MISSING"
        - "REDISCOVERED"
        - "DELETED"
      storage_id:
        type: "string"
      storage_method:
        type: "string"
        readOnly: true
      type:
        type: "string"
        enum:
        - "FILE"
        - "DIRECTORY"
        - "SYMLINK"
      upload_credentials:
        type: "object"
        readOnly: true
        properties: {}
      upload_filename:
        type: "string"
        readOnly: true
      upload_method:
        type: "string"
        readOnly: true
      upload_url:
        type: "string"
        readOnly: true
      user_id:
        type: "string"
      version_id:
        type: "string"
    example:
      multipart_upload_url: "multipart_upload_url"
      directory_path: "directory_path"
      asset_id: "asset_id"
      upload_filename: "upload_filename"
      type: "FILE"
      storage_id: "storage_id"
      checksum: "checksum"
      upload_method: "upload_method"
      format_id: "format_id"
      id: "id"
      file_set_id: "file_set_id"
      file_date_created: "2000-01-23T04:56:07.000+00:00"
      path_exist: true
      storage_method: "storage_method"
      date_created: "2000-01-23T04:56:07.000+00:00"
      version_id: "version_id"
      date_modified: "2000-01-23T04:56:07.000+00:00"
      size: -7746104769210155008
      file_date_modified: "2000-01-23T04:56:07.000+00:00"
      user_id: "user_id"
      parent_id: "parent_id"
      original_name: "original_name"
      name: "name"
      upload_credentials: "{}"
      upload_url: "upload_url"
      status: "OPEN"
  TemporaryFileSetSchema:
    type: "object"
    required:
    - "base_dir"
    - "component_ids"
    - "format_id"
    - "job_id"
    - "name"
    properties:
      asset_id:
        type: "string"
        readOnly: true
      base_dir:
        type: "string"
      component_ids:
        type: "array"
        items:
          type: "string"
      date_deleted:
        type: "string"
        format: "date-time"
      deleted_by_user:
        type: "string"
        readOnly: true
      format_id:
        type: "string"
      id:
        type: "string"
        readOnly: true
      is_archive:
        type: "boolean"
      job_id:
        type: "string"
      name:
        type: "string"
      original_storage_id:
        type: "string"
      status:
        type: "string"
        enum:
        - "ACTIVE"
        - "DELETED"
      storage_id:
        type: "string"
      version_id:
        type: "string"
    example:
      date_deleted: "2000-01-23T04:56:07.000+00:00"
      deleted_by_user: "deleted_by_user"
      asset_id: "asset_id"
      version_id: "version_id"
      component_ids:
      - "component_ids"
      - "component_ids"
      original_storage_id: "original_storage_id"
      job_id: "job_id"
      storage_id: "storage_id"
      base_dir: "base_dir"
      is_archive: true
      name: "name"
      format_id: "format_id"
      id: "id"
      status: "ACTIVE"
  TimeBaseTypeSchema:
    type: "object"
    properties:
      denominator:
        type: "integer"
        format: "int32"
        minimum: -2147483648
        maximum: 2147483647
      numerator:
        type: "integer"
        format: "int32"
        minimum: -2147483648
        maximum: 2147483647
    example:
      denominator: -1158723813
      numerator: 885365090
  TimeCodeTypeSchema:
    type: "object"
    properties:
      frames_number:
        type: "integer"
        format: "int64"
        minimum: -9223372036854775808
        maximum: 9223372036854775807
      is_drop_frame:
        type: "boolean"
      time_base:
        $ref: "#/definitions/TimeBaseTypeSchema"
    example:
      time_base:
        denominator: -1158723813
        numerator: 885365090
      is_drop_frame: true
      frames_number: 1175752406347165696
  TranscodeRequestSchema:
    type: "object"
    properties:
      priority:
        type: "integer"
        format: "int32"
        minimum: -2147483648
        maximum: 2147483647
        x-nullable: true
      set_as_custom_keyframe:
        type: "boolean"
        x-nullable: true
      update_proxy_mediainfo:
        type: "boolean"
        default: false
      use_storage_transcode_ignore_pattern:
        type: "boolean"
        x-nullable: true
  TranscodeResponseSchema:
    type: "object"
    properties:
      job_id:
        type: "string"
        readOnly: true
    example:
      job_id: "job_id"
  TranscoderBaseSchema:
    type: "object"
  TranscoderByStorageReadSchema:
    type: "object"
    properties:
      id:
        type: "string"
        readOnly: true
      name:
        type: "string"
      settings:
        type: "string"
      storage_id:
        type: "string"
      type:
        type: "string"
        enum:
        - "VANTAGE"
        - "FFMPEG"
        - "EDIT_PROXY"
        - "IMAGEMAGICK"
        - "ENCODING_COM"
        - "ZENCODER"
        - "TELESTREAM_CLOUD"
        - "ELEMENTAL_MEDIACONVERT"
        - "ELEMENTAL_SERVER"
        - "REDLINE"
        - "ICONIK_EDGE_TRANSCODER"
    example:
      settings: "settings"
      storage_id: "storage_id"
      name: "name"
      id: "id"
      type: "VANTAGE"
  TranscoderReadSchema:
    type: "object"
    required:
    - "name"
    - "settings"
    - "type"
    properties:
      id:
        type: "string"
        readOnly: true
      name:
        type: "string"
      settings:
        type: "string"
      type:
        type: "string"
        enum:
        - "VANTAGE"
        - "FFMPEG"
        - "EDIT_PROXY"
        - "IMAGEMAGICK"
        - "ENCODING_COM"
        - "ZENCODER"
        - "TELESTREAM_CLOUD"
        - "ELEMENTAL_MEDIACONVERT"
        - "ELEMENTAL_SERVER"
        - "REDLINE"
        - "ICONIK_EDGE_TRANSCODER"
    example:
      settings: "settings"
      name: "name"
      id: "id"
      type: "VANTAGE"
  TranscoderSchema:
    type: "object"
    required:
    - "name"
    - "settings"
    - "type"
    properties:
      id:
        type: "string"
        readOnly: true
      name:
        type: "string"
      settings:
        type: "string"
      type:
        type: "string"
        enum:
        - "VANTAGE"
        - "FFMPEG"
        - "EDIT_PROXY"
        - "IMAGEMAGICK"
        - "ENCODING_COM"
        - "ZENCODER"
        - "TELESTREAM_CLOUD"
        - "ELEMENTAL_MEDIACONVERT"
        - "ELEMENTAL_SERVER"
        - "REDLINE"
        - "ICONIK_EDGE_TRANSCODER"
    example:
      settings: "settings"
      name: "name"
      id: "id"
      type: "VANTAGE"
  TranscodersByStorageSchema:
    type: "object"
    properties:
      facets:
        type: "object"
        properties: {}
      first_url:
        type: "string"
        readOnly: true
      last_url:
        type: "string"
        readOnly: true
      next_url:
        type: "string"
        readOnly: true
      objects:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/TranscoderByStorageReadSchema"
      page:
        type: "integer"
        format: "int32"
        readOnly: true
        minimum: -2147483648
        maximum: 2147483647
      pages:
        type: "integer"
        format: "int32"
        readOnly: true
        minimum: -2147483648
        maximum: 2147483647
      per_page:
        type: "integer"
        format: "int32"
        readOnly: true
        minimum: -2147483648
        maximum: 2147483647
      prev_url:
        type: "string"
        readOnly: true
      total:
        type: "integer"
        format: "int64"
        readOnly: true
        minimum: -9223372036854775808
        maximum: 9223372036854775807
    example:
      per_page: -1517921766
      first_url: "first_url"
      total: 1774823812569044992
      pages: 441289069
      objects:
      - settings: "settings"
        storage_id: "storage_id"
        name: "name"
        id: "id"
        type: "VANTAGE"
      - settings: "settings"
        storage_id: "storage_id"
        name: "name"
        id: "id"
        type: "VANTAGE"
      next_url: "next_url"
      page: -1803530559
      prev_url: "prev_url"
      last_url: "last_url"
      facets: "{}"
  TranscodersSchema:
    type: "object"
    properties:
      facets:
        type: "object"
        properties: {}
      first_url:
        type: "string"
        readOnly: true
      last_url:
        type: "string"
        readOnly: true
      next_url:
        type: "string"
        readOnly: true
      objects:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/TranscoderReadSchema"
      page:
        type: "integer"
        format: "int32"
        readOnly: true
        minimum: -2147483648
        maximum: 2147483647
      pages:
        type: "integer"
        format: "int32"
        readOnly: true
        minimum: -2147483648
        maximum: 2147483647
      per_page:
        type: "integer"
        format: "int32"
        readOnly: true
        minimum: -2147483648
        maximum: 2147483647
      prev_url:
        type: "string"
        readOnly: true
      total:
        type: "integer"
        format: "int64"
        readOnly: true
        minimum: -9223372036854775808
        maximum: 9223372036854775807
    example:
      per_page: -1517921766
      first_url: "first_url"
      total: 1774823812569044992
      pages: 441289069
      objects:
      - settings: "settings"
        name: "name"
        id: "id"
        type: "VANTAGE"
      - settings: "settings"
        name: "name"
        id: "id"
        type: "VANTAGE"
      next_url: "next_url"
      page: -1803530559
      prev_url: "prev_url"
      last_url: "last_url"
      facets: "{}"
  TransferCloudSchema:
    type: "object"
    properties:
      asset_id:
        type: "string"
      celery_task_id:
        type: "string"
        readOnly: true
      component_ids:
        type: "array"
        items:
          type: "string"
      date_created:
        type: "string"
        format: "date-time"
        readOnly: true
      date_modified:
        type: "string"
        format: "date-time"
        readOnly: true
      delete_original:
        type: "boolean"
        readOnly: true
      destination_directory_path:
        type: "string"
        readOnly: true
      destination_filename:
        type: "string"
        readOnly: true
      destination_storage_id:
        type: "string"
        readOnly: true
      id:
        type: "string"
        readOnly: true
      job_id:
        type: "string"
        readOnly: true
      job_steps:
        type: "object"
        properties: {}
      original_file_set_id:
        type: "string"
        readOnly: true
      original_storage_id:
        type: "string"
      original_url:
        type: "string"
        format: "url"
      parent_job_id:
        type: "string"
      priority:
        type: "integer"
        format: "int32"
        readOnly: true
        minimum: 1
        maximum: 10
      status:
        type: "string"
        readOnly: true
        enum:
        - "Q"
        - "U"
        - "E"
        - "D"
      success:
        type: "string"
        readOnly: true
      transfer_type:
        type: "string"
        readOnly: true
      user_id:
        type: "string"
        readOnly: true
  TransferFromStorageReadSchema:
    type: "object"
    properties:
      add_file_set:
        type: "boolean"
        readOnly: true
      asset_id:
        type: "string"
      component_ids:
        type: "array"
        items:
          type: "string"
      delete_local_file_set_after_upload:
        type: "boolean"
      delete_source_file_set_after_download:
        type: "boolean"
      destination_directory_path:
        type: "string"
      destination_file_set_name:
        type: "string"
        readOnly: true
      destination_filename:
        type: "string"
      destination_storage_id:
        type: "string"
      destination_storage_method:
        type: "string"
      export_metadata_format:
        type: "string"
        readOnly: true
      export_metadata_view:
        type: "string"
        readOnly: true
      export_posters:
        type: "boolean"
        readOnly: true
      export_transcription_format:
        type: "string"
        readOnly: true
      format_id:
        type: "string"
      id:
        type: "string"
        readOnly: true
      job_id:
        type: "string"
      job_steps:
        type: "object"
        properties: {}
      original_file_set_id:
        type: "string"
      original_storage_id:
        type: "string"
      original_url:
        type: "string"
        format: "url"
      overwrite:
        type: "boolean"
        readOnly: true
      parent_job_id:
        type: "string"
      temporary_file_set_source:
        type: "boolean"
      transfer_type:
        type: "string"
        readOnly: true
    example:
      delete_local_file_set_after_upload: true
      export_transcription_format: "export_transcription_format"
      destination_directory_path: "destination_directory_path"
      asset_id: "asset_id"
      component_ids:
      - "component_ids"
      - "component_ids"
      add_file_set: true
      temporary_file_set_source: true
      format_id: "format_id"
      id: "id"
      overwrite: true
      destination_storage_method: "destination_storage_method"
      export_metadata_format: "export_metadata_format"
      export_metadata_view: "export_metadata_view"
      job_steps: "{}"
      parent_job_id: "parent_job_id"
      destination_file_set_name: "destination_file_set_name"
      original_storage_id: "original_storage_id"
      original_file_set_id: "original_file_set_id"
      original_url: "http://example.com/aeiou"
      destination_storage_id: "destination_storage_id"
      job_id: "job_id"
      export_posters: true
      delete_source_file_set_after_download: true
      destination_filename: "destination_filename"
      transfer_type: "transfer_type"
  TransferFromStorageSchema:
    type: "object"
    properties:
      asset_id:
        type: "string"
      component_ids:
        type: "array"
        items:
          type: "string"
      delete_local_file_set_after_upload:
        type: "boolean"
      delete_source_file_set_after_download:
        type: "boolean"
      destination_directory_path:
        type: "string"
      destination_file_set_name:
        type: "string"
        readOnly: true
      destination_filename:
        type: "string"
      destination_storage_id:
        type: "string"
      destination_storage_method:
        type: "string"
      format_id:
        type: "string"
      id:
        type: "string"
        readOnly: true
      job_id:
        type: "string"
      job_steps:
        type: "object"
        properties: {}
      original_file_set_id:
        type: "string"
      original_storage_id:
        type: "string"
      original_url:
        type: "string"
        format: "url"
      parent_job_id:
        type: "string"
      temporary_file_set_source:
        type: "boolean"
      transfer_type:
        type: "string"
        readOnly: true
  TransferSignedURLSchema:
    type: "object"
    properties:
      url:
        type: "string"
        format: "url"
    example:
      url: "http://example.com/aeiou"
  TransferToStorageReadSchema:
    type: "object"
    required:
    - "destination_directory_path"
    - "destination_file_set_name"
    properties:
      add_file_set:
        type: "boolean"
        readOnly: true
      asset_id:
        type: "string"
      component_ids:
        type: "array"
        items:
          type: "string"
      delete_remote_file_set_after_download:
        type: "boolean"
      delete_source_file_set_after_download:
        type: "boolean"
      destination_directory_path:
        type: "string"
      destination_file_set_name:
        type: "string"
      destination_filename:
        type: "string"
      export_metadata_format:
        type: "string"
        readOnly: true
      export_metadata_view:
        type: "string"
        readOnly: true
      export_posters:
        type: "boolean"
        readOnly: true
      export_transcription_format:
        type: "string"
        readOnly: true
      file_set_id:
        type: "string"
      format_id:
        type: "string"
      id:
        type: "string"
        readOnly: true
      job_id:
        type: "string"
      job_steps:
        type: "object"
        properties: {}
      local_storage_id:
        type: "string"
      original_storage_id:
        type: "string"
      original_url:
        type: "string"
        format: "url"
      overwrite:
        type: "boolean"
        readOnly: true
      parent_job_id:
        type: "string"
      temporary_file_set_source:
        type: "boolean"
      transfer_type:
        type: "string"
        readOnly: true
    example:
      delete_remote_file_set_after_download: true
      export_metadata_format: "export_metadata_format"
      local_storage_id: "local_storage_id"
      export_transcription_format: "export_transcription_format"
      export_metadata_view: "export_metadata_view"
      job_steps: "{}"
      destination_directory_path: "destination_directory_path"
      asset_id: "asset_id"
      component_ids:
      - "component_ids"
      - "component_ids"
      parent_job_id: "parent_job_id"
      destination_file_set_name: "destination_file_set_name"
      original_storage_id: "original_storage_id"
      add_file_set: true
      original_url: "http://example.com/aeiou"
      job_id: "job_id"
      temporary_file_set_source: true
      export_posters: true
      format_id: "format_id"
      delete_source_file_set_after_download: true
      destination_filename: "destination_filename"
      id: "id"
      transfer_type: "transfer_type"
      file_set_id: "file_set_id"
      overwrite: true
  TransferToStorageSchema:
    type: "object"
    required:
    - "destination_directory_path"
    - "destination_file_set_name"
    properties:
      asset_id:
        type: "string"
      component_ids:
        type: "array"
        items:
          type: "string"
      delete_remote_file_set_after_download:
        type: "boolean"
      delete_source_file_set_after_download:
        type: "boolean"
      destination_directory_path:
        type: "string"
      destination_file_set_name:
        type: "string"
      destination_filename:
        type: "string"
      file_set_id:
        type: "string"
      format_id:
        type: "string"
      id:
        type: "string"
        readOnly: true
      job_id:
        type: "string"
      job_steps:
        type: "object"
        properties: {}
      local_storage_id:
        type: "string"
      original_storage_id:
        type: "string"
      original_url:
        type: "string"
        format: "url"
      parent_job_id:
        type: "string"
      temporary_file_set_source:
        type: "boolean"
      transfer_type:
        type: "string"
        readOnly: true
  TransfersFromStorageSchema:
    type: "object"
    properties:
      first_url:
        type: "string"
        readOnly: true
      last_url:
        type: "string"
        readOnly: true
      next_url:
        type: "string"
        readOnly: true
      objects:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/TransferFromStorageReadSchema"
      page:
        type: "integer"
        format: "int32"
        readOnly: true
        minimum: -2147483648
        maximum: 2147483647
      pages:
        type: "integer"
        format: "int32"
        readOnly: true
        minimum: -2147483648
        maximum: 2147483647
      per_page:
        type: "integer"
        format: "int32"
        readOnly: true
        minimum: -2147483648
        maximum: 2147483647
      prev_url:
        type: "string"
        readOnly: true
      total:
        type: "integer"
        format: "int64"
        readOnly: true
        minimum: -9223372036854775808
        maximum: 9223372036854775807
    example:
      per_page: -1517921766
      first_url: "first_url"
      total: 1774823812569044992
      pages: 441289069
      objects:
      - delete_local_file_set_after_upload: true
        export_transcription_format: "export_transcription_format"
        destination_directory_path: "destination_directory_path"
        asset_id: "asset_id"
        component_ids:
        - "component_ids"
        - "component_ids"
        add_file_set: true
        temporary_file_set_source: true
        format_id: "format_id"
        id: "id"
        overwrite: true
        destination_storage_method: "destination_storage_method"
        export_metadata_format: "export_metadata_format"
        export_metadata_view: "export_metadata_view"
        job_steps: "{}"
        parent_job_id: "parent_job_id"
        destination_file_set_name: "destination_file_set_name"
        original_storage_id: "original_storage_id"
        original_file_set_id: "original_file_set_id"
        original_url: "http://example.com/aeiou"
        destination_storage_id: "destination_storage_id"
        job_id: "job_id"
        export_posters: true
        delete_source_file_set_after_download: true
        destination_filename: "destination_filename"
        transfer_type: "transfer_type"
      - delete_local_file_set_after_upload: true
        export_transcription_format: "export_transcription_format"
        destination_directory_path: "destination_directory_path"
        asset_id: "asset_id"
        component_ids:
        - "component_ids"
        - "component_ids"
        add_file_set: true
        temporary_file_set_source: true
        format_id: "format_id"
        id: "id"
        overwrite: true
        destination_storage_method: "destination_storage_method"
        export_metadata_format: "export_metadata_format"
        export_metadata_view: "export_metadata_view"
        job_steps: "{}"
        parent_job_id: "parent_job_id"
        destination_file_set_name: "destination_file_set_name"
        original_storage_id: "original_storage_id"
        original_file_set_id: "original_file_set_id"
        original_url: "http://example.com/aeiou"
        destination_storage_id: "destination_storage_id"
        job_id: "job_id"
        export_posters: true
        delete_source_file_set_after_download: true
        destination_filename: "destination_filename"
        transfer_type: "transfer_type"
      next_url: "next_url"
      page: -1803530559
      prev_url: "prev_url"
      last_url: "last_url"
  TransfersToStorageSchema:
    type: "object"
    properties:
      first_url:
        type: "string"
        readOnly: true
      last_url:
        type: "string"
        readOnly: true
      next_url:
        type: "string"
        readOnly: true
      objects:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/TransferToStorageReadSchema"
      page:
        type: "integer"
        format: "int32"
        readOnly: true
        minimum: -2147483648
        maximum: 2147483647
      pages:
        type: "integer"
        format: "int32"
        readOnly: true
        minimum: -2147483648
        maximum: 2147483647
      per_page:
        type: "integer"
        format: "int32"
        readOnly: true
        minimum: -2147483648
        maximum: 2147483647
      prev_url:
        type: "string"
        readOnly: true
      total:
        type: "integer"
        format: "int64"
        readOnly: true
        minimum: -9223372036854775808
        maximum: 9223372036854775807
    example:
      per_page: -1517921766
      first_url: "first_url"
      total: 1774823812569044992
      pages: 441289069
      objects:
      - delete_remote_file_set_after_download: true
        export_metadata_format: "export_metadata_format"
        local_storage_id: "local_storage_id"
        export_transcription_format: "export_transcription_format"
        export_metadata_view: "export_metadata_view"
        job_steps: "{}"
        destination_directory_path: "destination_directory_path"
        asset_id: "asset_id"
        component_ids:
        - "component_ids"
        - "component_ids"
        parent_job_id: "parent_job_id"
        destination_file_set_name: "destination_file_set_name"
        original_storage_id: "original_storage_id"
        add_file_set: true
        original_url: "http://example.com/aeiou"
        job_id: "job_id"
        temporary_file_set_source: true
        export_posters: true
        format_id: "format_id"
        delete_source_file_set_after_download: true
        destination_filename: "destination_filename"
        id: "id"
        transfer_type: "transfer_type"
        file_set_id: "file_set_id"
        overwrite: true
      - delete_remote_file_set_after_download: true
        export_metadata_format: "export_metadata_format"
        local_storage_id: "local_storage_id"
        export_transcription_format: "export_transcription_format"
        export_metadata_view: "export_metadata_view"
        job_steps: "{}"
        destination_directory_path: "destination_directory_path"
        asset_id: "asset_id"
        component_ids:
        - "component_ids"
        - "component_ids"
        parent_job_id: "parent_job_id"
        destination_file_set_name: "destination_file_set_name"
        original_storage_id: "original_storage_id"
        add_file_set: true
        original_url: "http://example.com/aeiou"
        job_id: "job_id"
        temporary_file_set_source: true
        export_posters: true
        format_id: "format_id"
        delete_source_file_set_after_download: true
        destination_filename: "destination_filename"
        id: "id"
        transfer_type: "transfer_type"
        file_set_id: "file_set_id"
        overwrite: true
      next_url: "next_url"
      page: -1803530559
      prev_url: "prev_url"
      last_url: "last_url"
  UploadIconikStorageGatewayLogsSchema:
    type: "object"
    required:
    - "filename"
    properties:
      filename:
        type: "string"
        maxLength: 100
  VantageSettingsSchema:
    type: "object"
    required:
    - "host"
    - "port"
    - "share_name"
    - "temp_proxy_folder"
    - "workflow_id"
    properties:
      host:
        type: "string"
      local:
        type: "boolean"
        default: true
      port:
        type: "integer"
        format: "int32"
        minimum: -2147483648
        maximum: 2147483647
      share_name:
        type: "string"
      temp_proxy_folder:
        type: "string"
      workflow_id:
        type: "string"
  ZencoderSettingsSchema:
    type: "object"
    required:
    - "api_key"
    properties:
      api_key:
        type: "string"
      local:
        type: "boolean"
        default: false
  inline_response_200:
    type: "object"
    properties:
      access_check:
        type: "boolean"
        example: false
      error_message:
        type: "string"
        example: "The AWS Access Key Id you provided does not exist in our records."
    example:
      error_message: "The AWS Access Key Id you provided does not exist in our records."
      access_check: false
