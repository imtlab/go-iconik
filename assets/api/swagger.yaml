---
swagger: "2.0"
info:
  version: "1.0"
  title: "iconik_assets"
basePath: "/API/assets"
paths:
  /v1/assets/:
    get:
      summary: "Get list of assets"
      description: "\nRequired roles:\n - can_read_assets"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "per_page"
        in: "query"
        description: "The number of items for each page"
        required: false
        type: "integer"
        x-exportParamName: "PerPage"
        x-optionalDataType: "Int32"
      - name: "page"
        in: "query"
        description: "Which page number to fetch"
        required: false
        type: "integer"
        default: 1
        minimum: 1
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "sort"
        in: "query"
        description: "A comma separated list of fieldnames with order. For example\
          \ - first_name,asc;last_name,desc"
        required: false
        type: "string"
        x-exportParamName: "Sort"
        x-optionalDataType: "String"
      - name: "field_name"
        in: "query"
        description: "filter by field_name"
        required: false
        type: "string"
        x-exportParamName: "FieldName"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Returns a list of asset"
          schema:
            $ref: "#/definitions/AssetsSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Requested page does not exist"
    post:
      summary: "Create a new asset"
      description: "\nRequired roles:\n - can_create_assets"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "apply_default_acls"
        in: "query"
        description: "Adds default ACLs to an asset"
        required: false
        type: "boolean"
        default: true
        x-exportParamName: "ApplyDefaultAcls"
        x-optionalDataType: "Bool"
      - name: "apply_collection_acls"
        in: "query"
        description: "Adds containing collection's ACLs to an asset"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ApplyCollectionAcls"
        x-optionalDataType: "Bool"
      - name: "assign_to_collection"
        in: "query"
        description: "Adds the asset to the collection specified in the body"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "AssignToCollection"
        x-optionalDataType: "Bool"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/AssetCreateSchema"
        x-exportParamName: "Body"
      responses:
        "201":
          description: "Returns a created asset"
          schema:
            $ref: "#/definitions/AssetSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
    put:
      summary: "Bulk update assets"
      description: "\nRequired roles:\n - can_write_assets"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/BulkAssetEditSchema"
        x-exportParamName: "Body"
      responses:
        "202":
          description: "Bulk assets update scheduled"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
    patch:
      summary: "Bulk update assets"
      description: "\nRequired roles:\n - can_write_assets"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/BulkAssetEditSchema"
        x-exportParamName: "Body"
      responses:
        "202":
          description: "Bulk assets update scheduled"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
  /v1/assets/history/: {}
  /v1/assets/reindex/:
    post:
      summary: "Trigger reindexing of all assets"
      description: "\nRequired roles:\n - can_reindex_assets"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/ReindexAllAssetsSchema"
        x-exportParamName: "Body"
      responses:
        "201":
          description: "ID and status of the job"
        "401":
          description: "Token is invalid"
  /v1/assets/relation_types/:
    get:
      summary: "Create a new asset relation type"
      description: "\nRequired roles:\n - can_read_asset_relations"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      responses:
        "200":
          description: "Returns a relation type"
          schema:
            $ref: "#/definitions/RelationTypesSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
    post:
      summary: "Create a new asset relation type"
      description: "\nRequired roles:\n - can_write_asset_relation_types"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/RelationTypeSchema"
        x-exportParamName: "Body"
      responses:
        "201":
          description: "Returns a created relation type"
          schema:
            $ref: "#/definitions/RelationTypeSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
  /v1/assets/relation_types/{relation_type}/:
    get:
      summary: "Get a relation type"
      description: "\nRequired roles:\n - can_read_asset_relations"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "relation_type"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "RelationType"
      responses:
        "200":
          description: "Returns a created relation"
          schema:
            $ref: "#/definitions/RelationTypeSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
    put:
      summary: "Update an asset relation type"
      description: "\nRequired roles:\n - can_write_asset_relation_types"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "relation_type"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "RelationType"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/RelationTypeSchema"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Update successful"
          schema:
            $ref: "#/definitions/RelationTypeSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
    delete:
      summary: "Delete an asset relation type"
      description: "\nRequired roles:\n - can_delete_asset_relation_types"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "relation_type"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "RelationType"
      responses:
        "204":
          description: "Success"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
    patch:
      summary: "Update an asset relation type"
      description: "\nRequired roles:\n - can_write_asset_relation_types"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "relation_type"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "RelationType"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/RelationTypeSchema"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Update successful"
          schema:
            $ref: "#/definitions/RelationTypeSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
  /v1/assets/segments/reindex/:
    post:
      summary: "Trigger reindexing of all segments"
      description: "\nRequired roles:\n - can_reindex_segments"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/ReindexAllSegmentsSchema"
        x-exportParamName: "Body"
      responses:
        "201":
          description: "ID and status of the job"
        "401":
          description: "Token is invalid"
  /v1/assets/versions/: {}
  /v1/assets/versions/latest/: {}
  /v1/assets/{asset_id}/:
    get:
      summary: "Returns a particular asset by id"
      description: "\nRequired roles:\n - can_read_assets"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "include_collections"
        in: "query"
        description: "include collection membership"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "IncludeCollections"
        x-optionalDataType: "Bool"
      - name: "include_users"
        in: "query"
        description: "include info about the users who have interacted with this asset"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "IncludeUsers"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "Returns an asset"
          schema:
            $ref: "#/definitions/AssetSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Asset does not exist"
    put:
      summary: "Update asset"
      description: "\nRequired roles:\n - can_write_assets"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/AssetSchema"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Returns an updated asset"
          schema:
            $ref: "#/definitions/AssetSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Asset does not exist"
    delete:
      summary: "Delete a particular asset by id"
      description: "\nRequired roles:\n - can_delete_assets"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      responses:
        "204":
          description: "Without body"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Asset does not exist"
    patch:
      summary: "Update asset"
      description: "\nRequired roles:\n - can_write_assets"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/AssetSchema"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Returns an updated asset"
          schema:
            $ref: "#/definitions/AssetSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Asset does not exist"
  /v1/assets/{asset_id}/history/:
    get:
      summary: "Get list of assets"
      description: "\nRequired roles:\n - can_read_assets_history"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "per_page"
        in: "query"
        description: "The number of items for each page"
        required: false
        type: "integer"
        x-exportParamName: "PerPage"
        x-optionalDataType: "Int32"
      - name: "page"
        in: "query"
        description: "Which page number to fetch"
        required: false
        type: "integer"
        default: 1
        minimum: 1
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "sort"
        in: "query"
        description: "A comma separated list of fieldnames with order. For example\
          \ - first_name,asc;last_name,desc"
        required: false
        type: "string"
        x-exportParamName: "Sort"
        x-optionalDataType: "String"
      - name: "filter"
        in: "query"
        description: "A comma separated list of fieldnames with order For example\
          \ - first_name,eq,Vlad;last_name,eq,Gudkov"
        required: false
        type: "string"
        x-exportParamName: "Filter"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Returns a list of asset"
          schema:
            $ref: "#/definitions/AssetHistoryEntitiesSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Requested page does not exist"
    post:
      summary: "Create an asset history entity"
      description: "\nRequired roles:\n - can_write_assets_history"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/AssetHistorySchema"
        x-exportParamName: "Body"
      responses:
        "201":
          description: "Returns a created asset history entity"
          schema:
            $ref: "#/definitions/AssetHistorySchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Asset Id doesn't exist"
  /v1/assets/{asset_id}/history/{history_entity_id}/:
    get:
      summary: "Get an asset history entity"
      description: "\nRequired roles:\n - can_read_assets_history"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "history_entity_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "HistoryEntityId"
      responses:
        "201":
          description: "Returns a created asset history entity"
          schema:
            $ref: "#/definitions/AssetHistorySchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
    delete:
      summary: "Deletes an asset history entity"
      description: "\nRequired roles:\n - can_delete_assets_history"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "history_entity_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "HistoryEntityId"
      responses:
        "201":
          description: "Returns a created asset history entity"
          schema:
            $ref: "#/definitions/AssetHistorySchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
  /v1/assets/{asset_id}/history/{history_entity_id}/reindex/:
    post:
      summary: "Reindex asset history entity"
      description: "\nRequired roles:\n - can_reindex_assets_history"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "history_entity_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "HistoryEntityId"
      responses:
        "201":
          description: "ID and status of the job"
        "401":
          description: "Token is invalid"
        "404":
          description: "Asset history entity does not exist"
  /v1/assets/{asset_id}/purge/:
    delete:
      summary: "Purges a particular asset by id immediately"
      description: "\nRequired roles:\n - can_purge_assets"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      responses:
        "204":
          description: "Without body"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Asset does not exist"
  /v1/assets/{asset_id}/reindex/:
    post:
      summary: "Reindex asset"
      description: "\nRequired roles:\n - can_reindex_assets"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/ReindexAssetSchema"
        x-exportParamName: "Body"
      responses:
        "201":
          description: "ID and status of the job"
        "401":
          description: "Token is invalid"
        "404":
          description: "Asset does not exist"
  /v1/assets/{asset_id}/relations/:
    get:
      summary: "Returns an assets relations"
      description: "\nRequired roles:\n - can_read_asset_relations"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "include_deleted"
        in: "query"
        description: "Also show assets from recycle bin in relations"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "IncludeDeleted"
        x-optionalDataType: "Bool"
      - name: "per_page"
        in: "query"
        description: "The number of items for each page"
        required: false
        type: "integer"
        x-exportParamName: "PerPage"
        x-optionalDataType: "Int32"
      - name: "page"
        in: "query"
        description: "Which page number to fetch"
        required: false
        type: "integer"
        default: 1
        minimum: 1
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "sort"
        in: "query"
        description: "A comma separated list of fieldnames with order. For example\
          \ - first_name,asc;last_name,desc"
        required: false
        type: "string"
        x-exportParamName: "Sort"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Returns a list of assets"
          schema:
            $ref: "#/definitions/AssetsSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Requested page does not exist"
    post:
      summary: "Create a new asset relation"
      description: "\nRequired roles:\n - can_create_asset_relations"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/RelationSchema"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Returns an existing relation"
          schema:
            $ref: "#/definitions/RelationSchema"
        "201":
          description: "Returns a created relation"
          schema:
            $ref: "#/definitions/RelationSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
  /v1/assets/{asset_id}/relations/{relation_type}/:
    get:
      summary: "Returns assets that has a relation to this asset"
      description: "\nRequired roles:\n - can_read_asset_relations"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "relation_type"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "RelationType"
      - name: "include_deleted"
        in: "query"
        description: "Also show assets from recycle bin in relations"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "IncludeDeleted"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "Returns a list of assets"
          schema:
            $ref: "#/definitions/AssetsSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
  /v1/assets/{asset_id}/relations/{relation_type}/{related_to_asset_id}/:
    post:
      summary: "Create a new asset relation"
      description: "\nRequired roles:\n - can_create_asset_relations"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "relation_type"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "RelationType"
      - name: "related_to_asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "RelatedToAssetId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/RelationSchema"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Returns an existing relation"
          schema:
            $ref: "#/definitions/RelationSchema"
        "201":
          description: "Returns a created relation"
          schema:
            $ref: "#/definitions/RelationSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
    delete:
      summary: "Delete a particular asset by id"
      description: "\nRequired roles:\n - can_delete_asset_relations"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "relation_type"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "RelationType"
      - name: "related_to_asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "RelatedToAssetId"
      responses:
        "204":
          description: "Without body"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
  /v1/assets/{asset_id}/restore/:
    put:
      summary: "Restore deleted asset by id"
      description: "\nRequired roles:\n - can_write_assets"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      responses:
        "204":
          description: "Without body"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Asset does not exist"
  /v1/assets/{asset_id}/search_document/:
    put:
      summary: "Update metadata for asset"
      description: "\nRequired roles:\n - can_reindex_assets"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/AssetElasticSchema"
        x-exportParamName: "Body"
      responses:
        "204":
          description: "Asset metadata updated"
        "400":
          description: "No metadata supplied"
        "401":
          description: "Token is invalid"
        "404":
          description: "Asset does not exist in search index"
  /v1/assets/{asset_id}/segments/:
    get:
      summary: "List of segments"
      description: "\nRequired roles:\n - can_read_segments"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "sort"
        in: "query"
        description: "Sort on field (Comma separated)"
        required: false
        type: "string"
        x-exportParamName: "Sort"
        x-optionalDataType: "String"
      - name: "ids"
        in: "query"
        description: "Only include these segments (Comma separated)"
        required: false
        type: "string"
        x-exportParamName: "Ids"
        x-optionalDataType: "String"
      - name: "query"
        in: "query"
        description: "Search using query"
        required: false
        type: "string"
        x-exportParamName: "Query"
        x-optionalDataType: "String"
      - name: "includes"
        in: "query"
        description: "Only include fields (Comma separated)"
        required: false
        type: "string"
        x-exportParamName: "Includes"
        x-optionalDataType: "String"
      - name: "per_page"
        in: "query"
        description: "The number of items for each page"
        required: false
        type: "integer"
        x-exportParamName: "PerPage"
        x-optionalDataType: "Int32"
      - name: "page"
        in: "query"
        description: "Which page number to fetch"
        required: false
        type: "integer"
        default: 1
        minimum: 1
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "scroll"
        in: "query"
        description: "If true passed then uses scroll pagination instead of default\
          \ one"
        required: false
        type: "boolean"
        x-exportParamName: "Scroll"
        x-optionalDataType: "Bool"
      - name: "scroll_id"
        in: "query"
        description: "In order to get next batch of results using scroll pagination\
          \ the scroll_id is required"
        required: false
        type: "string"
        x-exportParamName: "ScrollId"
        x-optionalDataType: "String"
      - name: "transcription_id"
        in: "query"
        description: "Filter segments by transcription_id"
        required: false
        type: "string"
        x-exportParamName: "TranscriptionId"
        x-optionalDataType: "String"
      - name: "version_id"
        in: "query"
        description: "Filter segments by version_id"
        required: false
        type: "string"
        x-exportParamName: "VersionId"
        x-optionalDataType: "String"
      - name: "segment_type"
        in: "query"
        description: "Filter segments by segment_type"
        required: false
        type: "string"
        x-exportParamName: "SegmentType"
        x-optionalDataType: "String"
      - name: "segment_color"
        in: "query"
        description: "Filter segments by segment_color"
        required: false
        type: "string"
        x-exportParamName: "SegmentColor"
        x-optionalDataType: "String"
      - name: "status"
        in: "query"
        description: "Filter segments by status"
        required: false
        type: "string"
        x-exportParamName: "Status"
        x-optionalDataType: "String"
      - name: "include_users"
        in: "query"
        description: "Include segment's authors info"
        required: false
        type: "boolean"
        x-exportParamName: "IncludeUsers"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "Returns a list of segments"
          schema:
            $ref: "#/definitions/SegmentsSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Page number does not exist"
    post:
      summary: "Create a new segment"
      description: "\nRequired roles:\n - can_create_segments"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "Share-User-Email"
        in: "header"
        description: "This header is used for shares by URL to identify user. Only\
          \ valid emails are allowed."
        required: false
        type: "string"
        x-exportParamName: "ShareUserEmail"
        x-optionalDataType: "String"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/SegmentSchema"
        x-exportParamName: "Body"
      responses:
        "201":
          description: "Returns a created segment"
          schema:
            $ref: "#/definitions/SegmentSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
  /v1/assets/{asset_id}/segments/bulk/:
    post:
      summary: "Create multiple new segments for a single asset"
      description: "\nRequired roles:\n - can_create_segments"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/BulkCreateSegmentsSchema"
        x-exportParamName: "Body"
      responses:
        "201":
          description: "Returns ID and status of a job"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
  /v1/assets/{asset_id}/segments/reindex/:
    post:
      summary: "Reindex assets segments"
      description: "\nRequired roles:\n - can_reindex_segments"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/ReindexSegmentSchema"
        x-exportParamName: "Body"
      responses:
        "201":
          description: "ID and status of the job"
        "401":
          description: "Token is invalid"
        "404":
          description: "Asset does not exist"
  /v1/assets/{asset_id}/segments/srt/:
    get:
      summary: "List of segments as SRT file"
      description: "\nRequired roles:\n - can_read_segments"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "ids"
        in: "query"
        description: "Only include these segments (Comma separated)"
        required: false
        type: "string"
        x-exportParamName: "Ids"
        x-optionalDataType: "String"
      - name: "query"
        in: "query"
        description: "Search using query"
        required: false
        type: "string"
        x-exportParamName: "Query"
        x-optionalDataType: "String"
      - name: "scroll"
        in: "query"
        description: "If true passed then uses scroll pagination instead of default\
          \ one"
        required: false
        type: "boolean"
        x-exportParamName: "Scroll"
        x-optionalDataType: "Bool"
      - name: "scroll_id"
        in: "query"
        description: "In order to get next batch of results using scroll pagination\
          \ the scroll_id is required"
        required: false
        type: "string"
        x-exportParamName: "ScrollId"
        x-optionalDataType: "String"
      - name: "transcription_id"
        in: "query"
        description: "Filter segments by transcription_id"
        required: false
        type: "string"
        x-exportParamName: "TranscriptionId"
        x-optionalDataType: "String"
      - name: "version_id"
        in: "query"
        description: "Filter segments by version_id"
        required: false
        type: "string"
        x-exportParamName: "VersionId"
        x-optionalDataType: "String"
      - name: "segment_type"
        in: "query"
        description: "Filter segments by segment_type"
        required: false
        type: "string"
        x-exportParamName: "SegmentType"
        x-optionalDataType: "String"
      - name: "segment_color"
        in: "query"
        description: "Filter segments by segment_color"
        required: false
        type: "string"
        x-exportParamName: "SegmentColor"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Returns a list of segments as SRT"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Page number does not exist"
  /v1/assets/{asset_id}/segments/vtt/:
    get:
      summary: "List of segments as WebVTT file"
      description: "\nRequired roles:\n - can_read_segments"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "ids"
        in: "query"
        description: "Only include these segments (Comma separated)"
        required: false
        type: "string"
        x-exportParamName: "Ids"
        x-optionalDataType: "String"
      - name: "query"
        in: "query"
        description: "Search using query"
        required: false
        type: "string"
        x-exportParamName: "Query"
        x-optionalDataType: "String"
      - name: "scroll"
        in: "query"
        description: "If true passed then uses scroll pagination instead of default\
          \ one"
        required: false
        type: "boolean"
        x-exportParamName: "Scroll"
        x-optionalDataType: "Bool"
      - name: "scroll_id"
        in: "query"
        description: "In order to get next batch of results using scroll pagination\
          \ the scroll_id is required"
        required: false
        type: "string"
        x-exportParamName: "ScrollId"
        x-optionalDataType: "String"
      - name: "transcription_id"
        in: "query"
        description: "Filter segments by transcription_id"
        required: false
        type: "string"
        x-exportParamName: "TranscriptionId"
        x-optionalDataType: "String"
      - name: "version_id"
        in: "query"
        description: "Filter segments by version_id"
        required: false
        type: "string"
        x-exportParamName: "VersionId"
        x-optionalDataType: "String"
      - name: "segment_type"
        in: "query"
        description: "Filter segments by segment_type"
        required: false
        type: "string"
        x-exportParamName: "SegmentType"
        x-optionalDataType: "String"
      - name: "segment_color"
        in: "query"
        description: "Filter segments by segment_color"
        required: false
        type: "string"
        x-exportParamName: "SegmentColor"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Returns a list of segments as VTT"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Page number does not exist"
  /v1/assets/{asset_id}/segments/{segment_id}/:
    get:
      summary: "Get a segment by ID"
      description: "\nRequired roles:\n - can_read_segments"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "segment_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "SegmentId"
      - name: "scroll"
        in: "query"
        description: "If true passed then uses scroll pagination instead of default\
          \ one"
        required: false
        type: "boolean"
        x-exportParamName: "Scroll"
        x-optionalDataType: "Bool"
      - name: "scroll_id"
        in: "query"
        description: "In order to get next batch of results using scroll pagination\
          \ the scroll_id is required"
        required: false
        type: "string"
        x-exportParamName: "ScrollId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Returns a segment"
          schema:
            $ref: "#/definitions/SegmentSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Segment does not exist"
    delete:
      summary: "Delete a particular segment from an asset by id"
      description: "\nRequired roles:\n - can_delete_segments"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "segment_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "SegmentId"
      - name: "soft_delete"
        in: "query"
        required: false
        type: "boolean"
        x-exportParamName: "SoftDelete"
        x-optionalDataType: "Bool"
      responses:
        "204":
          description: "Without body"
        "401":
          description: "Token is invalid"
        "404":
          description: "Segment not found"
    patch:
      summary: "Update segment"
      description: "\nRequired roles:\n - can_write_segments"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "segment_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "SegmentId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/EditSegmentSchema"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Returns an updated segment"
          schema:
            $ref: "#/definitions/SegmentSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Segment does not exist"
  /v1/assets/{asset_id}/segments/{segment_id}/reindex/:
    post:
      summary: "Reindex assets segment"
      description: "\nRequired roles:\n - can_reindex_segments"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "segment_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "SegmentId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/ReindexSegmentSchema"
        x-exportParamName: "Body"
      responses:
        "201":
          description: "ID and status of the job"
        "401":
          description: "Token is invalid"
        "404":
          description: "Asset segment does not exist"
  /v1/assets/{asset_id}/segments/{segment_type}/:
    get:
      summary: "List of segments"
      description: "\nRequired roles:\n - can_read_segments"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "segment_type"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "SegmentType"
      - name: "sort"
        in: "query"
        description: "Sort on field (Comma separated)"
        required: false
        type: "string"
        x-exportParamName: "Sort"
        x-optionalDataType: "String"
      - name: "ids"
        in: "query"
        description: "Only include these segments (Comma separated)"
        required: false
        type: "string"
        x-exportParamName: "Ids"
        x-optionalDataType: "String"
      - name: "query"
        in: "query"
        description: "Search using query"
        required: false
        type: "string"
        x-exportParamName: "Query"
        x-optionalDataType: "String"
      - name: "includes"
        in: "query"
        description: "Only include fields (Comma separated)"
        required: false
        type: "string"
        x-exportParamName: "Includes"
        x-optionalDataType: "String"
      - name: "per_page"
        in: "query"
        description: "The number of items for each page"
        required: false
        type: "integer"
        x-exportParamName: "PerPage"
        x-optionalDataType: "Int32"
      - name: "page"
        in: "query"
        description: "Which page number to fetch"
        required: false
        type: "integer"
        default: 1
        minimum: 1
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "scroll"
        in: "query"
        description: "If true passed then uses scroll pagination instead of default\
          \ one"
        required: false
        type: "boolean"
        x-exportParamName: "Scroll"
        x-optionalDataType: "Bool"
      - name: "scroll_id"
        in: "query"
        description: "In order to get next batch of results using scroll pagination\
          \ the scroll_id is required"
        required: false
        type: "string"
        x-exportParamName: "ScrollId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Returns a list of segments"
          schema:
            $ref: "#/definitions/SegmentsSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Page number does not exist"
  /v1/assets/{asset_id}/uploads/:
    delete:
      summary: "Delete a particular asset by id on failed uplaod"
      description: "\nRequired roles:\n - can_create_assets"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      responses:
        "204":
          description: "Without body"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Asset does not exist"
  /v1/assets/{asset_id}/versions/:
    post:
      summary: "Add asset version"
      description: "\nRequired roles:\n - can_write_versions"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/CreateAssetVersionSchema"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Returns an updated asset"
          schema:
            $ref: "#/definitions/AssetVersionsSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Asset does not exist"
  /v1/assets/{asset_id}/versions/from/assets/{source_asset_id}/:
    post:
      summary: "Create a new asset's version from another asset"
      description: "\nRequired roles:\n - can_write_versions"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "source_asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "SourceAssetId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/CreateAssetVersionFromAssetSchema"
        x-exportParamName: "Body"
      responses:
        "202":
          description: "Returns nothing"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Source or destination asset does not exist"
  /v1/assets/{asset_id}/versions/old/:
    delete:
      summary: "Delete all asset versions except the latest one"
      description: "\nRequired roles:\n - can_delete_versions"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      responses:
        "204":
          description: "Without body"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Asset does not exist"
  /v1/assets/{asset_id}/versions/{version_id}/:
    put:
      summary: "Edit asset version"
      description: "\nRequired roles:\n - can_write_versions"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "version_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "VersionId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/AssetVersionSchema"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Returns an updated asset"
          schema:
            $ref: "#/definitions/AssetVersionSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Asset does not exist"
    delete:
      summary: "Delete a particular asset version by id"
      description: "\nRequired roles:\n - can_delete_versions"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "version_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "VersionId"
      responses:
        "204":
          description: "Without body"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Asset does not exist"
    patch:
      summary: "Edit asset version"
      description: "\nRequired roles:\n - can_write_versions"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "version_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "VersionId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/AssetVersionSchema"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Returns an updated asset"
          schema:
            $ref: "#/definitions/AssetVersionSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Asset does not exist"
  /v1/assets/{asset_id}/versions/{version_id}/promote/:
    put:
      summary: "Promote a particular asset version to a latest version"
      description: "\nRequired roles:\n - can_write_versions"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "version_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "VersionId"
      responses:
        "204":
          description: "Without body"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Asset does not exist"
  /v1/assets/{asset_id}/versions/{version_id}/transcriptions/properties/:
    get:
      summary: "Get a list of transcription properties"
      description: "\nRequired roles:\n - can_read_transcriptions"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "version_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "VersionId"
      responses:
        "200":
          description: "Returns a list of transcription properties"
          schema:
            $ref: "#/definitions/AssetTranscriptionsPropertiesSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Transcription does not exist"
    post:
      summary: "Add a new transcription properties"
      description: "\nRequired roles:\n - can_write_transcriptions"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "version_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "VersionId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/AssetTranscriptionPropertiesSchema"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Returns transcription properties"
          schema:
            $ref: "#/definitions/AssetTranscriptionPropertiesSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Transcription properties do not exist"
  /v1/assets/{asset_id}/versions/{version_id}/transcriptions/subtitles/:
    post:
      summary: "Add a new transcription properties"
      description: "\nRequired roles:\n - can_write_transcriptions"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "version_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "VersionId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/AssetTranscriptionFromSubtitleSchema"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Returns transcription properties"
          schema:
            $ref: "#/definitions/AssetTranscriptionPropertiesSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Transcription properties do not exist"
  /v1/assets/{asset_id}/versions/{version_id}/transcriptions/{transcription_id}/properties/:
    get:
      summary: "Get a transcription properties by ID"
      description: "\nRequired roles:\n - can_read_transcriptions"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "version_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "VersionId"
      - name: "transcription_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "TranscriptionId"
      responses:
        "200":
          description: "Returns a transcription properties"
          schema:
            $ref: "#/definitions/AssetTranscriptionPropertiesSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Transcription properties do not exist"
    put:
      summary: "Update transcription properties by ID"
      description: "\nRequired roles:\n - can_write_transcriptions"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "version_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "VersionId"
      - name: "transcription_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "TranscriptionId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/AssetTranscriptionPropertiesSchema"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Returns transcription properties"
          schema:
            $ref: "#/definitions/AssetTranscriptionPropertiesSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Transcription properties do not exist"
    delete:
      summary: "Delete transcription properties by ID"
      description: "\nRequired roles:\n - can_delete_transcriptions"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "version_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "VersionId"
      - name: "transcription_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "TranscriptionId"
      responses:
        "204":
          description: "Without body"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Transcription properties do not exist"
    patch:
      summary: "Update transcription properties by ID"
      description: "\nRequired roles:\n - can_write_transcriptions"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "asset_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "AssetId"
      - name: "version_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "VersionId"
      - name: "transcription_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "TranscriptionId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/AssetTranscriptionPropertiesSchema"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Returns transcription properties"
          schema:
            $ref: "#/definitions/AssetTranscriptionPropertiesSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Transcription properties do not exist"
  /v1/collections/:
    get:
      summary: "Get list of collections"
      description: "\nRequired roles:\n - can_read_collections"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "per_page"
        in: "query"
        description: "The number of items for each page"
        required: false
        type: "integer"
        x-exportParamName: "PerPage"
        x-optionalDataType: "Int32"
      - name: "page"
        in: "query"
        description: "Which page number to fetch"
        required: false
        type: "integer"
        default: 1
        minimum: 1
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "sort"
        in: "query"
        description: "A comma separated list of fieldnames with order. For example\
          \ - title,asc;is_root,desc"
        required: false
        type: "string"
        x-exportParamName: "Sort"
        x-optionalDataType: "String"
      - name: "is_root"
        in: "query"
        description: "Filter by is_root"
        required: false
        type: "string"
        x-exportParamName: "IsRoot"
        x-optionalDataType: "String"
      - name: "status"
        in: "query"
        description: "Filter by status"
        required: false
        type: "string"
        x-exportParamName: "Status"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Returns a list of collections"
          schema:
            $ref: "#/definitions/CollectionsSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Requested page does not exist"
    post:
      summary: "Create a new collection"
      description: "\nRequired roles:\n - can_create_collections"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "apply_default_acls"
        in: "query"
        description: "Adds default ACLs to a collection"
        required: false
        type: "boolean"
        default: true
        x-exportParamName: "ApplyDefaultAcls"
        x-optionalDataType: "Bool"
      - name: "apply_collection_acls"
        in: "query"
        description: "Adds containing collection's ACLs to a collection"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ApplyCollectionAcls"
        x-optionalDataType: "Bool"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/CollectionInputSchema"
        x-exportParamName: "Body"
      responses:
        "201":
          description: "Returns a created collection"
          schema:
            $ref: "#/definitions/CollectionSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
  /v1/collections/content/bulk_acls/: {}
  /v1/collections/content/bulk_analyze/: {}
  /v1/collections/content/bulk_metadata/: {}
  /v1/collections/content/bulk_transcode/: {}
  /v1/collections/content/bulk_transcribe/: {}
  /v1/collections/content/bulk_transfer/: {}
  /v1/collections/inherited_acl/reindex/: {}
  /v1/collections/reindex/:
    post:
      summary: "Trigger reindexing of all collections"
      description: "\nRequired roles:\n - can_reindex_collections"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/ReindexAllCollectionsSchema"
        x-exportParamName: "Body"
      responses:
        "201":
          description: "ID and status of the job"
        "401":
          description: "Token is invalid"
  /v1/collections/{collection_id}/:
    get:
      summary: "Returns a particular collection by id"
      description: "\nRequired roles:\n - can_read_collections"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "collection_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "CollectionId"
      responses:
        "200":
          description: "Returns a collection"
          schema:
            $ref: "#/definitions/CollectionSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
    put:
      summary: "Update collection"
      description: "\nRequired roles:\n - can_write_collections"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "collection_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "CollectionId"
      - name: "change_parent_mode"
        in: "query"
        description: "Set to 'move' or 'copy'. Ignored if 'parent_id' hasn't changed"
        required: false
        type: "string"
        default: "move"
        x-exportParamName: "ChangeParentMode"
        x-optionalDataType: "String"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/CollectionInputSchema"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Returns an updated collection"
          schema:
            $ref: "#/definitions/CollectionSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Collection does not exist"
    delete:
      summary: "Delete a particular collection by id"
      description: "\nRequired roles:\n - can_delete_collections"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "collection_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "CollectionId"
      responses:
        "202":
          description: "Deletion has been scheduled"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Collection does not exist"
    patch:
      summary: "Update collection"
      description: "\nRequired roles:\n - can_write_collections"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "collection_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "CollectionId"
      - name: "change_parent_mode"
        in: "query"
        description: "Set to 'move' or 'copy'. Ignored if 'parent_id' hasn't changed"
        required: false
        type: "string"
        default: "move"
        x-exportParamName: "ChangeParentMode"
        x-optionalDataType: "String"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/CollectionInputSchema"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Returns an updated collection"
          schema:
            $ref: "#/definitions/CollectionSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Collection does not exist"
  /v1/collections/{collection_id}/ancestors/:
    get:
      summary: "Returns list of ancestors of a collection"
      description: "\nRequired roles:\n - can_read_collections"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "collection_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "CollectionId"
      responses:
        "200":
          description: "Returns a collections content"
          schema:
            $ref: "#/definitions/CollectionsSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Collection does not exist"
  /v1/collections/{collection_id}/content/info/:
    get:
      summary: "Returns a sub-collections and assets number for a specific collection"
      description: "\nRequired roles:\n - can_read_collections"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "collection_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "CollectionId"
      responses:
        "200":
          description: "Returns a sub-collections and assets number"
          schema:
            $ref: "#/definitions/CollectionContentInfoSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
  /v1/collections/{collection_id}/contents/:
    get:
      summary: "Returns contents of a collection by id"
      description: "\nRequired roles:\n - can_read_collections"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "collection_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "CollectionId"
      - name: "object_types"
        in: "query"
        description: "Comma separated list of content types. Example - assets,collections"
        required: false
        type: "string"
        x-exportParamName: "ObjectTypes"
        x-optionalDataType: "String"
      - name: "object_ids"
        in: "query"
        description: "Comma separated list of content ids."
        required: false
        type: "string"
        x-exportParamName: "ObjectIds"
        x-optionalDataType: "String"
      - name: "external_id"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "ExternalId"
        x-optionalDataType: "String"
      - name: "per_page"
        in: "query"
        description: "The number of items for each page"
        required: false
        type: "integer"
        x-exportParamName: "PerPage"
        x-optionalDataType: "Int32"
      - name: "page"
        in: "query"
        description: "Which page number to fetch"
        required: false
        type: "integer"
        default: 1
        minimum: 1
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "sort"
        in: "query"
        description: "A comma separated list of fieldnames with order. For example\
          \ - first_name,asc;last_name,desc"
        required: false
        type: "string"
        x-exportParamName: "Sort"
        x-optionalDataType: "String"
      - name: "filter"
        in: "query"
        description: "A comma separated list of fieldnames with order For example\
          \ - first_name,eq,Vlad;last_name,eq,Gudkov"
        required: false
        type: "string"
        x-exportParamName: "Filter"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Returns a collections content"
          schema:
            $ref: "#/definitions/AssetsSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Collection does not exist"
    post:
      summary: "Add an object to a collection"
      description: "\nRequired roles:\n - can_write_collections"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "collection_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "CollectionId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/CollectionContentSchema"
        x-exportParamName: "Body"
      responses:
        "201":
          description: "Content added"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Collection not found"
  /v1/collections/{collection_id}/contents/ordering/custom/:
    post:
      summary: "Enable custom ordering for a collection's content"
      description: "\nRequired roles:\n - can_write_collections"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "collection_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "CollectionId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/CreateCollectionContentOrderingSchema"
        x-exportParamName: "Body"
      responses:
        "202":
          description: "Schedules a background job that will order the collection"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Collection not found"
    delete:
      summary: "Disable custom ordering for a collection's content"
      description: "\nRequired roles:\n - can_write_collections"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "collection_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "CollectionId"
      responses:
        "200":
          description: "Disables custom ordering for a collection's content"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Collection not found"
  /v1/collections/{collection_id}/contents/{object_type}/{object_id}/:
    put:
      summary: "Update an order of a particular content object in a collection"
      description: "\nRequired roles:\n - can_write_collections"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "collection_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "CollectionId"
      - name: "object_type"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ObjectType"
      - name: "object_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ObjectId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/CollectionContentOrderingSchema"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Without body"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Content object not found"
    delete:
      summary: "Delete a particular content object in a collection by id"
      description: "\nRequired roles:\n - can_write_collections"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "collection_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "CollectionId"
      - name: "object_type"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ObjectType"
      - name: "object_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ObjectId"
      responses:
        "204":
          description: "Without body"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Content object not found"
  /v1/collections/{collection_id}/contents/{object_type}/{object_id}/reindex/:
    post:
      summary: "Reindex collection content"
      description: "\nRequired roles:\n - can_reindex_collections"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "collection_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "CollectionId"
      - name: "object_type"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ObjectType"
      - name: "object_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ObjectId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/ReindexCollectionContentSchema"
        x-exportParamName: "Body"
      responses:
        "201":
          description: "ID and status of the job"
        "401":
          description: "Token is invalid"
        "404":
          description: "Collection content does not exist"
  /v1/collections/{collection_id}/keyframes/:
    post:
      summary: "Pick up to three asset_ids for collection keyframes"
      description: "\nRequired roles:\n - can_reindex_collections"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "collection_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "CollectionId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/SynchronizeCollectionKeyframesSchema"
        x-exportParamName: "Body"
      responses:
        "202":
          description: "Transcode job started"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Collection does not exist"
  /v1/collections/{collection_id}/purge/:
    delete:
      summary: "Purges deleted collection by id immediately"
      description: "\nRequired roles:\n - can_purge_collections"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "collection_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "CollectionId"
      responses:
        "202":
          description: "Status and job_id"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "403":
          description: "Forbidden - Collection is not empty"
        "404":
          description: "Collection does not exist"
  /v1/collections/{collection_id}/reindex/:
    post:
      summary: "Reindex collection"
      description: "\nRequired roles:\n - can_reindex_collections"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "collection_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "CollectionId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/ReindexCollectionSchema"
        x-exportParamName: "Body"
      responses:
        "201":
          description: "ID and status of the job"
        "401":
          description: "Token is invalid"
        "404":
          description: "Collection does not exist"
  /v1/collections/{collection_id}/reindex/contents/:
    post:
      summary: "Reindex collection and its content"
      description: "\nRequired roles:\n - can_reindex_collections"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "collection_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "CollectionId"
      responses:
        "201":
          description: "ID and status of the job"
        "401":
          description: "Token is invalid"
        "404":
          description: "Collection does not exist"
  /v1/collections/{collection_id}/restore/:
    put:
      summary: "Restore deleted collection by id"
      description: "\nRequired roles:\n - can_write_collections"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "collection_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "CollectionId"
      responses:
        "201":
          description: "Without body"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "403":
          description: "Forbidden - Collection is not empty"
        "404":
          description: "Collection does not exist"
  /v1/collections/{collection_id}/search_document/:
    put:
      summary: "Update metadata for collection"
      description: "\nRequired roles:\n - can_reindex_collections"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "collection_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "CollectionId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/CollectionSchema"
        x-exportParamName: "Body"
      responses:
        "204":
          description: "Collection metadata updated"
        "400":
          description: "No metadata supplied"
        "401":
          description: "Token is invalid"
        "404":
          description: "Collection does not exist in search index"
  /v1/collections/{collection_id}/subcollections/:
    post:
      summary: "Copy a collection (recursively) in to another collection"
      description: "\nRequired roles:\n - can_write_collections"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "collection_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "CollectionId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/CollectionContentSchema"
        x-exportParamName: "Body"
      responses:
        "201":
          description: "Content added"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Collection not found"
  /v1/custom_actions/:
    get:
      summary: "Get list of custom actions"
      description: "\nRequired roles:\n - can_read_custom_actions"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      responses:
        "200":
          description: "Returns a list of custom actions"
          schema:
            $ref: "#/definitions/CustomActionsSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Requested page does not exist"
  /v1/custom_actions/shared/{context}/{action_id}/callback/:
    post:
      summary: "Schedules a celery task that will call custom action on shares"
      description: "\nRequired roles:\n - can_read_custom_actions"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "context"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Context"
      - name: "action_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ActionId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/CustomActionCallbackSchema"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Returns a custom action reply"
          schema:
            $ref: "#/definitions/CustomActionCallbackReplySchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Requested page does not exist"
  /v1/custom_actions/{context}/:
    get:
      summary: "Get list of custom actions by context"
      description: "\nRequired roles:\n - can_read_custom_actions"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "context"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Context"
      responses:
        "200":
          description: "Returns a list of custom actions by context"
          schema:
            $ref: "#/definitions/CustomActionsSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Requested page does not exist"
    post:
      summary: "Create an custom action"
      description: "\nRequired roles:\n - can_write_custom_actions"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "context"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Context"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/CustomActionSchema"
        x-exportParamName: "Body"
      responses:
        "201":
          description: "Returns a created custom action"
          schema:
            $ref: "#/definitions/CustomActionSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
  /v1/custom_actions/{context}/{action_id}/:
    get:
      summary: "Get an asset custom action"
      description: "\nRequired roles:\n - can_read_custom_actions"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "context"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Context"
      - name: "action_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ActionId"
      responses:
        "201":
          description: "Returns a created asset custom action"
          schema:
            $ref: "#/definitions/CustomActionSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
    put:
      summary: "Update an custom action"
      description: "\nRequired roles:\n - can_write_custom_actions"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "context"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Context"
      - name: "action_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ActionId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/CustomActionSchema"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Returns an created custom action"
          schema:
            $ref: "#/definitions/CustomActionSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
    delete:
      summary: "Deletes an custom action"
      description: ""
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "context"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Context"
      - name: "action_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ActionId"
      responses:
        "204":
          description: "Without body"
          schema:
            $ref: "#/definitions/CustomActionSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
    patch:
      summary: "Update an custom action"
      description: "\nRequired roles:\n - can_write_custom_actions"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "context"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Context"
      - name: "action_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ActionId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/CustomActionSchema"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Returns an created custom action"
          schema:
            $ref: "#/definitions/CustomActionSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
  /v1/custom_actions/{context}/{action_id}/callback/:
    post:
      summary: "Schedules a celery task that will call custom action"
      description: "\nRequired roles:\n - can_read_custom_actions"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "context"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Context"
      - name: "action_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ActionId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/CustomActionCallbackSchema"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Returns a custom action reply"
          schema:
            $ref: "#/definitions/CustomActionCallbackReplySchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Requested page does not exist"
  /v1/delete_queue/assets/:
    get:
      summary: "Get deleted objects"
      description: "\nRequired roles:\n - can_read_assets"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "per_page"
        in: "query"
        description: "The number of items for each page"
        required: false
        type: "integer"
        x-exportParamName: "PerPage"
        x-optionalDataType: "Int32"
      - name: "page"
        in: "query"
        description: "Which page number to fetch"
        required: false
        type: "integer"
        default: 1
        minimum: 1
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "sort"
        in: "query"
        description: "A comma separated list of fieldnames with order. For example\
          \ - first_name,asc;last_name,desc"
        required: false
        type: "string"
        x-exportParamName: "Sort"
        x-optionalDataType: "String"
      - name: "filter"
        in: "query"
        description: "A comma separated list of fieldnames with order For example\
          \ - first_name,eq,Vlad;last_name,eq,Gudkov"
        required: false
        type: "string"
        x-exportParamName: "Filter"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Returns a list of asset"
          schema:
            $ref: "#/definitions/AssetsSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Requested page does not exist"
    post:
      summary: "Add assets to a delete queue (Mark assets as deleted)"
      description: "\nRequired roles:\n - can_delete_assets"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/DeleteQueueSchema"
        x-exportParamName: "Body"
      responses:
        "204":
          description: "Without body"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
    delete:
      summary: "Delete assets from delete queue (Mark assets as active again)"
      description: "\nRequired roles:\n - can_write_assets"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/DeleteQueueSchema"
        x-exportParamName: "Body"
      responses:
        "204":
          description: "Without body"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
  /v1/delete_queue/assets/purge/:
    post:
      summary: "Purge assets from delete queue (Permanently delete)"
      description: "\nRequired roles:\n - can_purge_assets"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/DeleteQueueSchema"
        x-exportParamName: "Body"
      responses:
        "204":
          description: "Without body"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
  /v1/delete_queue/assets/purge/all/:
    post:
      summary: "Purge all assets from delete queue (Permanently delete)"
      description: "\nRequired roles:\n - can_purge_assets"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      responses:
        "204":
          description: "Without body"
        "401":
          description: "Token is invalid"
        "403":
          description: "User does not have permission"
  /v1/delete_queue/bulk/:
    post:
      summary: "Bulk delete objects"
      description: "\nRequired roles:\n - can_delete_assets"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/BulkDeleteSchema"
        x-exportParamName: "Body"
      responses:
        "202":
          description: "Bulk delete was scheduled"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
  /v1/delete_queue/collections/:
    get:
      summary: "Get list of collections"
      description: "\nRequired roles:\n - can_read_collections"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "per_page"
        in: "query"
        description: "The number of items for each page"
        required: false
        type: "integer"
        x-exportParamName: "PerPage"
        x-optionalDataType: "Int32"
      - name: "page"
        in: "query"
        description: "Which page number to fetch"
        required: false
        type: "integer"
        default: 1
        minimum: 1
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "sort"
        in: "query"
        description: "A comma separated list of fieldnames with order. For example\
          \ - first_name,asc;last_name,desc"
        required: false
        type: "string"
        x-exportParamName: "Sort"
        x-optionalDataType: "String"
      - name: "filter"
        in: "query"
        description: "A comma separated list of fieldnames with order For example\
          \ - first_name,eq,Vlad;last_name,eq,Gudkov"
        required: false
        type: "string"
        x-exportParamName: "Filter"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Returns a list of collections"
          schema:
            $ref: "#/definitions/CollectionsSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Requested page does not exist"
    post:
      summary: "Add collections to a delete queue (Mark collections as deleted)"
      description: "\nRequired roles:\n - can_delete_collections"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/DeleteQueueSchema"
        x-exportParamName: "Body"
      responses:
        "201":
          description: "Without body"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "403":
          description: "Forbidden - Collection is not empty"
    delete:
      summary: "Delete collections from delete queue (Mark collections as active again)"
      description: "\nRequired roles:\n - can_write_collections"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/DeleteQueueSchema"
        x-exportParamName: "Body"
      responses:
        "201":
          description: "Without body"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "403":
          description: "Forbidden - Collection is not empty"
  /v1/delete_queue/collections/purge/:
    post:
      summary: "Purge collections from delete queue (Permanently delete)"
      description: "\nRequired roles:\n - can_purge_collections"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/DeleteQueueSchema"
        x-exportParamName: "Body"
      responses:
        "201":
          description: "Without body"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "403":
          description: "Forbidden - Collection is not empty"
  /v1/delete_queue/collections/purge/all/:
    post:
      summary: "Purge all collections from delete queue (Permanently delete)"
      description: "\nRequired roles:\n - can_purge_collections"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      responses:
        "204":
          description: "Without body"
        "401":
          description: "Token is invalid"
        "403":
          description: "User does not have permission"
  /v1/delete_queue/purge/all/:
    post:
      summary: "Purge all assets and collections from delete queue (Permanently delete)"
      description: "\nRequired roles:\n - can_purge_assets\n- can_purge_collections"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      responses:
        "204":
          description: "Without body"
        "401":
          description: "Token is invalid"
        "403":
          description: "User does not have permission"
  /v1/segments/{segment_id}/metadata_update/: {}
  /v1/share/{object_type}/:
    post:
      summary: "Create a new share of multiple objects (currently only assets are\
        \ supported)"
      description: "\nRequired roles:\n - can_write_shares"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "object_type"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ObjectType"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/BulkShareCreateSchema"
        x-exportParamName: "Body"
      responses:
        "201":
          description: "Returns a created share"
          schema:
            $ref: "#/definitions/ShareSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "403":
          description: "Shares are restricted by system administator"
  /v1/shares/auth/login/:
    post:
      summary: "Login for share"
      description: ""
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/ShareLoginSchema"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Returns a token"
          schema:
            $ref: "#/definitions/ShareTokenSchema"
        "400":
          description: "Bad request"
        "404":
          description: "Share does not exist"
  /v1/shares/auth/token/:
    get:
      summary: "Check if a token is valid"
      description: ""
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Share-Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "ShareAuthToken"
      responses:
        "200":
          description: "Returns an updated share"
          schema:
            $ref: "#/definitions/ShareTokenSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Share does not exist"
  /v1/{object_type}/{object_id}/approvals/:
    get:
      summary: "Returns an objects approval request"
      description: "\nRequired roles:\n - can_read_approval_request"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "object_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ObjectId"
      - name: "object_type"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ObjectType"
      responses:
        "200":
          description: "Returns a objects approval"
          schema:
            $ref: "#/definitions/ApprovalsBySchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Requested page does not exist"
    put:
      summary: "Returns an objects approval status"
      description: "\nRequired roles:\n - can_write_approval_status"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "object_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ObjectId"
      - name: "object_type"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ObjectType"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/ApprovalBySchema"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Returns a objects approval"
          schema:
            $ref: "#/definitions/ApprovalBySchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Requested page does not exist"
    delete:
      summary: "Deletes an objects approval status"
      description: ""
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "object_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ObjectId"
      - name: "object_type"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ObjectType"
      responses:
        "204":
          description: "Empty body"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Requested page does not exist"
  /v1/{object_type}/{object_id}/approvals/external/{email}/:
    delete:
      summary: "Deletes an objects approval status by user_id"
      description: "\nRequired roles:\n - can_delete_approval_status"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "object_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ObjectId"
      - name: "object_type"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ObjectType"
      - name: "email"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Email"
      responses:
        "204":
          description: "Empty body"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Requested page does not exist"
  /v1/{object_type}/{object_id}/approvals/request/:
    get:
      summary: "Returns an objects approval request"
      description: "\nRequired roles:\n - can_read_approval_request"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "object_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ObjectId"
      - name: "object_type"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ObjectType"
      responses:
        "200":
          description: "Returns a objects approval"
          schema:
            $ref: "#/definitions/ApprovalSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Requested page does not exist"
    post:
      summary: "Creates an objects approval request"
      description: "\nRequired roles:\n - can_write_approval_request"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "object_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ObjectId"
      - name: "object_type"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ObjectType"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/ApprovalSchema"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Returns a objects approval"
          schema:
            $ref: "#/definitions/ApprovalSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Requested page does not exist"
    put:
      summary: "Edits an approval request"
      description: "\nRequired roles:\n - can_write_approval_request"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "object_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ObjectId"
      - name: "object_type"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ObjectType"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/ApprovalSchema"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Returns a assets approval"
          schema:
            $ref: "#/definitions/ApprovalSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Requested page does not exist"
    delete:
      summary: "Deletes an objects approval request"
      description: "\nRequired roles:\n - can_delete_approval_request"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "object_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ObjectId"
      - name: "object_type"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ObjectType"
      responses:
        "200":
          description: "Returns a objects approval"
          schema:
            $ref: "#/definitions/ApprovalSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Requested page does not exist"
    patch:
      summary: "Edits an approval request"
      description: "\nRequired roles:\n - can_write_approval_request"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "object_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ObjectId"
      - name: "object_type"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ObjectType"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/ApprovalSchema"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Returns a assets approval"
          schema:
            $ref: "#/definitions/ApprovalSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Requested page does not exist"
  /v1/{object_type}/{object_id}/approvals/user/{user_id}/:
    delete:
      summary: "Deletes an objects approval status by user_id"
      description: "\nRequired roles:\n - can_delete_approval_status"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "object_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ObjectId"
      - name: "object_type"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ObjectType"
      - name: "user_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "UserId"
      responses:
        "204":
          description: "Empty body"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Requested page does not exist"
  /v1/{object_type}/{object_id}/shares/:
    get:
      summary: "Get list of shares"
      description: "\nRequired roles:\n - can_read_shares"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "object_type"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ObjectType"
      - name: "object_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ObjectId"
      - name: "per_page"
        in: "query"
        description: "The number of items for each page"
        required: false
        type: "integer"
        x-exportParamName: "PerPage"
        x-optionalDataType: "Int32"
      - name: "last_id"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "LastId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Returns a list of share"
          schema:
            $ref: "#/definitions/SharesSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Requested page does not exist"
    post:
      summary: "Create a new share"
      description: "\nRequired roles:\n - can_write_shares"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "object_type"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ObjectType"
      - name: "object_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ObjectId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/ShareCreateSchema"
        x-exportParamName: "Body"
      responses:
        "201":
          description: "Returns a created share; the URL field will be null as a notification\
            \ email has been sent to the specified email addresses with the share\
            \ URLs embedded in it"
          schema:
            $ref: "#/definitions/ShareSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "403":
          description: "Shares are restricted by system administator"
  /v1/{object_type}/{object_id}/shares/url/:
    post:
      summary: "Generates a URL for the shared object"
      description: "\nRequired roles:\n - can_write_shares"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "object_type"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ObjectType"
      - name: "object_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ObjectId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/ShareURLCreateSchema"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Returns a URL link in the body of the response that can be\
            \ shared and used to access the object"
          schema:
            $ref: "#/definitions/ShareURLSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "403":
          description: "Shares are restricted by system administator"
  /v1/{object_type}/{object_id}/shares/{share_id}/:
    get:
      summary: "Returns a particular share by id"
      description: ""
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "object_type"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ObjectType"
      - name: "object_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ObjectId"
      - name: "share_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ShareId"
      responses:
        "200":
          description: "Returns a share"
          schema:
            $ref: "#/definitions/ShareSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Share does not exist"
    put:
      summary: "Update share"
      description: "\nRequired roles:\n - can_write_shares"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "object_type"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ObjectType"
      - name: "object_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ObjectId"
      - name: "share_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ShareId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/ShareSchema"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Returns an updated share"
          schema:
            $ref: "#/definitions/ShareSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Share does not exist"
    delete:
      summary: "Delete a particular share by id"
      description: "\nRequired roles:\n - can_delete_object_shares"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "object_type"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ObjectType"
      - name: "object_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ObjectId"
      - name: "share_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ShareId"
      responses:
        "204":
          description: "Without body"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Share does not exist"
  /v1/{object_type}/{object_id}/shares/{share_id}/users/:
    get:
      summary: "Get list of share users"
      description: "\nRequired roles:\n - can_read_shares"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "object_type"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ObjectType"
      - name: "object_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ObjectId"
      - name: "share_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ShareId"
      - name: "per_page"
        in: "query"
        description: "The number of items for each page"
        required: false
        type: "integer"
        x-exportParamName: "PerPage"
        x-optionalDataType: "Int32"
      - name: "last_id"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "LastId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Returns a list of share"
          schema:
            $ref: "#/definitions/ShareUsersSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Requested page does not exist"
    post:
      summary: "Add a new share_user to a share"
      description: "\nRequired roles:\n - can_write_shares"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "object_type"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ObjectType"
      - name: "object_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ObjectId"
      - name: "share_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ShareId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/ShareUserSchema"
        x-exportParamName: "Body"
      responses:
        "201":
          description: "Returns a created share"
          schema:
            $ref: "#/definitions/ShareUserSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
  /v1/{object_type}/{object_id}/shares/{share_id}/users/{share_user_id}/:
    get:
      summary: "Returns a particular share user by id"
      description: "\nRequired roles:\n - can_read_shares"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "object_type"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ObjectType"
      - name: "object_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ObjectId"
      - name: "share_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ShareId"
      - name: "share_user_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ShareUserId"
      responses:
        "200":
          description: "Returns a share"
          schema:
            $ref: "#/definitions/ShareUserSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Share does not exist"
    put:
      summary: "Update share user"
      description: "\nRequired roles:\n - can_write_shares"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "object_type"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ObjectType"
      - name: "object_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ObjectId"
      - name: "share_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ShareId"
      - name: "share_user_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ShareUserId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/ShareUserSchema"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Returns an updated share"
          schema:
            $ref: "#/definitions/ShareUserSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Share does not exist"
    delete:
      summary: "Delete a particular share_user user by id"
      description: "\nRequired roles:\n - can_write_shares"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "object_type"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ObjectType"
      - name: "object_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ObjectId"
      - name: "share_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ShareId"
      - name: "share_user_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ShareUserId"
      responses:
        "204":
          description: "No body"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Share does not exist"
    patch:
      summary: "Update share user"
      description: "\nRequired roles:\n - can_write_shares"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "object_type"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ObjectType"
      - name: "object_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ObjectId"
      - name: "share_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ShareId"
      - name: "share_user_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ShareUserId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/ShareUserSchema"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Returns an updated share"
          schema:
            $ref: "#/definitions/ShareUserSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Share does not exist"
  /v1/{object_type}/{object_id}/versions/{version_id}/approvals/:
    get:
      summary: "Returns an objects approval request by version"
      description: "\nRequired roles:\n - can_read_approval_request"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "object_type"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ObjectType"
      - name: "object_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ObjectId"
      - name: "version_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "VersionId"
      responses:
        "200":
          description: "Returns a objects approval"
          schema:
            $ref: "#/definitions/ApprovalsBySchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Requested page does not exist"
  /v1/{object_type}/{object_id}/versions/{version_id}/approvals/request/:
    get:
      summary: "Returns an objects approval request by version"
      description: "\nRequired roles:\n - can_read_approval_request"
      parameters:
      - name: "App-ID"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AppID"
      - name: "Auth-Token"
        in: "header"
        required: true
        type: "string"
        x-exportParamName: "AuthToken"
      - name: "object_type"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ObjectType"
      - name: "object_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ObjectId"
      - name: "version_id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "VersionId"
      responses:
        "200":
          description: "Returns a objects approval"
          schema:
            $ref: "#/definitions/ApprovalSchema"
        "400":
          description: "Bad request"
        "401":
          description: "Token is invalid"
        "404":
          description: "Requested page does not exist"
definitions:
  ApprovalBySchema:
    type: "object"
    properties:
      change_date:
        type: "string"
        format: "date-time"
      external:
        type: "string"
      object_id:
        type: "string"
        readOnly: true
      object_type:
        type: "string"
        readOnly: true
      status:
        type: "string"
        enum:
        - "N/A"
        - "REQUESTED"
        - "APPROVED"
        - "NOT_APPROVED"
        - "MIXED"
      user:
        type: "string"
      version_id:
        type: "string"
        readOnly: true
    example:
      external: "external"
      object_type: "object_type"
      change_date: "2000-01-23T04:56:07.000+00:00"
      version_id: "version_id"
      object_id: "object_id"
      user: "user"
      status: "N/A"
  ApprovalSchema:
    type: "object"
    properties:
      change_date:
        type: "string"
        format: "date-time"
      externals:
        type: "string"
      groups:
        type: "string"
      min_number:
        type: "integer"
        format: "int32"
        minimum: -2147483648
        maximum: 2147483647
      object_id:
        type: "string"
        readOnly: true
      object_type:
        type: "string"
        readOnly: true
      request_date:
        type: "string"
        format: "date-time"
      requested_by:
        type: "string"
        readOnly: true
      share_id:
        type: "string"
        x-nullable: true
      status:
        type: "string"
        enum:
        - "N/A"
        - "REQUESTED"
        - "APPROVED"
        - "NOT_APPROVED"
        - "MIXED"
      user_status:
        type: "string"
        readOnly: true
        enum:
        - "N/A"
        - "REQUESTED"
        - "APPROVED"
        - "NOT_APPROVED"
        - "MIXED"
        x-nullable: true
      users:
        type: "string"
      users_info:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/UserSchema"
      version_id:
        type: "string"
        readOnly: true
    example:
      user_status: "N/A"
      object_type: "object_type"
      change_date: "2000-01-23T04:56:07.000+00:00"
      groups: "groups"
      version_id: "version_id"
      object_id: "object_id"
      users: "users"
      share_id: "share_id"
      users_info:
      - last_name: "last_name"
        photo: "photo"
        photo_big: "photo_big"
        photo_small: "photo_small"
        id: "id"
        first_name: "first_name"
        email: "email"
      - last_name: "last_name"
        photo: "photo"
        photo_big: "photo_big"
        photo_small: "photo_small"
        id: "id"
        first_name: "first_name"
        email: "email"
      requested_by: "requested_by"
      min_number: -1803530559
      request_date: "2000-01-23T04:56:07.000+00:00"
      externals: "externals"
      status: "N/A"
  ApprovalsBySchema:
    type: "object"
    properties:
      first_url:
        type: "string"
        readOnly: true
      last_url:
        type: "string"
        readOnly: true
      next_url:
        type: "string"
        readOnly: true
      objects:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/ApprovalBySchema"
      page:
        type: "integer"
        format: "int32"
        readOnly: true
        minimum: -2147483648
        maximum: 2147483647
      pages:
        type: "integer"
        format: "int32"
        readOnly: true
        minimum: -2147483648
        maximum: 2147483647
      per_page:
        type: "integer"
        format: "int32"
        readOnly: true
        minimum: -2147483648
        maximum: 2147483647
      prev_url:
        type: "string"
        readOnly: true
      scroll_id:
        type: "string"
        readOnly: true
      total:
        type: "integer"
        format: "int64"
        readOnly: true
        minimum: -9223372036854775808
        maximum: 9223372036854775807
    example:
      per_page: -1517921766
      first_url: "first_url"
      total: 1774823812569044992
      pages: 441289069
      objects:
      - external: "external"
        object_type: "object_type"
        change_date: "2000-01-23T04:56:07.000+00:00"
        version_id: "version_id"
        object_id: "object_id"
        user: "user"
        status: "N/A"
      - external: "external"
        object_type: "object_type"
        change_date: "2000-01-23T04:56:07.000+00:00"
        version_id: "version_id"
        object_id: "object_id"
        user: "user"
        status: "N/A"
      next_url: "next_url"
      page: -1803530559
      scroll_id: "scroll_id"
      prev_url: "prev_url"
      last_url: "last_url"
  AssetBaseSchema:
    type: "object"
    required:
    - "title"
    properties:
      analyze_status:
        type: "string"
        enum:
        - "N/A"
        - "REQUESTED"
        - "IN_PROGRESS"
        - "FAILED"
        - "DONE"
      archive_status:
        type: "string"
        enum:
        - "NOT_ARCHIVED"
        - "ARCHIVING"
        - "FAILED_TO_ARCHIVE"
        - "ARCHIVED"
      category:
        type: "string"
        x-nullable: true
      created_by_user:
        type: "string"
        readOnly: true
      created_by_user_info:
        $ref: "#/definitions/UserSchema"
      custom_keyframe:
        type: "string"
        x-nullable: true
      custom_poster:
        type: "string"
        x-nullable: true
      date_created:
        type: "string"
        format: "date-time"
        readOnly: true
      date_deleted:
        type: "string"
        format: "date-time"
        readOnly: true
      date_imported:
        type: "string"
        format: "date-time"
        readOnly: true
      date_modified:
        type: "string"
        format: "date-time"
        readOnly: true
      deleted_by_user:
        type: "string"
        readOnly: true
      deleted_by_user_info:
        $ref: "#/definitions/UserSchema"
      external_id:
        type: "string"
        x-nullable: true
      id:
        type: "string"
        readOnly: true
      is_blocked:
        type: "boolean"
        format: "bool"
        default: true
      is_online:
        type: "boolean"
        format: "bool"
        default: true
      status:
        type: "string"
        enum:
        - "ACTIVE"
        - "DELETED"
      title:
        type: "string"
      type:
        type: "string"
        enum:
        - "ASSET"
        - "SEQUENCE"
        - "NLE_PROJECT"
        - "PLACEHOLDER"
        - "CUSTOM"
      updated_by_user:
        type: "string"
        readOnly: true
      updated_by_user_info:
        $ref: "#/definitions/UserSchema"
      warning:
        type: "string"
        x-nullable: true
  AssetCreateSchema:
    type: "object"
    required:
    - "title"
    properties:
      analyze_status:
        type: "string"
        enum:
        - "N/A"
        - "REQUESTED"
        - "IN_PROGRESS"
        - "FAILED"
        - "DONE"
      archive_status:
        type: "string"
        enum:
        - "NOT_ARCHIVED"
        - "ARCHIVING"
        - "FAILED_TO_ARCHIVE"
        - "ARCHIVED"
      category:
        type: "string"
        x-nullable: true
      collection_id:
        type: "string"
        x-nullable: true
      created_by_user:
        type: "string"
        readOnly: true
      created_by_user_info:
        $ref: "#/definitions/UserSchema"
      custom_keyframe:
        type: "string"
        x-nullable: true
      custom_poster:
        type: "string"
        x-nullable: true
      date_created:
        type: "string"
        format: "date-time"
      date_deleted:
        type: "string"
        format: "date-time"
      date_imported:
        type: "string"
        format: "date-time"
        readOnly: true
      date_modified:
        type: "string"
        format: "date-time"
      deleted_by_user:
        type: "string"
        readOnly: true
      deleted_by_user_info:
        $ref: "#/definitions/UserSchema"
      external_id:
        type: "string"
        x-nullable: true
      id:
        type: "string"
        readOnly: true
      is_blocked:
        type: "boolean"
        format: "bool"
        default: true
      is_online:
        type: "boolean"
        format: "bool"
        default: true
      status:
        type: "string"
        enum:
        - "ACTIVE"
        - "DELETED"
      title:
        type: "string"
      type:
        type: "string"
        enum:
        - "ASSET"
        - "SEQUENCE"
        - "NLE_PROJECT"
        - "PLACEHOLDER"
        - "CUSTOM"
      updated_by_user:
        type: "string"
        readOnly: true
      updated_by_user_info:
        $ref: "#/definitions/UserSchema"
      warning:
        type: "string"
        x-nullable: true
  AssetEditSchema:
    type: "object"
    required:
    - "id"
    properties:
      analyze_status:
        type: "string"
        enum:
        - "N/A"
        - "REQUESTED"
        - "IN_PROGRESS"
        - "FAILED"
        - "DONE"
      archive_status:
        type: "string"
        enum:
        - "NOT_ARCHIVED"
        - "ARCHIVING"
        - "FAILED_TO_ARCHIVE"
        - "ARCHIVED"
      category:
        type: "string"
        x-nullable: true
      created_by_user:
        type: "string"
      created_by_user_info:
        $ref: "#/definitions/UserSchema"
      custom_keyframe:
        type: "string"
        x-nullable: true
      custom_poster:
        type: "string"
        x-nullable: true
      date_created:
        type: "string"
        format: "date-time"
        readOnly: true
      date_deleted:
        type: "string"
        format: "date-time"
        readOnly: true
      date_imported:
        type: "string"
        format: "date-time"
        readOnly: true
      date_modified:
        type: "string"
        format: "date-time"
        readOnly: true
      deleted_by_user:
        type: "string"
      deleted_by_user_info:
        $ref: "#/definitions/UserSchema"
      external_id:
        type: "string"
        x-nullable: true
      id:
        type: "string"
      is_blocked:
        type: "boolean"
        format: "bool"
        default: true
      is_online:
        type: "boolean"
        format: "bool"
        default: true
      status:
        type: "string"
        enum:
        - "ACTIVE"
        - "DELETED"
      title:
        type: "string"
      type:
        type: "string"
        enum:
        - "ASSET"
        - "SEQUENCE"
        - "NLE_PROJECT"
        - "PLACEHOLDER"
        - "CUSTOM"
      updated_by_user:
        type: "string"
        readOnly: true
      updated_by_user_info:
        $ref: "#/definitions/UserSchema"
      warning:
        type: "string"
        x-nullable: true
  AssetElasticSchema:
    type: "object"
    required:
    - "title"
    properties:
      analyze_status:
        type: "string"
        enum:
        - "N/A"
        - "REQUESTED"
        - "IN_PROGRESS"
        - "FAILED"
        - "DONE"
      archive_status:
        type: "string"
        enum:
        - "NOT_ARCHIVED"
        - "ARCHIVING"
        - "FAILED_TO_ARCHIVE"
        - "ARCHIVED"
      category:
        type: "string"
        x-nullable: true
      created_by_user:
        type: "string"
        readOnly: true
      created_by_user_info:
        $ref: "#/definitions/UserSchema"
      custom_keyframe:
        type: "string"
        x-nullable: true
      custom_poster:
        type: "string"
        x-nullable: true
      date_created:
        type: "string"
        readOnly: true
      date_deleted:
        type: "string"
        readOnly: true
      date_imported:
        type: "string"
        format: "date-time"
        readOnly: true
      date_modified:
        type: "string"
        readOnly: true
      deleted_by_user:
        type: "string"
        readOnly: true
      deleted_by_user_info:
        $ref: "#/definitions/UserSchema"
      duration_milliseconds:
        type: "integer"
        format: "int64"
        readOnly: true
        minimum: -9223372036854775808
        maximum: 9223372036854775807
      external_id:
        type: "string"
        x-nullable: true
      files:
        type: "array"
        readOnly: true
        items:
          type: "object"
          properties: {}
      id:
        type: "string"
        readOnly: true
      in_collections:
        type: "array"
        readOnly: true
        items:
          type: "string"
      is_blocked:
        type: "boolean"
        format: "bool"
        default: true
      is_online:
        type: "boolean"
        format: "bool"
        default: true
      keyframes:
        type: "array"
        readOnly: true
        items:
          type: "object"
          properties: {}
      media_type:
        type: "string"
        readOnly: true
        x-nullable: true
      metadata:
        type: "object"
        readOnly: true
        properties: {}
      object_type:
        type: "string"
        readOnly: true
      position:
        type: "integer"
        format: "int32"
        readOnly: true
      proxies:
        type: "array"
        readOnly: true
        items:
          type: "object"
          properties: {}
      relations:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/RelationElasticSchema"
      status:
        type: "string"
        enum:
        - "ACTIVE"
        - "DELETED"
      title:
        type: "string"
      type:
        type: "string"
        enum:
        - "ASSET"
        - "SEQUENCE"
        - "NLE_PROJECT"
        - "PLACEHOLDER"
        - "CUSTOM"
      updated_by_user:
        type: "string"
        readOnly: true
      updated_by_user_info:
        $ref: "#/definitions/UserSchema"
      versions:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/AssetVersionSchema"
      versions_number:
        type: "integer"
        format: "int32"
        readOnly: true
        minimum: -2147483648
        maximum: 2147483647
      warning:
        type: "string"
        x-nullable: true
    example:
      keyframes:
      - "{}"
      - "{}"
      metadata: "{}"
      date_deleted: "date_deleted"
      deleted_by_user: "deleted_by_user"
      external_id: "external_id"
      in_collections:
      - "in_collections"
      - "in_collections"
      analyze_status: "N/A"
      title: "title"
      type: "ASSET"
      created_by_user: "created_by_user"
      duration_milliseconds: -7746104769210155008
      media_type: "media_type"
      custom_poster: "custom_poster"
      warning: "warning"
      custom_keyframe: "custom_keyframe"
      proxies:
      - "{}"
      - "{}"
      id: "id"
      is_online: true
      deleted_by_user_info:
        last_name: "last_name"
        photo: "photo"
        photo_big: "photo_big"
        photo_small: "photo_small"
        id: "id"
        first_name: "first_name"
        email: "email"
      date_imported: "2000-01-23T04:56:07.000+00:00"
      object_type: "object_type"
      date_created: "date_created"
      updated_by_user_info:
        last_name: "last_name"
        photo: "photo"
        photo_big: "photo_big"
        photo_small: "photo_small"
        id: "id"
        first_name: "first_name"
        email: "email"
      versions_number: -1517921766
      updated_by_user: "updated_by_user"
      created_by_user_info:
        last_name: "last_name"
        photo: "photo"
        photo_big: "photo_big"
        photo_small: "photo_small"
        id: "id"
        first_name: "first_name"
        email: "email"
      is_blocked: true
      archive_status: "NOT_ARCHIVED"
      date_modified: "date_modified"
      versions:
      - archive_status: "NOT_ARCHIVED"
        date_created: "2000-01-23T04:56:07.000+00:00"
        transcribe_status: "N/A"
        id: "id"
        is_online: true
        analyze_status: "N/A"
        created_by_user_info:
          last_name: "last_name"
          photo: "photo"
          photo_big: "photo_big"
          photo_small: "photo_small"
          id: "id"
          first_name: "first_name"
          email: "email"
        created_by_user: "created_by_user"
        status: "ACTIVE"
      - archive_status: "NOT_ARCHIVED"
        date_created: "2000-01-23T04:56:07.000+00:00"
        transcribe_status: "N/A"
        id: "id"
        is_online: true
        analyze_status: "N/A"
        created_by_user_info:
          last_name: "last_name"
          photo: "photo"
          photo_big: "photo_big"
          photo_small: "photo_small"
          id: "id"
          first_name: "first_name"
          email: "email"
        created_by_user: "created_by_user"
        status: "ACTIVE"
      files:
      - "{}"
      - "{}"
      position: 6
      category: "category"
      relations:
      - date_modified: "date_modified"
        date_created: "date_created"
        related_from_asset_id: "related_from_asset_id"
        description: "description"
        related_to_asset_id: "related_to_asset_id"
        relation_type: "relation_type"
      - date_modified: "date_modified"
        date_created: "date_created"
        related_from_asset_id: "related_from_asset_id"
        description: "description"
        related_to_asset_id: "related_to_asset_id"
        relation_type: "relation_type"
      status: "ACTIVE"
  AssetHistoryBaseSchema:
    type: "object"
    required:
    - "operation_type"
    properties:
      id:
        type: "string"
        readOnly: true
      job_id:
        type: "string"
        x-nullable: true
      operation_description:
        type: "string"
        x-nullable: true
      operation_type:
        type: "string"
        enum:
        - "EXPORT"
        - "TRANSCODE"
        - "ANALYZE"
        - "DELETE_FORMAT"
        - "DELETE_FILESET"
        - "APPROVE"
        - "REJECT"
        - "DOWNLOAD"
        - "METADATA"
        - "CUSTOM"
        - "TRANSCRIPTION"
        - "VERSION_CREATE"
        - "VERSION_DELETE"
        - "VERSION_UPDATE"
        - "VERSION_PROMOTE"
        - "RESTORE"
        - "RESTORE_FROM_GLACIER"
        - "DELETE"
      share_id:
        type: "string"
        x-nullable: true
      share_user_id:
        type: "string"
        x-nullable: true
      system_domain_id:
        type: "string"
        readOnly: true
      user_id:
        type: "string"
        readOnly: true
      version_id:
        type: "string"
        readOnly: true
  AssetHistoryBulkSchema:
    type: "object"
    required:
    - "asset_ids"
    - "operation_type"
    properties:
      asset_ids:
        type: "array"
        items:
          type: "string"
      assets_jobs_map:
        type: "object"
        properties: {}
      date_created:
        type: "string"
        format: "date-time"
        readOnly: true
      date_modified:
        type: "string"
        format: "date-time"
        readOnly: true
      id:
        type: "string"
        readOnly: true
      job_id:
        type: "string"
        x-nullable: true
      operation_description:
        type: "string"
        x-nullable: true
      operation_type:
        type: "string"
        enum:
        - "EXPORT"
        - "TRANSCODE"
        - "ANALYZE"
        - "DELETE_FORMAT"
        - "DELETE_FILESET"
        - "APPROVE"
        - "REJECT"
        - "DOWNLOAD"
        - "METADATA"
        - "CUSTOM"
        - "TRANSCRIPTION"
        - "VERSION_CREATE"
        - "VERSION_DELETE"
        - "VERSION_UPDATE"
        - "VERSION_PROMOTE"
        - "RESTORE"
        - "RESTORE_FROM_GLACIER"
        - "DELETE"
      share_id:
        type: "string"
        x-nullable: true
      share_user_id:
        type: "string"
        x-nullable: true
      system_domain_id:
        type: "string"
        readOnly: true
      user_id:
        type: "string"
        readOnly: true
      version_id:
        type: "string"
        readOnly: true
  AssetHistoryElasticSchema:
    type: "object"
    required:
    - "operation_type"
    properties:
      asset_id:
        type: "string"
        readOnly: true
      date_created:
        type: "string"
        readOnly: true
      date_modified:
        type: "string"
        readOnly: true
      id:
        type: "string"
        readOnly: true
      job_id:
        type: "string"
        x-nullable: true
      operation_description:
        type: "string"
        x-nullable: true
      operation_type:
        type: "string"
        enum:
        - "EXPORT"
        - "TRANSCODE"
        - "ANALYZE"
        - "DELETE_FORMAT"
        - "DELETE_FILESET"
        - "APPROVE"
        - "REJECT"
        - "DOWNLOAD"
        - "METADATA"
        - "CUSTOM"
        - "TRANSCRIPTION"
        - "VERSION_CREATE"
        - "VERSION_DELETE"
        - "VERSION_UPDATE"
        - "VERSION_PROMOTE"
        - "RESTORE"
        - "RESTORE_FROM_GLACIER"
        - "DELETE"
      share_id:
        type: "string"
        x-nullable: true
      share_user_id:
        type: "string"
        x-nullable: true
      system_domain_id:
        type: "string"
        readOnly: true
      user_id:
        type: "string"
        readOnly: true
      version_id:
        type: "string"
        readOnly: true
    example:
      share_id: "share_id"
      share_user_id: "share_user_id"
      date_modified: "date_modified"
      operation_type: "EXPORT"
      user_id: "user_id"
      date_created: "date_created"
      job_id: "job_id"
      operation_description: "operation_description"
      asset_id: "asset_id"
      id: "id"
      version_id: "version_id"
      system_domain_id: "system_domain_id"
  AssetHistoryEntitiesSchema:
    type: "object"
    properties:
      first_url:
        type: "string"
        readOnly: true
      last_url:
        type: "string"
        readOnly: true
      next_url:
        type: "string"
        readOnly: true
      objects:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/AssetHistoryElasticSchema"
      page:
        type: "integer"
        format: "int32"
        readOnly: true
        minimum: -2147483648
        maximum: 2147483647
      pages:
        type: "integer"
        format: "int32"
        readOnly: true
        minimum: -2147483648
        maximum: 2147483647
      per_page:
        type: "integer"
        format: "int32"
        readOnly: true
        minimum: -2147483648
        maximum: 2147483647
      prev_url:
        type: "string"
        readOnly: true
      scroll_id:
        type: "string"
        readOnly: true
      total:
        type: "integer"
        format: "int64"
        readOnly: true
        minimum: -9223372036854775808
        maximum: 9223372036854775807
    example:
      per_page: -1517921766
      first_url: "first_url"
      total: 1774823812569044992
      pages: 441289069
      objects:
      - share_id: "share_id"
        share_user_id: "share_user_id"
        date_modified: "date_modified"
        operation_type: "EXPORT"
        user_id: "user_id"
        date_created: "date_created"
        job_id: "job_id"
        operation_description: "operation_description"
        asset_id: "asset_id"
        id: "id"
        version_id: "version_id"
        system_domain_id: "system_domain_id"
      - share_id: "share_id"
        share_user_id: "share_user_id"
        date_modified: "date_modified"
        operation_type: "EXPORT"
        user_id: "user_id"
        date_created: "date_created"
        job_id: "job_id"
        operation_description: "operation_description"
        asset_id: "asset_id"
        id: "id"
        version_id: "version_id"
        system_domain_id: "system_domain_id"
      next_url: "next_url"
      page: -1803530559
      scroll_id: "scroll_id"
      prev_url: "prev_url"
      last_url: "last_url"
  AssetHistorySchema:
    type: "object"
    required:
    - "operation_type"
    properties:
      asset_id:
        type: "string"
        readOnly: true
      date_created:
        type: "string"
        format: "date-time"
        readOnly: true
      date_modified:
        type: "string"
        format: "date-time"
        readOnly: true
      id:
        type: "string"
        readOnly: true
      job_id:
        type: "string"
        x-nullable: true
      operation_description:
        type: "string"
        x-nullable: true
      operation_type:
        type: "string"
        enum:
        - "EXPORT"
        - "TRANSCODE"
        - "ANALYZE"
        - "DELETE_FORMAT"
        - "DELETE_FILESET"
        - "APPROVE"
        - "REJECT"
        - "DOWNLOAD"
        - "METADATA"
        - "CUSTOM"
        - "TRANSCRIPTION"
        - "VERSION_CREATE"
        - "VERSION_DELETE"
        - "VERSION_UPDATE"
        - "VERSION_PROMOTE"
        - "RESTORE"
        - "RESTORE_FROM_GLACIER"
        - "DELETE"
      share_id:
        type: "string"
        x-nullable: true
      share_user_id:
        type: "string"
        x-nullable: true
      system_domain_id:
        type: "string"
        readOnly: true
      user_id:
        type: "string"
        readOnly: true
      version_id:
        type: "string"
        readOnly: true
    example:
      share_id: "share_id"
      share_user_id: "share_user_id"
      date_modified: "2000-01-23T04:56:07.000+00:00"
      operation_type: "EXPORT"
      user_id: "user_id"
      date_created: "2000-01-23T04:56:07.000+00:00"
      job_id: "job_id"
      operation_description: "operation_description"
      asset_id: "asset_id"
      id: "id"
      version_id: "version_id"
      system_domain_id: "system_domain_id"
  AssetSchema:
    type: "object"
    required:
    - "title"
    properties:
      analyze_status:
        type: "string"
        enum:
        - "N/A"
        - "REQUESTED"
        - "IN_PROGRESS"
        - "FAILED"
        - "DONE"
      archive_status:
        type: "string"
        enum:
        - "NOT_ARCHIVED"
        - "ARCHIVING"
        - "FAILED_TO_ARCHIVE"
        - "ARCHIVED"
      category:
        type: "string"
        x-nullable: true
      created_by_user:
        type: "string"
        readOnly: true
      created_by_user_info:
        $ref: "#/definitions/UserSchema"
      custom_keyframe:
        type: "string"
        x-nullable: true
      custom_poster:
        type: "string"
        x-nullable: true
      date_created:
        type: "string"
        format: "date-time"
      date_deleted:
        type: "string"
        format: "date-time"
      date_imported:
        type: "string"
        format: "date-time"
        readOnly: true
      date_modified:
        type: "string"
        format: "date-time"
        readOnly: true
      deleted_by_user:
        type: "string"
        readOnly: true
      deleted_by_user_info:
        $ref: "#/definitions/UserSchema"
      external_id:
        type: "string"
        x-nullable: true
      id:
        type: "string"
        readOnly: true
      in_collections:
        type: "array"
        readOnly: true
        items:
          type: "string"
      is_blocked:
        type: "boolean"
        format: "bool"
        default: true
      is_online:
        type: "boolean"
        format: "bool"
        default: true
      status:
        type: "string"
        enum:
        - "ACTIVE"
        - "DELETED"
      title:
        type: "string"
      type:
        type: "string"
        enum:
        - "ASSET"
        - "SEQUENCE"
        - "NLE_PROJECT"
        - "PLACEHOLDER"
        - "CUSTOM"
      updated_by_user:
        type: "string"
        readOnly: true
      updated_by_user_info:
        $ref: "#/definitions/UserSchema"
      versions:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/AssetVersionSchema"
      warning:
        type: "string"
        x-nullable: true
    example:
      date_deleted: "2000-01-23T04:56:07.000+00:00"
      deleted_by_user: "deleted_by_user"
      external_id: "external_id"
      in_collections:
      - "in_collections"
      - "in_collections"
      analyze_status: "N/A"
      title: "title"
      type: "ASSET"
      created_by_user: "created_by_user"
      custom_poster: "custom_poster"
      warning: "warning"
      custom_keyframe: "custom_keyframe"
      id: "id"
      is_online: true
      deleted_by_user_info:
        last_name: "last_name"
        photo: "photo"
        photo_big: "photo_big"
        photo_small: "photo_small"
        id: "id"
        first_name: "first_name"
        email: "email"
      date_imported: "2000-01-23T04:56:07.000+00:00"
      date_created: "2000-01-23T04:56:07.000+00:00"
      updated_by_user_info:
        last_name: "last_name"
        photo: "photo"
        photo_big: "photo_big"
        photo_small: "photo_small"
        id: "id"
        first_name: "first_name"
        email: "email"
      updated_by_user: "updated_by_user"
      created_by_user_info:
        last_name: "last_name"
        photo: "photo"
        photo_big: "photo_big"
        photo_small: "photo_small"
        id: "id"
        first_name: "first_name"
        email: "email"
      is_blocked: true
      archive_status: "NOT_ARCHIVED"
      date_modified: "2000-01-23T04:56:07.000+00:00"
      versions:
      - archive_status: "NOT_ARCHIVED"
        date_created: "2000-01-23T04:56:07.000+00:00"
        transcribe_status: "N/A"
        id: "id"
        is_online: true
        analyze_status: "N/A"
        created_by_user_info:
          last_name: "last_name"
          photo: "photo"
          photo_big: "photo_big"
          photo_small: "photo_small"
          id: "id"
          first_name: "first_name"
          email: "email"
        created_by_user: "created_by_user"
        status: "ACTIVE"
      - archive_status: "NOT_ARCHIVED"
        date_created: "2000-01-23T04:56:07.000+00:00"
        transcribe_status: "N/A"
        id: "id"
        is_online: true
        analyze_status: "N/A"
        created_by_user_info:
          last_name: "last_name"
          photo: "photo"
          photo_big: "photo_big"
          photo_small: "photo_small"
          id: "id"
          first_name: "first_name"
          email: "email"
        created_by_user: "created_by_user"
        status: "ACTIVE"
      category: "category"
      status: "ACTIVE"
  AssetTranscriptionFromSubtitleSchema:
    type: "object"
    properties:
      content:
        type: "string"
      delete_old_transcriptions:
        type: "boolean"
      format:
        type: "string"
        enum:
        - "VTT"
        - "WEBVTT"
        - "SRT"
        x-nullable: true
      language:
        type: "string"
      source_subtitle_id:
        type: "string"
        description: "Set to source subtitle_id or do not set and use the content\
          \ fields instead"
  AssetTranscriptionPropertiesSchema:
    type: "object"
    properties:
      asset_id:
        type: "string"
        readOnly: true
      id:
        type: "string"
        readOnly: true
      language:
        type: "string"
      speaker_labels:
        type: "object"
        properties: {}
      system_domain_id:
        type: "string"
        readOnly: true
      version_id:
        type: "string"
        readOnly: true
    example:
      speaker_labels: "{}"
      language: "language"
      asset_id: "asset_id"
      id: "id"
      version_id: "version_id"
      system_domain_id: "system_domain_id"
  AssetTranscriptionsPropertiesSchema:
    type: "object"
    properties:
      objects:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/AssetTranscriptionPropertiesSchema"
    example:
      objects:
      - speaker_labels: "{}"
        language: "language"
        asset_id: "asset_id"
        id: "id"
        version_id: "version_id"
        system_domain_id: "system_domain_id"
      - speaker_labels: "{}"
        language: "language"
        asset_id: "asset_id"
        id: "id"
        version_id: "version_id"
        system_domain_id: "system_domain_id"
  AssetVersionSchema:
    type: "object"
    properties:
      analyze_status:
        type: "string"
        enum:
        - "N/A"
        - "REQUESTED"
        - "IN_PROGRESS"
        - "FAILED"
        - "DONE"
      archive_status:
        type: "string"
        enum:
        - "NOT_ARCHIVED"
        - "ARCHIVING"
        - "FAILED_TO_ARCHIVE"
        - "ARCHIVED"
      created_by_user:
        type: "string"
      created_by_user_info:
        $ref: "#/definitions/UserSchema"
      date_created:
        type: "string"
        format: "date-time"
      id:
        type: "string"
        readOnly: true
      is_online:
        type: "boolean"
        default: true
      status:
        type: "string"
        enum:
        - "ACTIVE"
        - "IN_PROGRESS"
        - "FAILED"
        - "DELETING"
        - "DELETED"
        default: "ACTIVE"
      transcribe_status:
        type: "string"
        enum:
        - "N/A"
        - "REQUESTED"
        - "IN_PROGRESS"
        - "FAILED"
        - "DONE"
    example:
      archive_status: "NOT_ARCHIVED"
      date_created: "2000-01-23T04:56:07.000+00:00"
      transcribe_status: "N/A"
      id: "id"
      is_online: true
      analyze_status: "N/A"
      created_by_user_info:
        last_name: "last_name"
        photo: "photo"
        photo_big: "photo_big"
        photo_small: "photo_small"
        id: "id"
        first_name: "first_name"
        email: "email"
      created_by_user: "created_by_user"
      status: "ACTIVE"
  AssetVersionsSchema:
    type: "object"
    required:
    - "asset_id"
    properties:
      asset_id:
        type: "string"
      system_domain_id:
        type: "string"
        readOnly: true
      versions:
        type: "array"
        items:
          $ref: "#/definitions/EditAssetVersionSchema"
        minItems: 1
    example:
      versions:
      - archive_status: "NOT_ARCHIVED"
        date_created: "2000-01-23T04:56:07.000+00:00"
        transcribe_status: "N/A"
        id: "id"
        is_online: true
        analyze_status: "N/A"
        created_by_user_info:
          last_name: "last_name"
          photo: "photo"
          photo_big: "photo_big"
          photo_small: "photo_small"
          id: "id"
          first_name: "first_name"
          email: "email"
        created_by_user: "created_by_user"
        status: "ACTIVE"
      - archive_status: "NOT_ARCHIVED"
        date_created: "2000-01-23T04:56:07.000+00:00"
        transcribe_status: "N/A"
        id: "id"
        is_online: true
        analyze_status: "N/A"
        created_by_user_info:
          last_name: "last_name"
          photo: "photo"
          photo_big: "photo_big"
          photo_small: "photo_small"
          id: "id"
          first_name: "first_name"
          email: "email"
        created_by_user: "created_by_user"
        status: "ACTIVE"
      asset_id: "asset_id"
      system_domain_id: "system_domain_id"
  AssetsSchema:
    type: "object"
    properties:
      first_url:
        type: "string"
        readOnly: true
      last_url:
        type: "string"
        readOnly: true
      next_url:
        type: "string"
        readOnly: true
      objects:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/AssetElasticSchema"
      page:
        type: "integer"
        format: "int32"
        readOnly: true
        minimum: -2147483648
        maximum: 2147483647
      pages:
        type: "integer"
        format: "int32"
        readOnly: true
        minimum: -2147483648
        maximum: 2147483647
      per_page:
        type: "integer"
        format: "int32"
        readOnly: true
        minimum: -2147483648
        maximum: 2147483647
      prev_url:
        type: "string"
        readOnly: true
      scroll_id:
        type: "string"
        readOnly: true
      total:
        type: "integer"
        format: "int64"
        readOnly: true
        minimum: -9223372036854775808
        maximum: 9223372036854775807
    example:
      per_page: -1158723813
      first_url: "first_url"
      total: 3802614113523499008
      pages: 273751188
      objects:
      - keyframes:
        - "{}"
        - "{}"
        metadata: "{}"
        date_deleted: "date_deleted"
        deleted_by_user: "deleted_by_user"
        external_id: "external_id"
        in_collections:
        - "in_collections"
        - "in_collections"
        analyze_status: "N/A"
        title: "title"
        type: "ASSET"
        created_by_user: "created_by_user"
        duration_milliseconds: -7746104769210155008
        media_type: "media_type"
        custom_poster: "custom_poster"
        warning: "warning"
        custom_keyframe: "custom_keyframe"
        proxies:
        - "{}"
        - "{}"
        id: "id"
        is_online: true
        deleted_by_user_info:
          last_name: "last_name"
          photo: "photo"
          photo_big: "photo_big"
          photo_small: "photo_small"
          id: "id"
          first_name: "first_name"
          email: "email"
        date_imported: "2000-01-23T04:56:07.000+00:00"
        object_type: "object_type"
        date_created: "date_created"
        updated_by_user_info:
          last_name: "last_name"
          photo: "photo"
          photo_big: "photo_big"
          photo_small: "photo_small"
          id: "id"
          first_name: "first_name"
          email: "email"
        versions_number: -1517921766
        updated_by_user: "updated_by_user"
        created_by_user_info:
          last_name: "last_name"
          photo: "photo"
          photo_big: "photo_big"
          photo_small: "photo_small"
          id: "id"
          first_name: "first_name"
          email: "email"
        is_blocked: true
        archive_status: "NOT_ARCHIVED"
        date_modified: "date_modified"
        versions:
        - archive_status: "NOT_ARCHIVED"
          date_created: "2000-01-23T04:56:07.000+00:00"
          transcribe_status: "N/A"
          id: "id"
          is_online: true
          analyze_status: "N/A"
          created_by_user_info:
            last_name: "last_name"
            photo: "photo"
            photo_big: "photo_big"
            photo_small: "photo_small"
            id: "id"
            first_name: "first_name"
            email: "email"
          created_by_user: "created_by_user"
          status: "ACTIVE"
        - archive_status: "NOT_ARCHIVED"
          date_created: "2000-01-23T04:56:07.000+00:00"
          transcribe_status: "N/A"
          id: "id"
          is_online: true
          analyze_status: "N/A"
          created_by_user_info:
            last_name: "last_name"
            photo: "photo"
            photo_big: "photo_big"
            photo_small: "photo_small"
            id: "id"
            first_name: "first_name"
            email: "email"
          created_by_user: "created_by_user"
          status: "ACTIVE"
        files:
        - "{}"
        - "{}"
        position: 6
        category: "category"
        relations:
        - date_modified: "date_modified"
          date_created: "date_created"
          related_from_asset_id: "related_from_asset_id"
          description: "description"
          related_to_asset_id: "related_to_asset_id"
          relation_type: "relation_type"
        - date_modified: "date_modified"
          date_created: "date_created"
          related_from_asset_id: "related_from_asset_id"
          description: "description"
          related_to_asset_id: "related_to_asset_id"
          relation_type: "relation_type"
        status: "ACTIVE"
      - keyframes:
        - "{}"
        - "{}"
        metadata: "{}"
        date_deleted: "date_deleted"
        deleted_by_user: "deleted_by_user"
        external_id: "external_id"
        in_collections:
        - "in_collections"
        - "in_collections"
        analyze_status: "N/A"
        title: "title"
        type: "ASSET"
        created_by_user: "created_by_user"
        duration_milliseconds: -7746104769210155008
        media_type: "media_type"
        custom_poster: "custom_poster"
        warning: "warning"
        custom_keyframe: "custom_keyframe"
        proxies:
        - "{}"
        - "{}"
        id: "id"
        is_online: true
        deleted_by_user_info:
          last_name: "last_name"
          photo: "photo"
          photo_big: "photo_big"
          photo_small: "photo_small"
          id: "id"
          first_name: "first_name"
          email: "email"
        date_imported: "2000-01-23T04:56:07.000+00:00"
        object_type: "object_type"
        date_created: "date_created"
        updated_by_user_info:
          last_name: "last_name"
          photo: "photo"
          photo_big: "photo_big"
          photo_small: "photo_small"
          id: "id"
          first_name: "first_name"
          email: "email"
        versions_number: -1517921766
        updated_by_user: "updated_by_user"
        created_by_user_info:
          last_name: "last_name"
          photo: "photo"
          photo_big: "photo_big"
          photo_small: "photo_small"
          id: "id"
          first_name: "first_name"
          email: "email"
        is_blocked: true
        archive_status: "NOT_ARCHIVED"
        date_modified: "date_modified"
        versions:
        - archive_status: "NOT_ARCHIVED"
          date_created: "2000-01-23T04:56:07.000+00:00"
          transcribe_status: "N/A"
          id: "id"
          is_online: true
          analyze_status: "N/A"
          created_by_user_info:
            last_name: "last_name"
            photo: "photo"
            photo_big: "photo_big"
            photo_small: "photo_small"
            id: "id"
            first_name: "first_name"
            email: "email"
          created_by_user: "created_by_user"
          status: "ACTIVE"
        - archive_status: "NOT_ARCHIVED"
          date_created: "2000-01-23T04:56:07.000+00:00"
          transcribe_status: "N/A"
          id: "id"
          is_online: true
          analyze_status: "N/A"
          created_by_user_info:
            last_name: "last_name"
            photo: "photo"
            photo_big: "photo_big"
            photo_small: "photo_small"
            id: "id"
            first_name: "first_name"
            email: "email"
          created_by_user: "created_by_user"
          status: "ACTIVE"
        files:
        - "{}"
        - "{}"
        position: 6
        category: "category"
        relations:
        - date_modified: "date_modified"
          date_created: "date_created"
          related_from_asset_id: "related_from_asset_id"
          description: "description"
          related_to_asset_id: "related_to_asset_id"
          relation_type: "relation_type"
        - date_modified: "date_modified"
          date_created: "date_created"
          related_from_asset_id: "related_from_asset_id"
          description: "description"
          related_to_asset_id: "related_to_asset_id"
          relation_type: "relation_type"
        status: "ACTIVE"
      next_url: "next_url"
      page: 413233370
      scroll_id: "scroll_id"
      prev_url: "prev_url"
      last_url: "last_url"
  BulkActionSchema:
    type: "object"
    required:
    - "object_ids"
    - "object_type"
    properties:
      object_ids:
        type: "array"
        items:
          type: "string"
        maxItems: 500
        minItems: 1
      object_type:
        type: "string"
        enum:
        - "assets"
        - "collections"
        - "saved_searches"
  BulkAssetEditSchema:
    type: "object"
    required:
    - "objects"
    properties:
      objects:
        type: "array"
        items:
          $ref: "#/definitions/AssetEditSchema"
  BulkAssetVersionEditSchema:
    type: "object"
    required:
    - "objects"
    properties:
      objects:
        type: "array"
        items:
          $ref: "#/definitions/AssetVersionsSchema"
        maxItems: 500
        minItems: 1
  BulkCollectionACLsUpdateSchema:
    type: "object"
    required:
    - "collection_ids"
    - "include_assets"
    - "include_collections"
    - "job_id"
    properties:
      collection_ids:
        type: "array"
        items:
          type: "string"
      include_assets:
        type: "boolean"
      include_collections:
        type: "boolean"
      job_id:
        type: "string"
  BulkCollectionActionSchema:
    type: "object"
    required:
    - "collection_ids"
    - "include_assets"
    - "include_collections"
    - "job_id"
    properties:
      collection_ids:
        type: "array"
        items:
          type: "string"
      include_assets:
        type: "boolean"
      include_collections:
        type: "boolean"
      job_id:
        type: "string"
  BulkCollectionAnalyzeSchema:
    type: "object"
    required:
    - "collection_ids"
    - "include_assets"
    - "include_collections"
    - "job_id"
    properties:
      collection_ids:
        type: "array"
        items:
          type: "string"
      include_assets:
        type: "boolean"
      include_collections:
        type: "boolean"
      job_id:
        type: "string"
  BulkCollectionDeleteSchema:
    type: "object"
    required:
    - "collection_ids"
    - "include_assets"
    - "include_collections"
    - "job_id"
    properties:
      collection_ids:
        type: "array"
        items:
          type: "string"
      include_assets:
        type: "boolean"
      include_collections:
        type: "boolean"
      job_id:
        type: "string"
  BulkCollectionMetadataUpdateSchema:
    type: "object"
    required:
    - "collection_ids"
    - "include_assets"
    - "include_collections"
    - "job_id"
    properties:
      collection_ids:
        type: "array"
        items:
          type: "string"
      include_assets:
        type: "boolean"
      include_collections:
        type: "boolean"
      job_id:
        type: "string"
  BulkCollectionTranscodeSchema:
    type: "object"
    required:
    - "collection_ids"
    - "include_assets"
    - "include_collections"
    - "job_id"
    properties:
      collection_ids:
        type: "array"
        items:
          type: "string"
      include_assets:
        type: "boolean"
      include_collections:
        type: "boolean"
      job_id:
        type: "string"
        format: "uuid"
  BulkCollectionTranscribeSchema:
    type: "object"
    required:
    - "collection_ids"
    - "include_assets"
    - "include_collections"
    - "job_id"
    properties:
      collection_ids:
        type: "array"
        items:
          type: "string"
      include_assets:
        type: "boolean"
      include_collections:
        type: "boolean"
      job_id:
        type: "string"
  BulkCollectionTransferSchema:
    type: "object"
    required:
    - "collection_ids"
    - "include_assets"
    - "include_collections"
    - "job_id"
    properties:
      collection_ids:
        type: "array"
        items:
          type: "string"
      include_assets:
        type: "boolean"
      include_collections:
        type: "boolean"
      job_id:
        type: "string"
      keep_collection_structure:
        type: "boolean"
        default: false
  BulkCreateSegmentsSchema:
    type: "object"
    required:
    - "objects"
    properties:
      objects:
        type: "array"
        items:
          $ref: "#/definitions/SegmentSchema"
        maxItems: 500
        minItems: 1
  BulkDeleteSchema:
    type: "object"
    required:
    - "object_ids"
    - "object_type"
    properties:
      content_only:
        type: "boolean"
        description: "If set to `False`, will also delete entities of type `object_type`\
          \ specified in `object_ids`."
      object_ids:
        type: "array"
        items:
          type: "string"
        maxItems: 500
        minItems: 1
      object_type:
        type: "string"
        enum:
        - "assets"
        - "collections"
        - "saved_searches"
  BulkShareCreateSchema:
    type: "object"
    required:
    - "allow_approving_comments"
    - "allow_comments"
    - "allow_download"
    - "allow_setting_approve_status"
    - "object_ids"
    - "title"
    properties:
      allow_approving_comments:
        type: "boolean"
      allow_comments:
        type: "boolean"
      allow_custom_actions:
        type: "boolean"
        default: false
      allow_download:
        type: "boolean"
      allow_download_proxy:
        type: "boolean"
      allow_setting_approve_status:
        type: "boolean"
      allow_upload:
        type: "boolean"
        default: false
      allow_view_transcriptions:
        type: "boolean"
        default: true
      allow_view_versions:
        type: "boolean"
        default: true
      app_id:
        type: "string"
      emails:
        type: "array"
        items:
          type: "string"
          format: "email"
      expires:
        type: "string"
        format: "date-time"
      id:
        type: "string"
        readOnly: true
      message:
        type: "string"
      metadata_views:
        type: "array"
        items:
          type: "string"
        x-nullable: true
      object_ids:
        type: "array"
        items:
          type: "string"
        maxItems: 500
        minItems: 1
      object_type:
        type: "string"
        readOnly: true
        enum:
        - "assets"
      owner_id:
        type: "string"
        readOnly: true
      password:
        type: "string"
      share_by_url:
        type: "boolean"
        default: false
      system_domain_id:
        type: "string"
      title:
        type: "string"
      upload_storage_id:
        type: "string"
        x-nullable: true
  CollectionBaseSchema:
    type: "object"
    required:
    - "title"
    properties:
      category:
        type: "string"
        x-nullable: true
      created_by_user:
        type: "string"
        readOnly: true
      custom_keyframe:
        type: "string"
        x-nullable: true
      custom_order_status:
        type: "string"
        readOnly: true
        enum:
        - "DISABLED"
        - "ENABLING"
        - "ENABLED"
      custom_poster:
        type: "string"
        x-nullable: true
      deleted_by_user:
        type: "string"
        readOnly: true
      external_id:
        type: "string"
        x-nullable: true
      id:
        type: "string"
        readOnly: true
      in_collections:
        type: "array"
        items:
          type: "string"
      is_root:
        type: "boolean"
      keyframe_asset_ids:
        type: "array"
        items:
          type: "string"
      keyframes:
        type: "array"
        items:
          type: "object"
          properties: {}
      metadata:
        type: "object"
        readOnly: true
        properties: {}
      object_type:
        type: "string"
        readOnly: true
      parent_id:
        type: "string"
        x-nullable: true
      parents:
        type: "array"
        items:
          type: "string"
      permissions:
        type: "array"
        readOnly: true
        items:
          type: "string"
      position:
        type: "integer"
        format: "int32"
        readOnly: true
      status:
        type: "string"
        enum:
        - "ACTIVE"
        - "HIDDEN"
        - "DELETED"
      storage_id:
        type: "string"
        x-nullable: true
      title:
        type: "string"
  CollectionContentInfoSchema:
    type: "object"
    properties:
      assets_count:
        type: "integer"
        format: "int32"
        readOnly: true
        minimum: -2147483648
        maximum: 2147483647
      collections_count:
        type: "integer"
        format: "int32"
        readOnly: true
        minimum: -2147483648
        maximum: 2147483647
    example:
      assets_count: -1803530559
      collections_count: 441289069
  CollectionContentOrderingSchema:
    type: "object"
    properties:
      after_object_id:
        type: "string"
      before_object_id:
        type: "string"
      position:
        type: "integer"
        format: "int32"
        description: "Position the member will be moved to. To insert athe the end\
          \ send -1"
        minimum: -1
        default: 0
  CollectionContentSchema:
    type: "object"
    required:
    - "object_id"
    - "object_type"
    properties:
      collection_id:
        type: "string"
        readOnly: true
      date_created:
        type: "string"
        format: "date-time"
        readOnly: true
      object_id:
        type: "string"
      object_type:
        type: "string"
  CollectionElasticSchema:
    type: "object"
    required:
    - "title"
    properties:
      category:
        type: "string"
        x-nullable: true
      created_by_user:
        type: "string"
        readOnly: true
      custom_keyframe:
        type: "string"
        x-nullable: true
      custom_order_status:
        type: "string"
        readOnly: true
        enum:
        - "DISABLED"
        - "ENABLING"
        - "ENABLED"
      custom_poster:
        type: "string"
        x-nullable: true
      date_created:
        type: "string"
        readOnly: true
      date_deleted:
        type: "string"
        readOnly: true
      date_modified:
        type: "string"
        readOnly: true
      deleted_by_user:
        type: "string"
        readOnly: true
      external_id:
        type: "string"
        x-nullable: true
      id:
        type: "string"
        readOnly: true
      in_collections:
        type: "array"
        items:
          type: "string"
      is_root:
        type: "boolean"
      keyframe_asset_ids:
        type: "array"
        items:
          type: "string"
      keyframes:
        type: "array"
        items:
          type: "object"
          properties: {}
      metadata:
        type: "object"
        readOnly: true
        properties: {}
      object_type:
        type: "string"
        readOnly: true
      parent_id:
        type: "string"
        x-nullable: true
      parents:
        type: "array"
        items:
          type: "string"
      permissions:
        type: "array"
        readOnly: true
        items:
          type: "string"
      position:
        type: "integer"
        format: "int32"
        readOnly: true
      status:
        type: "string"
        enum:
        - "ACTIVE"
        - "HIDDEN"
        - "DELETED"
      storage_id:
        type: "string"
        x-nullable: true
      title:
        type: "string"
    example:
      keyframes:
      - "{}"
      - "{}"
      metadata: "{}"
      date_deleted: "date_deleted"
      object_type: "object_type"
      date_created: "date_created"
      deleted_by_user: "deleted_by_user"
      external_id: "external_id"
      in_collections:
      - "in_collections"
      - "in_collections"
      custom_order_status: "DISABLED"
      is_root: true
      title: "title"
      created_by_user: "created_by_user"
      date_modified: "date_modified"
      parent_id: "parent_id"
      permissions:
      - "permissions"
      - "permissions"
      storage_id: "storage_id"
      custom_poster: "custom_poster"
      keyframe_asset_ids:
      - "keyframe_asset_ids"
      - "keyframe_asset_ids"
      custom_keyframe: "custom_keyframe"
      id: "id"
      position: 0
      category: "category"
      parents:
      - "parents"
      - "parents"
      status: "ACTIVE"
  CollectionInputSchema:
    type: "object"
    required:
    - "title"
    properties:
      category:
        type: "string"
        x-nullable: true
      custom_keyframe:
        type: "string"
        x-nullable: true
      custom_poster:
        type: "string"
        x-nullable: true
      date_created:
        type: "string"
        format: "date-time"
      external_id:
        type: "string"
        x-nullable: true
      is_root:
        type: "boolean"
      keyframe_asset_ids:
        type: "array"
        items:
          type: "string"
      parent_id:
        type: "string"
        x-nullable: true
      status:
        type: "string"
        enum:
        - "ACTIVE"
        - "HIDDEN"
        - "DELETED"
      storage_id:
        type: "string"
        x-nullable: true
      title:
        type: "string"
  CollectionSchema:
    type: "object"
    required:
    - "title"
    properties:
      category:
        type: "string"
        x-nullable: true
      created_by_user:
        type: "string"
        readOnly: true
      custom_keyframe:
        type: "string"
        x-nullable: true
      custom_order_status:
        type: "string"
        readOnly: true
        enum:
        - "DISABLED"
        - "ENABLING"
        - "ENABLED"
      custom_poster:
        type: "string"
        x-nullable: true
      date_created:
        type: "string"
        format: "date-time"
        readOnly: true
      date_deleted:
        type: "string"
        format: "date-time"
        readOnly: true
      date_modified:
        type: "string"
        format: "date-time"
        readOnly: true
      deleted_by_user:
        type: "string"
        readOnly: true
      external_id:
        type: "string"
        x-nullable: true
      id:
        type: "string"
        readOnly: true
      in_collections:
        type: "array"
        items:
          type: "string"
      is_root:
        type: "boolean"
      keyframe_asset_ids:
        type: "array"
        items:
          type: "string"
      keyframes:
        type: "array"
        items:
          type: "object"
          properties: {}
      metadata:
        type: "object"
        readOnly: true
        properties: {}
      object_type:
        type: "string"
        readOnly: true
      parent_id:
        type: "string"
        x-nullable: true
      parents:
        type: "array"
        items:
          type: "string"
      permissions:
        type: "array"
        readOnly: true
        items:
          type: "string"
      position:
        type: "integer"
        format: "int32"
        readOnly: true
      status:
        type: "string"
        enum:
        - "ACTIVE"
        - "HIDDEN"
        - "DELETED"
      storage_id:
        type: "string"
        x-nullable: true
      title:
        type: "string"
    example:
      keyframes:
      - "{}"
      - "{}"
      metadata: "{}"
      date_deleted: "2000-01-23T04:56:07.000+00:00"
      object_type: "object_type"
      date_created: "2000-01-23T04:56:07.000+00:00"
      deleted_by_user: "deleted_by_user"
      external_id: "external_id"
      in_collections:
      - "in_collections"
      - "in_collections"
      custom_order_status: "DISABLED"
      is_root: true
      title: "title"
      created_by_user: "created_by_user"
      date_modified: "2000-01-23T04:56:07.000+00:00"
      parent_id: "parent_id"
      permissions:
      - "permissions"
      - "permissions"
      storage_id: "storage_id"
      custom_poster: "custom_poster"
      keyframe_asset_ids:
      - "keyframe_asset_ids"
      - "keyframe_asset_ids"
      custom_keyframe: "custom_keyframe"
      id: "id"
      position: 0
      category: "category"
      parents:
      - "parents"
      - "parents"
      status: "ACTIVE"
  CollectionsSchema:
    type: "object"
    properties:
      first_url:
        type: "string"
        readOnly: true
      last_url:
        type: "string"
        readOnly: true
      next_url:
        type: "string"
        readOnly: true
      objects:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/CollectionElasticSchema"
      page:
        type: "integer"
        format: "int32"
        readOnly: true
        minimum: -2147483648
        maximum: 2147483647
      pages:
        type: "integer"
        format: "int32"
        readOnly: true
        minimum: -2147483648
        maximum: 2147483647
      per_page:
        type: "integer"
        format: "int32"
        readOnly: true
        minimum: -2147483648
        maximum: 2147483647
      prev_url:
        type: "string"
        readOnly: true
      scroll_id:
        type: "string"
        readOnly: true
      total:
        type: "integer"
        format: "int64"
        readOnly: true
        minimum: -9223372036854775808
        maximum: 9223372036854775807
    example:
      per_page: 413233370
      first_url: "first_url"
      total: 1175752406347165696
      pages: -1517921766
      objects:
      - keyframes:
        - "{}"
        - "{}"
        metadata: "{}"
        date_deleted: "date_deleted"
        object_type: "object_type"
        date_created: "date_created"
        deleted_by_user: "deleted_by_user"
        external_id: "external_id"
        in_collections:
        - "in_collections"
        - "in_collections"
        custom_order_status: "DISABLED"
        is_root: true
        title: "title"
        created_by_user: "created_by_user"
        date_modified: "date_modified"
        parent_id: "parent_id"
        permissions:
        - "permissions"
        - "permissions"
        storage_id: "storage_id"
        custom_poster: "custom_poster"
        keyframe_asset_ids:
        - "keyframe_asset_ids"
        - "keyframe_asset_ids"
        custom_keyframe: "custom_keyframe"
        id: "id"
        position: 0
        category: "category"
        parents:
        - "parents"
        - "parents"
        status: "ACTIVE"
      - keyframes:
        - "{}"
        - "{}"
        metadata: "{}"
        date_deleted: "date_deleted"
        object_type: "object_type"
        date_created: "date_created"
        deleted_by_user: "deleted_by_user"
        external_id: "external_id"
        in_collections:
        - "in_collections"
        - "in_collections"
        custom_order_status: "DISABLED"
        is_root: true
        title: "title"
        created_by_user: "created_by_user"
        date_modified: "date_modified"
        parent_id: "parent_id"
        permissions:
        - "permissions"
        - "permissions"
        storage_id: "storage_id"
        custom_poster: "custom_poster"
        keyframe_asset_ids:
        - "keyframe_asset_ids"
        - "keyframe_asset_ids"
        custom_keyframe: "custom_keyframe"
        id: "id"
        position: 0
        category: "category"
        parents:
        - "parents"
        - "parents"
        status: "ACTIVE"
      next_url: "next_url"
      page: 441289069
      scroll_id: "scroll_id"
      prev_url: "prev_url"
      last_url: "last_url"
  CreateAssetVersionFromAssetSchema:
    type: "object"
    properties:
      source_metadata_asset_id:
        type: "string"
      system_domain_id:
        type: "string"
        readOnly: true
  CreateAssetVersionSchema:
    type: "object"
    properties:
      copy_metadata:
        type: "boolean"
        default: false
      source_version_id:
        type: "string"
      system_domain_id:
        type: "string"
        readOnly: true
  CreateCollectionContentOrderingSchema:
    type: "object"
    properties:
      custom_order_sort:
        type: "string"
        description: "Initial sort order for an ordered collection. Specified as a\
          \ comma separated list of fieldnames with direction. For example - date_created,asc;status,desc"
  CustomActionCallbackReplySchema:
    type: "object"
    properties:
      redirect_url:
        type: "string"
        readOnly: true
    example:
      redirect_url: "redirect_url"
  CustomActionCallbackSchema:
    type: "object"
    properties:
      asset_ids:
        type: "array"
        items:
          type: "string"
      collection_ids:
        type: "array"
        items:
          type: "string"
      metadata_values:
        type: "string"
      metadata_view_id:
        type: "string"
        x-nullable: true
      saved_search_ids:
        type: "array"
        items:
          type: "string"
  CustomActionSchema:
    type: "object"
    required:
    - "context"
    - "title"
    - "url"
    properties:
      app_id:
        type: "string"
        x-nullable: true
      context:
        type: "string"
        enum:
        - "ASSET"
        - "SHARED_ASSET"
        - "COLLECTION"
        - "SHARED_COLLECTION"
        - "BULK"
        - "SAVED_SEARCH"
        - "NONE"
      date_created:
        type: "string"
        format: "date-time"
        readOnly: true
      date_modified:
        type: "string"
        format: "date-time"
        readOnly: true
      headers:
        type: "object"
        properties: {}
      id:
        type: "string"
        readOnly: true
      last_error:
        type: "string"
        readOnly: true
      metadata_view:
        type: "string"
        x-nullable: true
      status:
        type: "string"
        enum:
        - "FAILING"
        - "HEALTHY"
        default: "HEALTHY"
      system_domain_id:
        type: "string"
        readOnly: true
      title:
        type: "string"
      type:
        type: "string"
        enum:
        - "OPEN"
        - "POST"
        default: "POST"
      url:
        type: "string"
    example:
      headers: "{}"
      date_created: "2000-01-23T04:56:07.000+00:00"
      title: "title"
      type: "POST"
      url: "url"
      date_modified: "2000-01-23T04:56:07.000+00:00"
      context: "ASSET"
      metadata_view: "metadata_view"
      id: "id"
      last_error: "last_error"
      app_id: "app_id"
      status: "HEALTHY"
      system_domain_id: "system_domain_id"
  CustomActionsSchema:
    type: "object"
    properties:
      first_url:
        type: "string"
        readOnly: true
      last_url:
        type: "string"
        readOnly: true
      next_url:
        type: "string"
        readOnly: true
      objects:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/CustomActionSchema"
      page:
        type: "integer"
        format: "int32"
        readOnly: true
        minimum: -2147483648
        maximum: 2147483647
      pages:
        type: "integer"
        format: "int32"
        readOnly: true
        minimum: -2147483648
        maximum: 2147483647
      per_page:
        type: "integer"
        format: "int32"
        readOnly: true
        minimum: -2147483648
        maximum: 2147483647
      prev_url:
        type: "string"
        readOnly: true
      scroll_id:
        type: "string"
        readOnly: true
      total:
        type: "integer"
        format: "int64"
        readOnly: true
        minimum: -9223372036854775808
        maximum: 9223372036854775807
    example:
      per_page: -1517921766
      first_url: "first_url"
      total: 1774823812569044992
      pages: 441289069
      objects:
      - headers: "{}"
        date_created: "2000-01-23T04:56:07.000+00:00"
        title: "title"
        type: "POST"
        url: "url"
        date_modified: "2000-01-23T04:56:07.000+00:00"
        context: "ASSET"
        metadata_view: "metadata_view"
        id: "id"
        last_error: "last_error"
        app_id: "app_id"
        status: "HEALTHY"
        system_domain_id: "system_domain_id"
      - headers: "{}"
        date_created: "2000-01-23T04:56:07.000+00:00"
        title: "title"
        type: "POST"
        url: "url"
        date_modified: "2000-01-23T04:56:07.000+00:00"
        context: "ASSET"
        metadata_view: "metadata_view"
        id: "id"
        last_error: "last_error"
        app_id: "app_id"
        status: "HEALTHY"
        system_domain_id: "system_domain_id"
      next_url: "next_url"
      page: -1803530559
      scroll_id: "scroll_id"
      prev_url: "prev_url"
      last_url: "last_url"
  DeleteQueueSchema:
    type: "object"
    required:
    - "ids"
    properties:
      ids:
        type: "array"
        items:
          type: "string"
  DrawingPointSchema:
    type: "object"
    required:
    - "x"
    - "y"
    properties:
      x:
        type: "integer"
        format: "int32"
        minimum: -2147483648
        maximum: 2147483647
      "y":
        type: "integer"
        format: "int32"
        minimum: -2147483648
        maximum: 2147483647
    example:
      x: -1803530559
      "y": 441289069
  DrawingPrimitiveSchema:
    type: "object"
    required:
    - "type"
    properties:
      color:
        type: "string"
      points:
        type: "array"
        items:
          $ref: "#/definitions/DrawingPointSchema"
      text:
        type: "string"
      type:
        type: "string"
        enum:
        - "LINE"
        - "RECTANGLE"
        - "ARROW"
        - "ELLIPSE"
        - "PENCIL"
        - "TEXT"
    example:
      color: "color"
      text: "text"
      type: "LINE"
      points:
      - x: -1803530559
        "y": 441289069
      - x: -1803530559
        "y": 441289069
  DrawingSchema:
    type: "object"
    properties:
      primitives:
        type: "array"
        items:
          $ref: "#/definitions/DrawingPrimitiveSchema"
    example:
      primitives:
      - color: "color"
        text: "text"
        type: "LINE"
        points:
        - x: -1803530559
          "y": 441289069
        - x: -1803530559
          "y": 441289069
      - color: "color"
        text: "text"
        type: "LINE"
        points:
        - x: -1803530559
          "y": 441289069
        - x: -1803530559
          "y": 441289069
  EditAssetVersionSchema:
    type: "object"
    required:
    - "id"
    properties:
      analyze_status:
        type: "string"
        enum:
        - "N/A"
        - "REQUESTED"
        - "IN_PROGRESS"
        - "FAILED"
        - "DONE"
      archive_status:
        type: "string"
        enum:
        - "NOT_ARCHIVED"
        - "ARCHIVING"
        - "FAILED_TO_ARCHIVE"
        - "ARCHIVED"
      created_by_user:
        type: "string"
      created_by_user_info:
        $ref: "#/definitions/UserSchema"
      date_created:
        type: "string"
        format: "date-time"
      id:
        type: "string"
      is_online:
        type: "boolean"
        default: true
      status:
        type: "string"
        enum:
        - "ACTIVE"
        - "IN_PROGRESS"
        - "FAILED"
        - "DELETING"
        - "DELETED"
        default: "ACTIVE"
      transcribe_status:
        type: "string"
        enum:
        - "N/A"
        - "REQUESTED"
        - "IN_PROGRESS"
        - "FAILED"
        - "DONE"
    example:
      archive_status: "NOT_ARCHIVED"
      date_created: "2000-01-23T04:56:07.000+00:00"
      transcribe_status: "N/A"
      id: "id"
      is_online: true
      analyze_status: "N/A"
      created_by_user_info:
        last_name: "last_name"
        photo: "photo"
        photo_big: "photo_big"
        photo_small: "photo_small"
        id: "id"
        first_name: "first_name"
        email: "email"
      created_by_user: "created_by_user"
      status: "ACTIVE"
  EditSegmentSchema:
    type: "object"
    required:
    - "segment_type"
    properties:
      drawing:
        $ref: "#/definitions/DrawingSchema"
      external_id:
        type: "string"
        x-nullable: true
      metadata:
        type: "object"
        readOnly: true
        properties: {}
      metadata_view_id:
        type: "string"
        x-nullable: true
      segment_checked:
        type: "boolean"
      segment_color:
        type: "string"
      segment_text:
        type: "string"
        x-nullable: true
      segment_track:
        type: "string"
        x-nullable: true
      segment_type:
        type: "string"
        enum:
        - "MARKER"
        - "QC"
        - "GENERIC"
        - "COMMENT"
        - "TAG"
        - "TRANSCRIPTION"
        - "SCENE"
        - "PERSON"
      share_user_email:
        type: "string"
        format: "email"
        readOnly: true
      status:
        type: "string"
        enum:
        - "ACTIVE"
        - "DELETED"
      time_end_milliseconds:
        type: "integer"
        format: "int64"
        minimum: -9223372036854775808
        maximum: 9223372036854775807
        x-nullable: true
      time_start_milliseconds:
        type: "integer"
        format: "int64"
        minimum: -9223372036854775808
        maximum: 9223372036854775807
        x-nullable: true
      transcription:
        $ref: "#/definitions/TranscriptionTypeSchema"
      transcription_id:
        type: "string"
        x-nullable: true
      user_first_name:
        type: "string"
        readOnly: true
      user_info:
        $ref: "#/definitions/UserSchema"
      user_last_name:
        type: "string"
        readOnly: true
      user_photo:
        type: "string"
        readOnly: true
      version_id:
        type: "string"
  GetAssetsLatestVersionSchema:
    type: "object"
    required:
    - "object_ids"
    properties:
      include_in_progress:
        type: "boolean"
      object_ids:
        type: "array"
        items:
          type: "string"
        maxItems: 500
        minItems: 1
      object_type:
        type: "string"
        enum:
        - "assets"
        default: "assets"
  ListObjectsSchema:
    type: "object"
    properties:
      first_url:
        type: "string"
        readOnly: true
      last_url:
        type: "string"
        readOnly: true
      next_url:
        type: "string"
        readOnly: true
      page:
        type: "integer"
        format: "int32"
        readOnly: true
        minimum: -2147483648
        maximum: 2147483647
      pages:
        type: "integer"
        format: "int32"
        readOnly: true
        minimum: -2147483648
        maximum: 2147483647
      per_page:
        type: "integer"
        format: "int32"
        readOnly: true
        minimum: -2147483648
        maximum: 2147483647
      prev_url:
        type: "string"
        readOnly: true
      scroll_id:
        type: "string"
        readOnly: true
      total:
        type: "integer"
        format: "int64"
        readOnly: true
        minimum: -9223372036854775808
        maximum: 9223372036854775807
  MetadataFieldValueSchema:
    type: "object"
    properties:
      date_created:
        type: "string"
        format: "date-time"
      field_values:
        type: "array"
        items:
          type: "object"
          properties: {}
  ReindexAllAssetsSchema:
    type: "object"
    properties:
      asset_ids:
        type: "array"
        items:
          type: "string"
        x-nullable: true
      realms:
        type: "array"
        items:
          type: "string"
        x-nullable: true
      sync_to_another_dc:
        type: "boolean"
        default: true
  ReindexAllCollectionsSchema:
    type: "object"
    required:
    - "collection_ids"
    properties:
      collection_ids:
        type: "array"
        items:
          type: "string"
        x-nullable: true
      realms:
        type: "array"
        items:
          type: "string"
        x-nullable: true
  ReindexAllSegmentsSchema:
    type: "object"
    required:
    - "asset_ids"
    properties:
      asset_ids:
        type: "array"
        items:
          type: "string"
        x-nullable: true
      ignore_comments:
        type: "boolean"
        default: false
      realms:
        type: "array"
        items:
          type: "string"
        x-nullable: true
      sync_to_another_dc:
        type: "boolean"
        default: true
  ReindexAssetHistorySchema:
    type: "object"
    properties:
      sync_to_another_dc:
        type: "boolean"
        default: true
  ReindexAssetSchema:
    type: "object"
    properties:
      realms:
        type: "array"
        items:
          type: "string"
        x-nullable: true
      sync_to_another_dc:
        type: "boolean"
        default: true
  ReindexCollectionContentSchema:
    type: "object"
    properties:
      sync_to_another_dc:
        type: "boolean"
        default: true
  ReindexCollectionSchema:
    type: "object"
    properties:
      realms:
        type: "array"
        items:
          type: "string"
        x-nullable: true
      sync_to_another_dc:
        type: "boolean"
        default: true
  ReindexInheritedCollectionsACLSchema:
    type: "object"
    required:
    - "collection_ids"
    properties:
      collection_ids:
        type: "array"
        items:
          type: "string"
        x-nullable: true
      content:
        type: "boolean"
        default: true
      recursive:
        type: "boolean"
        default: true
  ReindexSegmentSchema:
    type: "object"
    properties:
      ignore_comments:
        type: "boolean"
        default: false
      realms:
        type: "array"
        items:
          type: "string"
        x-nullable: true
      sync_to_another_dc:
        type: "boolean"
        default: true
  RelationElasticSchema:
    type: "object"
    properties:
      date_created:
        type: "string"
        readOnly: true
      date_modified:
        type: "string"
        readOnly: true
      description:
        type: "string"
      related_from_asset_id:
        type: "string"
      related_to_asset_id:
        type: "string"
      relation_type:
        type: "string"
    example:
      date_modified: "date_modified"
      date_created: "date_created"
      related_from_asset_id: "related_from_asset_id"
      description: "description"
      related_to_asset_id: "related_to_asset_id"
      relation_type: "relation_type"
  RelationSchema:
    type: "object"
    required:
    - "related_to_asset_id"
    - "relation_type"
    properties:
      asset_id:
        type: "string"
      date_created:
        type: "string"
        format: "date-time"
        readOnly: true
      date_modified:
        type: "string"
        format: "date-time"
        readOnly: true
      description:
        type: "string"
        x-nullable: true
      id:
        type: "string"
        readOnly: true
      metadata:
        type: "array"
        items:
          type: "object"
          properties: {}
      related_to_asset_id:
        type: "string"
      relation_type:
        type: "string"
    example:
      metadata:
      - "{}"
      - "{}"
      date_modified: "2000-01-23T04:56:07.000+00:00"
      date_created: "2000-01-23T04:56:07.000+00:00"
      description: "description"
      related_to_asset_id: "related_to_asset_id"
      asset_id: "asset_id"
      id: "id"
      relation_type: "relation_type"
  RelationTypeSchema:
    type: "object"
    required:
    - "destination_label"
    - "name"
    - "source_label"
    properties:
      date_created:
        type: "string"
        format: "date-time"
        readOnly: true
      date_modified:
        type: "string"
        format: "date-time"
        readOnly: true
      description:
        type: "string"
        x-nullable: true
      destination_label:
        type: "string"
      is_directional:
        type: "boolean"
        default: true
      is_system:
        type: "boolean"
        readOnly: true
        default: false
      name:
        type: "string"
      source_label:
        type: "string"
    example:
      is_system: false
      date_modified: "2000-01-23T04:56:07.000+00:00"
      destination_label: "destination_label"
      date_created: "2000-01-23T04:56:07.000+00:00"
      source_label: "source_label"
      name: "name"
      description: "description"
      is_directional: true
  RelationTypesSchema:
    type: "object"
    properties:
      first_url:
        type: "string"
        readOnly: true
      last_url:
        type: "string"
        readOnly: true
      next_url:
        type: "string"
        readOnly: true
      objects:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/RelationTypeSchema"
      page:
        type: "integer"
        format: "int32"
        readOnly: true
        minimum: -2147483648
        maximum: 2147483647
      pages:
        type: "integer"
        format: "int32"
        readOnly: true
        minimum: -2147483648
        maximum: 2147483647
      per_page:
        type: "integer"
        format: "int32"
        readOnly: true
        minimum: -2147483648
        maximum: 2147483647
      prev_url:
        type: "string"
        readOnly: true
      scroll_id:
        type: "string"
        readOnly: true
      total:
        type: "integer"
        format: "int64"
        readOnly: true
        minimum: -9223372036854775808
        maximum: 9223372036854775807
    example:
      per_page: -1517921766
      first_url: "first_url"
      total: 1774823812569044992
      pages: 441289069
      objects:
      - is_system: false
        date_modified: "2000-01-23T04:56:07.000+00:00"
        destination_label: "destination_label"
        date_created: "2000-01-23T04:56:07.000+00:00"
        source_label: "source_label"
        name: "name"
        description: "description"
        is_directional: true
      - is_system: false
        date_modified: "2000-01-23T04:56:07.000+00:00"
        destination_label: "destination_label"
        date_created: "2000-01-23T04:56:07.000+00:00"
        source_label: "source_label"
        name: "name"
        description: "description"
        is_directional: true
      next_url: "next_url"
      page: -1803530559
      scroll_id: "scroll_id"
      prev_url: "prev_url"
      last_url: "last_url"
  RelationsSchema:
    type: "object"
    properties:
      first_url:
        type: "string"
        readOnly: true
      last_url:
        type: "string"
        readOnly: true
      next_url:
        type: "string"
        readOnly: true
      objects:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/RelationSchema"
      page:
        type: "integer"
        format: "int32"
        readOnly: true
        minimum: -2147483648
        maximum: 2147483647
      pages:
        type: "integer"
        format: "int32"
        readOnly: true
        minimum: -2147483648
        maximum: 2147483647
      per_page:
        type: "integer"
        format: "int32"
        readOnly: true
        minimum: -2147483648
        maximum: 2147483647
      prev_url:
        type: "string"
        readOnly: true
      scroll_id:
        type: "string"
        readOnly: true
      total:
        type: "integer"
        format: "int64"
        readOnly: true
        minimum: -9223372036854775808
        maximum: 9223372036854775807
  SegmentBaseSchema:
    type: "object"
    required:
    - "segment_type"
    properties:
      asset_id:
        type: "string"
        readOnly: true
      date_created:
        type: "string"
        format: "date-time"
        readOnly: true
      drawing:
        $ref: "#/definitions/DrawingSchema"
      external_id:
        type: "string"
        x-nullable: true
      id:
        type: "string"
        readOnly: true
      metadata:
        type: "object"
        readOnly: true
        properties: {}
      metadata_view_id:
        type: "string"
        x-nullable: true
      parent_id:
        type: "string"
      path:
        type: "string"
      segment_checked:
        type: "boolean"
      segment_color:
        type: "string"
      segment_text:
        type: "string"
        x-nullable: true
      segment_track:
        type: "string"
        x-nullable: true
      segment_type:
        type: "string"
        enum:
        - "MARKER"
        - "QC"
        - "GENERIC"
        - "COMMENT"
        - "TAG"
        - "TRANSCRIPTION"
        - "SCENE"
        - "PERSON"
      share_user_email:
        type: "string"
        format: "email"
        readOnly: true
      status:
        type: "string"
        enum:
        - "ACTIVE"
        - "DELETED"
      time_end_milliseconds:
        type: "integer"
        format: "int64"
        minimum: -9223372036854775808
        maximum: 9223372036854775807
        x-nullable: true
      time_start_milliseconds:
        type: "integer"
        format: "int64"
        minimum: -9223372036854775808
        maximum: 9223372036854775807
        x-nullable: true
      top_level:
        type: "boolean"
      transcription:
        $ref: "#/definitions/TranscriptionTypeSchema"
      transcription_id:
        type: "string"
        x-nullable: true
      user_first_name:
        type: "string"
        readOnly: true
      user_id:
        type: "string"
      user_info:
        $ref: "#/definitions/UserSchema"
      user_last_name:
        type: "string"
        readOnly: true
      user_photo:
        type: "string"
        readOnly: true
      version_id:
        type: "string"
  SegmentElasticSchema:
    type: "object"
    required:
    - "segment_type"
    properties:
      asset_id:
        type: "string"
        readOnly: true
      date_created:
        type: "string"
        readOnly: true
      date_modified:
        type: "string"
        readOnly: true
      drawing:
        $ref: "#/definitions/DrawingSchema"
      external_id:
        type: "string"
        x-nullable: true
      has_drawing:
        type: "boolean"
        readOnly: true
      id:
        type: "string"
        readOnly: true
      metadata:
        type: "object"
        readOnly: true
        properties: {}
      metadata_view_id:
        type: "string"
        x-nullable: true
      parent_id:
        type: "string"
      path:
        type: "string"
      segment_checked:
        type: "boolean"
      segment_color:
        type: "string"
      segment_text:
        type: "string"
        x-nullable: true
      segment_track:
        type: "string"
        x-nullable: true
      segment_type:
        type: "string"
        enum:
        - "MARKER"
        - "QC"
        - "GENERIC"
        - "COMMENT"
        - "TAG"
        - "TRANSCRIPTION"
        - "SCENE"
        - "PERSON"
      share_user_email:
        type: "string"
        format: "email"
        readOnly: true
      status:
        type: "string"
        enum:
        - "ACTIVE"
        - "DELETED"
      time_end_milliseconds:
        type: "integer"
        format: "int64"
        minimum: -9223372036854775808
        maximum: 9223372036854775807
        x-nullable: true
      time_start_milliseconds:
        type: "integer"
        format: "int64"
        minimum: -9223372036854775808
        maximum: 9223372036854775807
        x-nullable: true
      top_level:
        type: "boolean"
      transcription:
        $ref: "#/definitions/TranscriptionTypeSchema"
      transcription_id:
        type: "string"
        x-nullable: true
      user_first_name:
        type: "string"
        readOnly: true
      user_id:
        type: "string"
      user_info:
        $ref: "#/definitions/UserSchema"
      user_last_name:
        type: "string"
        readOnly: true
      user_photo:
        type: "string"
        readOnly: true
      version_id:
        type: "string"
    example:
      metadata: "{}"
      share_user_email: "share_user_email"
      transcription:
        speaker: 273751188
        words:
        - score: 7.0614014
          end_ms: -4976680883935979520
          value: "value"
          start_ms: 7934764111515531264
        - score: 7.0614014
          end_ms: -4976680883935979520
          value: "value"
          start_ms: 7934764111515531264
      segment_color: "segment_color"
      user_last_name: "user_last_name"
      top_level: true
      external_id: "external_id"
      asset_id: "asset_id"
      metadata_view_id: "metadata_view_id"
      path: "path"
      user_first_name: "user_first_name"
      transcription_id: "transcription_id"
      time_end_milliseconds: -6519424345728851968
      user_info:
        last_name: "last_name"
        photo: "photo"
        photo_big: "photo_big"
        photo_small: "photo_small"
        id: "id"
        first_name: "first_name"
        email: "email"
      drawing:
        primitives:
        - color: "color"
          text: "text"
          type: "LINE"
          points:
          - x: -1803530559
            "y": 441289069
          - x: -1803530559
            "y": 441289069
        - color: "color"
          text: "text"
          type: "LINE"
          points:
          - x: -1803530559
            "y": 441289069
          - x: -1803530559
            "y": 441289069
      segment_type: "MARKER"
      id: "id"
      segment_checked: true
      user_photo: "user_photo"
      date_created: "date_created"
      segment_text: "segment_text"
      has_drawing: true
      version_id: "version_id"
      date_modified: "date_modified"
      time_start_milliseconds: 1774823812569044992
      user_id: "user_id"
      parent_id: "parent_id"
      segment_track: "segment_track"
      status: "ACTIVE"
  SegmentSchema:
    type: "object"
    required:
    - "segment_type"
    properties:
      asset_id:
        type: "string"
        readOnly: true
      date_created:
        type: "string"
        format: "date-time"
        readOnly: true
      drawing:
        $ref: "#/definitions/DrawingSchema"
      external_id:
        type: "string"
        x-nullable: true
      has_drawing:
        type: "boolean"
        readOnly: true
      id:
        type: "string"
        readOnly: true
      metadata:
        type: "object"
        readOnly: true
        properties: {}
      metadata_view_id:
        type: "string"
        x-nullable: true
      parent_id:
        type: "string"
      path:
        type: "string"
      segment_checked:
        type: "boolean"
      segment_color:
        type: "string"
      segment_text:
        type: "string"
        x-nullable: true
      segment_track:
        type: "string"
        x-nullable: true
      segment_type:
        type: "string"
        enum:
        - "MARKER"
        - "QC"
        - "GENERIC"
        - "COMMENT"
        - "TAG"
        - "TRANSCRIPTION"
        - "SCENE"
        - "PERSON"
      share_user_email:
        type: "string"
        format: "email"
        readOnly: true
      status:
        type: "string"
        enum:
        - "ACTIVE"
        - "DELETED"
      time_end_milliseconds:
        type: "integer"
        format: "int64"
        minimum: -9223372036854775808
        maximum: 9223372036854775807
        x-nullable: true
      time_start_milliseconds:
        type: "integer"
        format: "int64"
        minimum: -9223372036854775808
        maximum: 9223372036854775807
        x-nullable: true
      top_level:
        type: "boolean"
      transcription:
        $ref: "#/definitions/TranscriptionTypeSchema"
      transcription_id:
        type: "string"
        x-nullable: true
      user_first_name:
        type: "string"
        readOnly: true
      user_id:
        type: "string"
      user_info:
        $ref: "#/definitions/UserSchema"
      user_last_name:
        type: "string"
        readOnly: true
      user_photo:
        type: "string"
        readOnly: true
      version_id:
        type: "string"
    example:
      metadata: "{}"
      share_user_email: "share_user_email"
      transcription:
        speaker: 273751188
        words:
        - score: 7.0614014
          end_ms: -4976680883935979520
          value: "value"
          start_ms: 7934764111515531264
        - score: 7.0614014
          end_ms: -4976680883935979520
          value: "value"
          start_ms: 7934764111515531264
      segment_color: "segment_color"
      user_last_name: "user_last_name"
      top_level: true
      external_id: "external_id"
      asset_id: "asset_id"
      metadata_view_id: "metadata_view_id"
      path: "path"
      user_first_name: "user_first_name"
      transcription_id: "transcription_id"
      time_end_milliseconds: -7746104769210155008
      user_info:
        last_name: "last_name"
        photo: "photo"
        photo_big: "photo_big"
        photo_small: "photo_small"
        id: "id"
        first_name: "first_name"
        email: "email"
      drawing:
        primitives:
        - color: "color"
          text: "text"
          type: "LINE"
          points:
          - x: -1803530559
            "y": 441289069
          - x: -1803530559
            "y": 441289069
        - color: "color"
          text: "text"
          type: "LINE"
          points:
          - x: -1803530559
            "y": 441289069
          - x: -1803530559
            "y": 441289069
      segment_type: "MARKER"
      id: "id"
      segment_checked: true
      user_photo: "user_photo"
      date_created: "2000-01-23T04:56:07.000+00:00"
      segment_text: "segment_text"
      has_drawing: true
      version_id: "version_id"
      time_start_milliseconds: 1895322125605019648
      user_id: "user_id"
      parent_id: "parent_id"
      segment_track: "segment_track"
      status: "ACTIVE"
  SegmentsSchema:
    type: "object"
    properties:
      facets:
        type: "object"
        properties: {}
      first_url:
        type: "string"
        readOnly: true
      last_url:
        type: "string"
        readOnly: true
      next_url:
        type: "string"
        readOnly: true
      objects:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/SegmentElasticSchema"
      page:
        type: "integer"
        format: "int32"
        readOnly: true
        minimum: -2147483648
        maximum: 2147483647
      pages:
        type: "integer"
        format: "int32"
        readOnly: true
        minimum: -2147483648
        maximum: 2147483647
      per_page:
        type: "integer"
        format: "int32"
        readOnly: true
        minimum: -2147483648
        maximum: 2147483647
      prev_url:
        type: "string"
        readOnly: true
      scroll_id:
        type: "string"
        readOnly: true
      total:
        type: "integer"
        format: "int64"
        readOnly: true
        minimum: -9223372036854775808
        maximum: 9223372036854775807
    example:
      per_page: -366958557
      first_url: "first_url"
      total: 4401913238958739456
      pages: -1276840939
      objects:
      - metadata: "{}"
        share_user_email: "share_user_email"
        transcription:
          speaker: 273751188
          words:
          - score: 7.0614014
            end_ms: -4976680883935979520
            value: "value"
            start_ms: 7934764111515531264
          - score: 7.0614014
            end_ms: -4976680883935979520
            value: "value"
            start_ms: 7934764111515531264
        segment_color: "segment_color"
        user_last_name: "user_last_name"
        top_level: true
        external_id: "external_id"
        asset_id: "asset_id"
        metadata_view_id: "metadata_view_id"
        path: "path"
        user_first_name: "user_first_name"
        transcription_id: "transcription_id"
        time_end_milliseconds: -6519424345728851968
        user_info:
          last_name: "last_name"
          photo: "photo"
          photo_big: "photo_big"
          photo_small: "photo_small"
          id: "id"
          first_name: "first_name"
          email: "email"
        drawing:
          primitives:
          - color: "color"
            text: "text"
            type: "LINE"
            points:
            - x: -1803530559
              "y": 441289069
            - x: -1803530559
              "y": 441289069
          - color: "color"
            text: "text"
            type: "LINE"
            points:
            - x: -1803530559
              "y": 441289069
            - x: -1803530559
              "y": 441289069
        segment_type: "MARKER"
        id: "id"
        segment_checked: true
        user_photo: "user_photo"
        date_created: "date_created"
        segment_text: "segment_text"
        has_drawing: true
        version_id: "version_id"
        date_modified: "date_modified"
        time_start_milliseconds: 1774823812569044992
        user_id: "user_id"
        parent_id: "parent_id"
        segment_track: "segment_track"
        status: "ACTIVE"
      - metadata: "{}"
        share_user_email: "share_user_email"
        transcription:
          speaker: 273751188
          words:
          - score: 7.0614014
            end_ms: -4976680883935979520
            value: "value"
            start_ms: 7934764111515531264
          - score: 7.0614014
            end_ms: -4976680883935979520
            value: "value"
            start_ms: 7934764111515531264
        segment_color: "segment_color"
        user_last_name: "user_last_name"
        top_level: true
        external_id: "external_id"
        asset_id: "asset_id"
        metadata_view_id: "metadata_view_id"
        path: "path"
        user_first_name: "user_first_name"
        transcription_id: "transcription_id"
        time_end_milliseconds: -6519424345728851968
        user_info:
          last_name: "last_name"
          photo: "photo"
          photo_big: "photo_big"
          photo_small: "photo_small"
          id: "id"
          first_name: "first_name"
          email: "email"
        drawing:
          primitives:
          - color: "color"
            text: "text"
            type: "LINE"
            points:
            - x: -1803530559
              "y": 441289069
            - x: -1803530559
              "y": 441289069
          - color: "color"
            text: "text"
            type: "LINE"
            points:
            - x: -1803530559
              "y": 441289069
            - x: -1803530559
              "y": 441289069
        segment_type: "MARKER"
        id: "id"
        segment_checked: true
        user_photo: "user_photo"
        date_created: "date_created"
        segment_text: "segment_text"
        has_drawing: true
        version_id: "version_id"
        date_modified: "date_modified"
        time_start_milliseconds: 1774823812569044992
        user_id: "user_id"
        parent_id: "parent_id"
        segment_track: "segment_track"
        status: "ACTIVE"
      next_url: "next_url"
      page: -594390510
      scroll_id: "scroll_id"
      prev_url: "prev_url"
      last_url: "last_url"
      facets: "{}"
  ShareBaseSchema:
    type: "object"
    required:
    - "allow_approving_comments"
    - "allow_comments"
    - "allow_download"
    - "allow_setting_approve_status"
    properties:
      allow_approving_comments:
        type: "boolean"
      allow_comments:
        type: "boolean"
      allow_custom_actions:
        type: "boolean"
        default: false
      allow_download:
        type: "boolean"
      allow_download_proxy:
        type: "boolean"
      allow_setting_approve_status:
        type: "boolean"
      allow_upload:
        type: "boolean"
        default: false
      allow_view_transcriptions:
        type: "boolean"
        default: true
      allow_view_versions:
        type: "boolean"
        default: true
      app_id:
        type: "string"
      date_created:
        type: "string"
        format: "date-time"
        readOnly: true
      expires:
        type: "string"
        format: "date-time"
      id:
        type: "string"
        readOnly: true
      message:
        type: "string"
        x-nullable: true
      metadata_views:
        type: "array"
        items:
          type: "string"
        x-nullable: true
      object_id:
        type: "string"
        readOnly: true
      object_type:
        type: "string"
        readOnly: true
      owner_id:
        type: "string"
        readOnly: true
      system_domain_id:
        type: "string"
        readOnly: true
      upload_storage_id:
        type: "string"
        x-nullable: true
      url:
        type: "string"
        readOnly: true
        x-nullable: true
  ShareCreateSchema:
    type: "object"
    required:
    - "allow_approving_comments"
    - "allow_comments"
    - "allow_download"
    - "allow_setting_approve_status"
    - "emails"
    properties:
      allow_approving_comments:
        type: "boolean"
      allow_comments:
        type: "boolean"
      allow_custom_actions:
        type: "boolean"
        default: false
      allow_download:
        type: "boolean"
      allow_download_proxy:
        type: "boolean"
      allow_setting_approve_status:
        type: "boolean"
      allow_upload:
        type: "boolean"
        default: false
      allow_view_transcriptions:
        type: "boolean"
        default: true
      allow_view_versions:
        type: "boolean"
        default: true
      app_id:
        type: "string"
      emails:
        type: "array"
        items:
          type: "string"
          format: "email"
      expires:
        type: "string"
        format: "date-time"
      id:
        type: "string"
        readOnly: true
      message:
        type: "string"
      metadata_views:
        type: "array"
        items:
          type: "string"
        x-nullable: true
      object_id:
        type: "string"
      object_type:
        type: "string"
      owner_id:
        type: "string"
        readOnly: true
      password:
        type: "string"
      system_domain_id:
        type: "string"
      upload_storage_id:
        type: "string"
        x-nullable: true
  ShareLoginSchema:
    type: "object"
    required:
    - "hash"
    properties:
      hash:
        type: "string"
      object_id:
        type: "string"
      object_type:
        type: "string"
      password:
        type: "string"
  ShareOptionsBaseSchema:
    type: "object"
  ShareSchema:
    type: "object"
    required:
    - "allow_approving_comments"
    - "allow_comments"
    - "allow_download"
    - "allow_setting_approve_status"
    properties:
      allow_approving_comments:
        type: "boolean"
      allow_comments:
        type: "boolean"
      allow_custom_actions:
        type: "boolean"
        default: false
      allow_download:
        type: "boolean"
      allow_download_proxy:
        type: "boolean"
      allow_setting_approve_status:
        type: "boolean"
      allow_upload:
        type: "boolean"
        default: false
      allow_view_transcriptions:
        type: "boolean"
        default: true
      allow_view_versions:
        type: "boolean"
        default: true
      app_id:
        type: "string"
      date_created:
        type: "string"
        format: "date-time"
        readOnly: true
      expires:
        type: "string"
        format: "date-time"
      id:
        type: "string"
        readOnly: true
      message:
        type: "string"
        x-nullable: true
      metadata_views:
        type: "array"
        items:
          type: "string"
        x-nullable: true
      object_id:
        type: "string"
        readOnly: true
      object_type:
        type: "string"
        readOnly: true
      owner_id:
        type: "string"
        readOnly: true
      system_domain_id:
        type: "string"
        readOnly: true
      upload_storage_id:
        type: "string"
        x-nullable: true
      url:
        type: "string"
        readOnly: true
        x-nullable: true
    example:
      expires: "2000-01-23T04:56:07.000+00:00"
      allow_custom_actions: false
      allow_upload: false
      object_type: "object_type"
      allow_comments: true
      date_created: "2000-01-23T04:56:07.000+00:00"
      owner_id: "owner_id"
      allow_view_transcriptions: true
      metadata_views:
      - "metadata_views"
      - "metadata_views"
      message: "message"
      object_id: "object_id"
      url: "url"
      allow_download: true
      allow_approving_comments: true
      allow_setting_approve_status: true
      id: "id"
      allow_download_proxy: true
      allow_view_versions: true
      upload_storage_id: "upload_storage_id"
      app_id: "app_id"
      system_domain_id: "system_domain_id"
  ShareTokenSchema:
    type: "object"
    properties:
      app_id:
        type: "string"
        readOnly: true
      email:
        type: "string"
        format: "email"
      expires:
        type: "string"
        format: "date-time"
        readOnly: true
      object_id:
        type: "string"
        readOnly: true
      object_type:
        type: "string"
        readOnly: true
      roles:
        type: "array"
        readOnly: true
        items:
          type: "string"
      share_id:
        type: "string"
        readOnly: true
      share_user_id:
        type: "string"
        readOnly: true
      system_domain_id:
        type: "string"
        readOnly: true
      token:
        type: "string"
      user_id:
        type: "string"
        readOnly: true
    example:
      share_id: "share_id"
      expires: "2000-01-23T04:56:07.000+00:00"
      share_user_id: "share_user_id"
      object_type: "object_type"
      user_id: "user_id"
      roles:
      - "roles"
      - "roles"
      app_id: "app_id"
      object_id: "object_id"
      email: "email"
      system_domain_id: "system_domain_id"
      token: "token"
  ShareURLCreateSchema:
    type: "object"
    required:
    - "allow_approving_comments"
    - "allow_comments"
    - "allow_download"
    - "allow_setting_approve_status"
    properties:
      allow_approving_comments:
        type: "boolean"
      allow_comments:
        type: "boolean"
      allow_custom_actions:
        type: "boolean"
        default: false
      allow_download:
        type: "boolean"
      allow_download_proxy:
        type: "boolean"
      allow_setting_approve_status:
        type: "boolean"
      allow_upload:
        type: "boolean"
        default: false
      allow_view_transcriptions:
        type: "boolean"
        default: true
      allow_view_versions:
        type: "boolean"
        default: true
      expires:
        type: "string"
        format: "date-time"
      metadata_views:
        type: "array"
        items:
          type: "string"
        x-nullable: true
      object_id:
        type: "string"
      object_type:
        type: "string"
      owner_id:
        type: "string"
      password:
        type: "string"
        x-nullable: true
      system_domain_id:
        type: "string"
      upload_storage_id:
        type: "string"
        x-nullable: true
  ShareURLSchema:
    type: "object"
    required:
    - "allow_approving_comments"
    - "allow_comments"
    - "allow_download"
    - "allow_setting_approve_status"
    properties:
      allow_approving_comments:
        type: "boolean"
      allow_comments:
        type: "boolean"
      allow_custom_actions:
        type: "boolean"
        default: false
      allow_download:
        type: "boolean"
      allow_download_proxy:
        type: "boolean"
      allow_setting_approve_status:
        type: "boolean"
      allow_upload:
        type: "boolean"
        default: false
      allow_view_transcriptions:
        type: "boolean"
        default: true
      allow_view_versions:
        type: "boolean"
        default: true
      app_id:
        type: "string"
      date_created:
        type: "string"
        format: "date-time"
        readOnly: true
      expires:
        type: "string"
        format: "date-time"
      id:
        type: "string"
        readOnly: true
      message:
        type: "string"
        x-nullable: true
      metadata_views:
        type: "array"
        items:
          type: "string"
        x-nullable: true
      object_id:
        type: "string"
        readOnly: true
      object_type:
        type: "string"
        readOnly: true
      owner_id:
        type: "string"
        readOnly: true
      system_domain_id:
        type: "string"
        readOnly: true
      upload_storage_id:
        type: "string"
        x-nullable: true
      url:
        type: "string"
    example:
      expires: "2000-01-23T04:56:07.000+00:00"
      allow_custom_actions: false
      allow_upload: false
      object_type: "object_type"
      allow_comments: true
      date_created: "2000-01-23T04:56:07.000+00:00"
      owner_id: "owner_id"
      allow_view_transcriptions: true
      metadata_views:
      - "metadata_views"
      - "metadata_views"
      message: "message"
      object_id: "object_id"
      url: "url"
      allow_download: true
      allow_approving_comments: true
      allow_setting_approve_status: true
      id: "id"
      allow_download_proxy: true
      allow_view_versions: true
      upload_storage_id: "upload_storage_id"
      app_id: "app_id"
      system_domain_id: "system_domain_id"
  ShareUserSchema:
    type: "object"
    required:
    - "email"
    properties:
      access_count:
        type: "integer"
        format: "int32"
        readOnly: true
        minimum: -2147483648
        maximum: 2147483647
      email:
        type: "string"
        format: "email"
      first_name:
        type: "string"
        readOnly: true
      id:
        type: "string"
      last_access_date:
        type: "string"
        format: "date-time"
        readOnly: true
      last_name:
        type: "string"
        readOnly: true
      object_id:
        type: "string"
        readOnly: true
      object_type:
        type: "string"
        readOnly: true
      password:
        type: "string"
      photo:
        type: "string"
        readOnly: true
      photo_big:
        type: "string"
        readOnly: true
      photo_small:
        type: "string"
        readOnly: true
      share_id:
        type: "string"
        readOnly: true
    example:
      object_type: "object_type"
      last_access_date: "2000-01-23T04:56:07.000+00:00"
      last_name: "last_name"
      photo: "photo"
      access_count: -1803530559
      photo_big: "photo_big"
      photo_small: "photo_small"
      object_id: "object_id"
      share_id: "share_id"
      password: "password"
      id: "id"
      first_name: "first_name"
      email: "email"
  ShareUsersSchema:
    type: "object"
    properties:
      objects:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/ShareUserSchema"
    example:
      objects:
      - object_type: "object_type"
        last_access_date: "2000-01-23T04:56:07.000+00:00"
        last_name: "last_name"
        photo: "photo"
        access_count: -1803530559
        photo_big: "photo_big"
        photo_small: "photo_small"
        object_id: "object_id"
        share_id: "share_id"
        password: "password"
        id: "id"
        first_name: "first_name"
        email: "email"
      - object_type: "object_type"
        last_access_date: "2000-01-23T04:56:07.000+00:00"
        last_name: "last_name"
        photo: "photo"
        access_count: -1803530559
        photo_big: "photo_big"
        photo_small: "photo_small"
        object_id: "object_id"
        share_id: "share_id"
        password: "password"
        id: "id"
        first_name: "first_name"
        email: "email"
  SharesSchema:
    type: "object"
    properties:
      objects:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/ShareSchema"
    example:
      objects:
      - expires: "2000-01-23T04:56:07.000+00:00"
        allow_custom_actions: false
        allow_upload: false
        object_type: "object_type"
        allow_comments: true
        date_created: "2000-01-23T04:56:07.000+00:00"
        owner_id: "owner_id"
        allow_view_transcriptions: true
        metadata_views:
        - "metadata_views"
        - "metadata_views"
        message: "message"
        object_id: "object_id"
        url: "url"
        allow_download: true
        allow_approving_comments: true
        allow_setting_approve_status: true
        id: "id"
        allow_download_proxy: true
        allow_view_versions: true
        upload_storage_id: "upload_storage_id"
        app_id: "app_id"
        system_domain_id: "system_domain_id"
      - expires: "2000-01-23T04:56:07.000+00:00"
        allow_custom_actions: false
        allow_upload: false
        object_type: "object_type"
        allow_comments: true
        date_created: "2000-01-23T04:56:07.000+00:00"
        owner_id: "owner_id"
        allow_view_transcriptions: true
        metadata_views:
        - "metadata_views"
        - "metadata_views"
        message: "message"
        object_id: "object_id"
        url: "url"
        allow_download: true
        allow_approving_comments: true
        allow_setting_approve_status: true
        id: "id"
        allow_download_proxy: true
        allow_view_versions: true
        upload_storage_id: "upload_storage_id"
        app_id: "app_id"
        system_domain_id: "system_domain_id"
  SynchronizeCollectionKeyframesSchema:
    type: "object"
    properties:
      asset_ids:
        type: "array"
        items:
          type: "string"
        maxItems: 3
        minItems: 0
        x-nullable: true
  TranscriptionElementTypeSchema:
    type: "object"
    required:
    - "end_ms"
    - "start_ms"
    - "value"
    properties:
      end_ms:
        type: "integer"
        format: "int64"
        minimum: -9223372036854775808
        maximum: 9223372036854775807
      score:
        type: "number"
        format: "float"
      start_ms:
        type: "integer"
        format: "int64"
        minimum: -9223372036854775808
        maximum: 9223372036854775807
      value:
        type: "string"
    example:
      score: 7.0614014
      end_ms: -4976680883935979520
      value: "value"
      start_ms: 7934764111515531264
  TranscriptionTypeSchema:
    type: "object"
    required:
    - "words"
    properties:
      speaker:
        type: "integer"
        format: "int32"
        minimum: -2147483648
        maximum: 2147483647
        x-nullable: true
      words:
        type: "array"
        items:
          $ref: "#/definitions/TranscriptionElementTypeSchema"
        minItems: 1
    example:
      speaker: 273751188
      words:
      - score: 7.0614014
        end_ms: -4976680883935979520
        value: "value"
        start_ms: 7934764111515531264
      - score: 7.0614014
        end_ms: -4976680883935979520
        value: "value"
        start_ms: 7934764111515531264
  UserSchema:
    type: "object"
    properties:
      email:
        type: "string"
        format: "email"
        readOnly: true
      first_name:
        type: "string"
        readOnly: true
      id:
        type: "string"
        readOnly: true
      last_name:
        type: "string"
        readOnly: true
      photo:
        type: "string"
        readOnly: true
      photo_big:
        type: "string"
        readOnly: true
      photo_small:
        type: "string"
        readOnly: true
    example:
      last_name: "last_name"
      photo: "photo"
      photo_big: "photo_big"
      photo_small: "photo_small"
      id: "id"
      first_name: "first_name"
      email: "email"
